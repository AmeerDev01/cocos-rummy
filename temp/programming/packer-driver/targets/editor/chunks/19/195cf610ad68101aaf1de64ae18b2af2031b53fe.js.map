{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/godWealth111/viewModel/GameBoardViewModel.ts"],"names":["instantiate","sp","sys","ViewModel","StoreInject","SKT_MAG_TYPE","sktInstance","sktMsgListener","config","AutoLauncherType","GameType","IconEffectType","NORMAL_MAG_TYPE","msgListener","sourceManageSeletor","playSmallGameOver","PrefabPathDefine","changeAutoLauncherType","changeGame","changeProfit","changeViewGame","setAutoLaunchedTimes","setJackPotUserArr","setSubGameTimes","updateBalance","updateJackpotAmount","updateSubGameTimes","getStore","dataTransfer","DataKeyType","setData","TaskScheduler","Task","TaskSchedulerDefault","EffectType","setIconBaoHeEffect","setRollRoundEnd","bundlePkgName","RollerPanelViewModel","SkeletonAnimationPlayer","GameBoardViewModel","constructor","currentGameViewModel","changeGameTypeTask","flyBgNode","currGameType","NONE","viewGameType","taskScheduler","begin","addOnce","AUTH","data","dispatch","gameType","SUBGAME2","fixedChessboardIcon","SUBGAME1","bl","freeGameCount","freeGameAmount","BAOHE","FIXED_CHESSBOARD_ICON","BALANCE","dispath","CHANGE_GAME","MAIN","FREE_GAME_AMOUNT","localStorage","setItem","JSON","stringify","rollerPanelViewModel","mountView","getFile","MAIN_GAME","source","appendTo","comp","getGameNode","effectType","EFFECT_FADE","effectDone","connect","sendSktMessage","token","getItem","gameId","add","JACKPOT","BALANCE_UPDATE","JACKPOT_USER","LAUNCHER_BET","error","console","log","GAME_TYPE","setEvent","changeGameHandler","lastGameType","done","winnerDialog","showSmallWin","getFreeNode","active","rollerViewModelMap","forEach","roller","clearBaoHeIcon","getBaoHeNode","SUBGAME_TIMES","subscribeDone","joinqQueue","createFlyBg","FLY_BG","viewNode","addChild","titleSkeleton","getChildByName","getComponent","Skeleton","destroy","playAnimation","unMountCallBack","undefined","removeById","inject","state","game"],"mappings":"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","sourcesContent":["import { Game, Node, instantiate, sp, sys, tween } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { GodWealth_gameBoard, IProps, IEvent } from \"../components/GodWealth_gameBoard\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { SKT_MAG_TYPE, sktInstance, sktMsgListener } from \"../socketConnect\"\r\nimport config from \"../config\"\r\nimport { AutoLauncherType, GameType, IconEffectType, SMALLGAME } from \"../type\"\r\nimport { NORMAL_MAG_TYPE, godWealth_Audio, msgListener, sourceManageSeletor, gameBoardViewModel, playSmallGameOver } from \"../index\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { changeAutoLauncherType, changeGame, changeProfit, changeViewGame, setAutoLaunchedTimes, setFreeGameId, setJackPotUserArr, setSubGameTimes, setWaiting, updateBalance, updateJackpotAmount, updateSubGameTimes } from \"../store/actions/game\"\r\nimport { getStore } from \"../store\"\r\nimport dataTransfer, { DataKeyType, setData } from \"../dataTransfer\"\r\nimport TaskScheduler, { Task, TaskSchedulerDefault } from \"../../../utils/TaskScheduler\"\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\"\r\nimport { setIconBaoHeEffect, setRollRoundEnd } from \"../store/actions/roller\"\r\nimport { bundlePkgName } from '../sourceDefine';\r\nimport { SoundPathDefine } from \"../sourceDefine/soundDefine\"\r\nimport RollerPanelViewModel from \"./RollerPanelViewModel\"\r\n// import SgChooseViewModel from \"./SgChooseViewModel\"\r\nimport { GodWealth_small_win, IState as SWIState, IProps as SWIProps, IEvent as SWIEvent } from \"../components/GodWealth_small_win\"\r\nimport BaseViewModel from \"../../../common/viewModel/BaseViewModel\"\r\nimport SkeletonAnimationPlayer from \"../SkeletonPlay\"\r\n\r\ntype anthInfoType = {\r\n  bl: number\r\n  freeGameCount: number\r\n  freeGameAmount: number,\r\n  gameType: GameType\r\n  iconStay: number\r\n  lv: number\r\n  memberId: string\r\n  tableId: string,\r\n  fixedChessboardIcon?:number[][]\r\n  // totalFreeGameCount:number,\r\n}\r\n\r\nexport type ChooseSmallGame = {\r\n  done?: Function,\r\n  gameType?:GameType,\r\n}\r\n\r\nexport let rollerPanelViewModel: RollerPanelViewModel;\r\n// export let chooseSmallGame: SgChooseViewModel;\r\nexport let smallResultViewModel\r\n@StoreInject(getStore())\r\nclass GameBoardViewModel extends ViewModel<GodWealth_gameBoard, IProps, IEvent> {\r\n  constructor() {\r\n    super('GodWealth_gameBoard')\r\n  }\r\n  public currentGameViewModel: ViewModel<any, any, any> = null\r\n  public changeGameTypeTask: Task\r\n  public flyBgNode: Node\r\n  private currGameType: GameType = GameType.NONE;\r\n  private viewGameType: GameType;\r\n  private taskScheduler: TaskScheduler = new TaskScheduler();\r\n  protected begin() {\r\n    sktMsgListener.addOnce(SKT_MAG_TYPE.AUTH, bundlePkgName, (data: anthInfoType) => {\r\n      this.dispatch(changeGame(data.gameType))\r\n      if(data.gameType ===GameType.SUBGAME2) {//宝盒小游戏\r\n        setData(\"fixedChessboardIcon\", data.fixedChessboardIcon)        \r\n      } else if(data.gameType === GameType.SUBGAME1){\r\n        // this.dispatch(changeGame(data.gameType))\r\n        // this.dispatch(changeViewGame(data.gameType))\r\n      }\r\n      /**刚刚初始化游戏，需要带入必要的游戏状态 */\r\n      setData(\"bl\", data.bl)\r\n      setData(\"gameType\", data.gameType)\r\n      setData(\"freeCount\", data.freeGameCount)\r\n      setData(\"freeGameAmount\", data.freeGameAmount)\r\n      // this.dispatch(setFreeGameId(data.phoenixFreeGameLine))\r\n      if (data.gameType === GameType.SUBGAME2) {\r\n        this.dispatch(setIconBaoHeEffect(IconEffectType.BAOHE,dataTransfer(DataKeyType.FIXED_CHESSBOARD_ICON)));\r\n      }\r\n      this.dispatch(updateBalance(dataTransfer(DataKeyType.BALANCE)))\r\n      this.dispatch(setSubGameTimes(data.freeGameCount))\r\n      this.dispatch(updateSubGameTimes(data.freeGameCount))\r\n      msgListener.dispath(NORMAL_MAG_TYPE.CHANGE_GAME, { currGameType: data.gameType })\r\n      if (data.gameType !== GameType.MAIN) {\r\n        //小游戏需要读取盈利状态\r\n        this.dispatch(changeProfit(dataTransfer(DataKeyType.FREE_GAME_AMOUNT)))\r\n      }\r\n      sys.localStorage.setItem(\"godWealth\", JSON.stringify(data))\r\n      rollerPanelViewModel = new RollerPanelViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.MAIN_GAME).source).appendTo(this.comp.getGameNode(), {\r\n        effectType: EffectType.EFFECT_FADE, effectDone: () => {\r\n          this.dispatch(setRollRoundEnd(true))\r\n        }\r\n      }).connect()\r\n      this.currentGameViewModel = rollerPanelViewModel;\r\n      this.dispatch(changeViewGame(data.gameType))\r\n\r\n      // this.dispatch(changeGame(GameType.MAIN))\r\n    })\r\n    sktInstance.sendSktMessage(SKT_MAG_TYPE.AUTH, {\r\n      token: sys.localStorage.getItem(\"token\"),\r\n      gameId: config.gameId\r\n    })\r\n    sktMsgListener.add(SKT_MAG_TYPE.JACKPOT, bundlePkgName, (data) => {\r\n      this.dispatch(updateJackpotAmount(data))\r\n    })\r\n    sktMsgListener.add(SKT_MAG_TYPE.BALANCE_UPDATE, bundlePkgName, (data) => {\r\n      this.dispatch(updateBalance(data))\r\n    })\r\n    sktMsgListener.add(SKT_MAG_TYPE.JACKPOT_USER, bundlePkgName, (data) => {\r\n      this.dispatch(setJackPotUserArr(data))\r\n    })\r\n\r\n    sktMsgListener.add(SKT_MAG_TYPE.LAUNCHER_BET, bundlePkgName, (data, error) => {\r\n      console.log('curGame------------',this.currGameType, dataTransfer(DataKeyType.GAME_TYPE))\r\n      //小游戏转主游戏时判定 切换gameType值\r\n      if (this.currGameType !== dataTransfer(DataKeyType.GAME_TYPE)) {\r\n        this.currGameType = dataTransfer(DataKeyType.GAME_TYPE)\r\n        this.dispatch(changeGame(dataTransfer(DataKeyType.GAME_TYPE)))\r\n        // if(dataTransfer(DataKeyType.GAME_TYPE)===GameType.MAIN){\r\n        //   this.dispatch(changeProfit(0))\r\n        // }\r\n      }\r\n    }, 100)\r\n\r\n    this.setEvent({\r\n      /**切换游戏时执行 */\r\n      changeGameHandler: (lastGameType, currGameType) => {\r\n        console.log(\"lastGameType\", lastGameType, currGameType)\r\n        // if (lastGameType !== currGameType && lastGameType === GameType.SUBGAME2) {\r\n        //     const flicherBaoHeArr: number[][] = dataTransfer(DataKeyType.FIXED_CHESSBOARD_ICON);//获取宝盒数据\r\n        //        /**宝盒金币飞行特效*/\r\n        //       const multiplesOfFlight = new Task((done) => { \r\n        //       if(Object.keys(flicherBaoHeArr).length > 0){\r\n        //         this.comp.multiplierBaoHe(done)\r\n        //       } else {\r\n        //         done()\r\n        //       }\r\n        //       })\r\n        //       this.taskScheduler.joinqQueue(multiplesOfFlight, false)\r\n        // }\r\n        this.changeGameTypeTask = new Task((done) => {\r\n          if (this.currentGameViewModel) {\r\n            if (lastGameType !== currGameType && lastGameType !== GameType.MAIN) {\r\n              console.log(\"lastGameType22\", lastGameType);\r\n              this.dispatch(setRollRoundEnd(false))\r\n             \r\n              const winnerDialog = rollerPanelViewModel.showSmallWin();\r\n              if (lastGameType === GameType.SUBGAME1) {\r\n                playSmallGameOver()\r\n                winnerDialog.comp.getFreeNode().active = true;\r\n              } else if (lastGameType === GameType.SUBGAME2) {\r\n                playSmallGameOver()\r\n                /**宝盒游戏出来 清除宝盒 */\r\n                rollerPanelViewModel.comp.rollerViewModelMap.forEach((roller) => {\r\n                  roller.comp.clearBaoHeIcon()\r\n                })\r\n                winnerDialog.comp.getBaoHeNode().active = true;\r\n              }\r\n              done()\r\n\r\n            } else if (lastGameType !== currGameType && lastGameType === GameType.MAIN ) { \r\n              if (currGameType === GameType.SUBGAME1) {\r\n                this.dispatch(setSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n                done()\r\n              } else if (currGameType === GameType.SUBGAME2) {\r\n                // window.setTimeout(() => {\r\n                //   const winnerDialog = rollerPanelViewModel.showSmallWin();\r\n                //   winnerDialog.comp.getBaoHeBoxNode().active = true;\r\n                  \r\n                // },1000)\r\n                done()\r\n              }\r\n            }\r\n          } else {\r\n            done()\r\n          }\r\n        }).subscribeDone('change', () => {\r\n          this.dispatch(changeViewGame(currGameType))\r\n          msgListener.dispath(NORMAL_MAG_TYPE.CHANGE_GAME, { currGameType })\r\n        })\r\n        if (!this.currentGameViewModel) {\r\n          //初始化的时候才直接执行\r\n          TaskSchedulerDefault().joinqQueue(this.changeGameTypeTask, true)\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**转场动画 */\r\n  public createFlyBg() {\r\n      //转场\r\n    this.flyBgNode = instantiate(sourceManageSeletor().getFile(PrefabPathDefine.FLY_BG).source)//动画转场背景\r\n    this.viewNode.addChild(this.flyBgNode);\r\n    const titleSkeleton = this.flyBgNode.getChildByName(\"caishenguochang\").getComponent(sp.Skeleton)\r\n\r\n    new SkeletonAnimationPlayer(titleSkeleton, 'animation', false, () => {\r\n      // this.currentGameViewModel.unMount(EffectType.EFFECT1).then(() => {\r\n      //   done()\r\n      // })\r\n      // this.currentGameViewModel.comp.viewNode.active = false;\r\n      this.flyBgNode && this.flyBgNode.destroy();\r\n      this.dispatch(setRollRoundEnd(true));\r\n    }).playAnimation()\r\n  }\r\n\r\n  protected unMountCallBack(): void {\r\n    this.dispatch(changeAutoLauncherType(AutoLauncherType.NONE))\r\n    this.dispatch(setAutoLaunchedTimes(undefined));\r\n    sktMsgListener.removeById(bundlePkgName)\r\n  }\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      this.viewGameType = state.game.viewGameType;\r\n      return {\r\n        gameType: state.game.currGameType\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default GameBoardViewModel\r\n"]}
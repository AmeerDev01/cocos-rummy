{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/thor/store/actions/roller.ts"],"names":["reduxAct","default","IconEffectType","initState","rollerMap","roundAllEnd","iconEffectData","iconEffect","NONE","coord","smallBox","ActionTypes","initRollAction","createAction","THOR_INIT_ROLL","beginRollAction","THOR_BEGIN_ROLL","rollerIndex","speed","direction","setStopRollAction","THOR_SET_STOP_ROLL","stopIconIndex","endRollingAction","THOR_END_ROLLING","rolling","setIconEffect","THOR_SET_FLICKER","flickerCoord","setSmallBox","THOR_SET_ROLL_SMALLBOX","setRollRoundEnd","THOR_SET_ROUNT_END","setRollSpeed","THOR_SET_ROLL_SPEED","speedMultiple"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAoBA,MAAAA,Q,aAAXC,O;;AACeC,MAAAA,c,iBAAAA,c;;;;;;;;;2BAiBXC,S,GAA2B;AACtCC,QAAAA,SAAS,EAAE,EAD2B;AAEtCC,QAAAA,WAAW,EAAE,IAFyB;AAGtCC,QAAAA,cAAc,EAAE;AACdC,UAAAA,UAAU,EAAE;AAAA;AAAA,gDAAeC,IADb;AAEdC,UAAAA,KAAK,EAAE;AAFO,SAHsB;AAOtCC,QAAAA,QAAQ,EAAC;AAP6B,O;AASxC;;;6BACYC,W,0BAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;AAAAA,QAAAA,W;eAAAA,W;;AAWZ;;;gCAYaC,c,GAAiB;AAAA;AAAA,gCAASC,YAAT,CAAsBF,WAAW,CAACG,cAAlC,EAC3BV,SAAD,IAAwE;AACtE,eAAO;AAAEA,UAAAA;AAAF,SAAP;AACD,OAH2B,C;;iCAMjBW,e,GAAkB;AAAA;AAAA,gCAASF,YAAT,CAAsBF,WAAW,CAACK,eAAlC,EAC7B,CAACC,WAAD,EAAsBC,KAAtB,EAAsCC,SAAtC,KAAgH;AAC9G,eAAO;AAAEF,UAAAA,WAAF;AAAeC,UAAAA,KAAf;AAAsBC,UAAAA;AAAtB,SAAP;AACD,OAH4B,C;;mCAKlBC,iB,GAAoB;AAAA;AAAA,gCAASP,YAAT,CAAsBF,WAAW,CAACU,kBAAlC,EAC/B,CAACJ,WAAD,EAAsBK,aAAtB,KAA+F;AAC7F,eAAO;AAAEL,UAAAA,WAAF;AAAeK,UAAAA;AAAf,SAAP;AACD,OAH8B,C;;kCAKpBC,gB,GAAmB;AAAA;AAAA,gCAASV,YAAT,CAAsBF,WAAW,CAACa,gBAAlC,EAC9B,CAACP,WAAD,EAAsBQ,OAAtB,KAAwF;AACtF,eAAO;AAAER,UAAAA,WAAF;AAAeQ,UAAAA;AAAf,SAAP;AACD,OAH6B,C;;+BAKnBC,a,GAAgB;AAAA;AAAA,gCAASb,YAAT,CAAsBF,WAAW,CAACgB,gBAAlC,EAC3B,CAACpB,UAAD,EAA6BqB,YAA7B,KAAuG;AACrG,eAAO;AAAErB,UAAAA,UAAF;AAAcqB,UAAAA;AAAd,SAAP;AACD,OAH0B,C;;6BAIhBC,W,GAAc;AAAA;AAAA,gCAAShB,YAAT,CAAsBF,WAAW,CAACmB,sBAAlC,EACxBpB,QAAD,IAAoE;AAClE,eAAO;AAAEA,UAAAA;AAAF,SAAP;AACD,OAHwB,C;;iCAKdqB,e,GAAkB;AAAA;AAAA,gCAASlB,YAAT,CAAsBF,WAAW,CAACqB,kBAAlC,EAC5B3B,WAAD,IAAyE;AACvE,eAAO;AAAEA,UAAAA;AAAF,SAAP;AACD,OAH4B,C;;8BAKlB4B,Y,GAAe;AAAA;AAAA,gCAASpB,YAAT,CAAsBF,WAAW,CAACuB,mBAAlC,EAC1B,CAACC,aAAD,EAAwBlB,WAAxB,KAAiG;AAC/F,eAAO;AAAEkB,UAAAA,aAAF;AAAiBlB,UAAAA;AAAjB,SAAP;AACD,OAHyB,C","sourcesContent":["import { default as reduxAct } from 'redux-act'\r\nimport { DirectionType, IconEffectType, RollerType } from '../../type';\r\nimport config from '../../config';\r\nimport { log } from 'cc';\r\n\r\n\r\nexport type InitStateType = {\r\n  rollerMap: RollerType[],\r\n  /**本轮是否全部转动结束 */\r\n  roundAllEnd: boolean,\r\n  iconEffectData: {\r\n    iconEffect: IconEffectType,\r\n    /**示例数据：[[0,1],[1,2],[2,1]] */\r\n    coord: number[][]\r\n  },\r\n  // 小滚动框\r\n  smallBox:object\r\n}\r\nexport const initState: InitStateType = {\r\n  rollerMap: [],\r\n  roundAllEnd: true,\r\n  iconEffectData: {\r\n    iconEffect: IconEffectType.NONE,\r\n    coord: []\r\n  },\r\n  smallBox:{}\r\n}\r\n/**必须大写，不然redux-act这货要自动加序列号 */\r\nexport enum ActionTypes {\r\n  THOR_INIT_ROLL = 'THOR_INIT_ROLL',\r\n  THOR_BEGIN_ROLL = 'THOR_BEGIN_ROLL',\r\n  THOR_SET_STOP_ROLL = 'THOR_SET_STOP_ROLL',\r\n  THOR_END_ROLLING = 'THOR_END_ROLL',\r\n  THOR_SET_FLICKER = 'THOR_SET_FLICKER',\r\n  THOR_SET_ROUNT_END = 'THOR_SET_ROUNT_END',\r\n  THOR_SET_ROLL_SPEED = 'THOR_SET_ROLL_SPEED',\r\n  THOR_SET_ROLL_SMALLBOX = 'THOR_SET_ROLL_SMALLBOX',\r\n}\r\n\r\n/**定义action的payLoad类型 */\r\nexport type ActionPayLoad<A extends ActionTypes> =\r\n  A extends ActionTypes.THOR_INIT_ROLL ? { rollerMap: RollerType[] } :\r\n  A extends ActionTypes.THOR_BEGIN_ROLL ? { rollerIndex: number, speed?: number, direction?: DirectionType } :\r\n  A extends ActionTypes.THOR_SET_STOP_ROLL ? { rollerIndex: number, stopIconIndex: number } :\r\n  A extends ActionTypes.THOR_END_ROLLING ? { rollerIndex: number, rolling: boolean } :\r\n  A extends ActionTypes.THOR_SET_FLICKER ? { iconEffect: IconEffectType, flickerCoord: number[][] } :\r\n  A extends ActionTypes.THOR_SET_ROUNT_END ? { roundAllEnd: boolean } :\r\n  A extends ActionTypes.THOR_SET_ROLL_SPEED ? { speedMultiple: number, rollerIndex?: number } :\r\n  A extends ActionTypes.THOR_SET_ROLL_SMALLBOX ? {smallBox: { }} :\r\n  never;\r\n\r\nexport const initRollAction = reduxAct.createAction(ActionTypes.THOR_INIT_ROLL,\r\n  (rollerMap: RollerType[]): ActionPayLoad<ActionTypes.THOR_INIT_ROLL> => {\r\n    return { rollerMap }\r\n  })\r\n\r\n\r\nexport const beginRollAction = reduxAct.createAction(ActionTypes.THOR_BEGIN_ROLL,\r\n  (rollerIndex: number, speed?: number, direction?: DirectionType): ActionPayLoad<ActionTypes.THOR_BEGIN_ROLL> => {\r\n    return { rollerIndex, speed, direction }\r\n  })\r\n\r\nexport const setStopRollAction = reduxAct.createAction(ActionTypes.THOR_SET_STOP_ROLL,\r\n  (rollerIndex: number, stopIconIndex: number): ActionPayLoad<ActionTypes.THOR_SET_STOP_ROLL> => {\r\n    return { rollerIndex, stopIconIndex }\r\n  })\r\n\r\nexport const endRollingAction = reduxAct.createAction(ActionTypes.THOR_END_ROLLING,\r\n  (rollerIndex: number, rolling: boolean): ActionPayLoad<ActionTypes.THOR_END_ROLLING> => {\r\n    return { rollerIndex, rolling }\r\n  })\r\n\r\nexport const setIconEffect = reduxAct.createAction(ActionTypes.THOR_SET_FLICKER,\r\n  (iconEffect: IconEffectType, flickerCoord: number[][]): ActionPayLoad<ActionTypes.THOR_SET_FLICKER> => {\r\n    return { iconEffect, flickerCoord }\r\n  })\r\nexport const setSmallBox = reduxAct.createAction(ActionTypes.THOR_SET_ROLL_SMALLBOX,\r\n  (smallBox:{}): ActionPayLoad<ActionTypes.THOR_SET_ROLL_SMALLBOX> => {\r\n    return { smallBox}\r\n  })\r\n\r\nexport const setRollRoundEnd = reduxAct.createAction(ActionTypes.THOR_SET_ROUNT_END,\r\n  (roundAllEnd: boolean): ActionPayLoad<ActionTypes.THOR_SET_ROUNT_END> => {\r\n    return { roundAllEnd }\r\n  })\r\n\r\nexport const setRollSpeed = reduxAct.createAction(ActionTypes.THOR_SET_ROLL_SPEED,\r\n  (speedMultiple: number, rollerIndex?: number): ActionPayLoad<ActionTypes.THOR_SET_ROLL_SPEED> => {\r\n    return { speedMultiple, rollerIndex }\r\n  })\r\n"]}
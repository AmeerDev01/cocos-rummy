{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/components/Hall_Turntable/TurntableWin.ts"],"names":["_decorator","Label","Node","BaseComponent","hallAudio","SoundPathDefine","ccclass","property","TurntableWin","propertyNode","props_btn_off","props_win_gift_name","props_win_gift_num","props","TurntableData","events","onClosePanel","start","initState","bindEvent","on","EventType","TOUCH_END","playOneShot","BTU_CLICK","useProps","key","value","cur","turntablePrizeEntity","getComponent","string","prizeName","bindUI","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAsEC,MAAAA,K,OAAAA,K;AAAoBC,MAAAA,I,OAAAA,I;;AAC1FC,MAAAA,a,iBAAAA,a;;AAEQC,MAAAA,S,iBAAAA,S;;AAKRC,MAAAA,e,iBAAAA,e;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBP,U;;8BAajBQ,Y,WADZF,OAAO,CAAC,cAAD,C,gBAAR,MACaE,YADb;AAAA;AAAA,0CACwE;AAAA;AAAA;AAAA,eAK1DC,YAL0D,GAK3C;AACrBC,YAAAA,aAAa,EAAC,IAAIR,IAAJ,EADO;AAErBS,YAAAA,mBAAmB,EAAC,IAAIT,IAAJ,EAFC;AAGrBU,YAAAA,kBAAkB,EAAC,IAAIV,IAAJ;AAHE,WAL2C;AAAA,eAW7DW,KAX6D,GAW7C;AACnBC,YAAAA,aAAa,EAAC;AADK,WAX6C;AAAA,eAe7DC,MAf6D,GAe5C;AACpBC,YAAAA,YAAY,EAAE,MAAM,CAAG;AADH,WAf4C;AAAA;;AACpEC,QAAAA,KAAK,GAAG,CAEP;;AAgBSC,QAAAA,SAAS,GAAG;AAClB,iBAAO,EAAP;AAGH;;AAESC,QAAAA,SAAS,GAAS;AACzB,eAAKV,YAAL,CAAkBC,aAAlB,CAAgCU,EAAhC,CAAmClB,IAAI,CAACmB,SAAL,CAAeC,SAAlD,EAA6D,MAAM;AAClE;AAAA;AAAA,wCAAUC,WAAV,CAAsB;AAAA;AAAA,oDAAgBC,SAAtC;AACA,iBAAKT,MAAL,CAAYC,YAAZ;AACF,WAHC;AAIF;;AAESS,QAAAA,QAAQ,CAACC,GAAD,EAAoBC,KAApB,EAAmD;AAClE,cAAGD,GAAG,KAAK,eAAX,EAA2B;AAC3B,gBAAGC,KAAK,CAACC,GAAN,IAAWD,KAAK,CAACC,GAAN,CAAUC,oBAAxB,EAA6C;AAC5C,mBAAKpB,YAAL,CAAkBE,mBAAlB,CAAsCmB,YAAtC,CAAmD7B,KAAnD,EAA0D8B,MAA1D,GAAiEJ,KAAK,CAACC,GAAN,CAAUC,oBAAV,CAA+BG,SAAhG,CAD4C,CAE5C;AACA;AACA;AACH;;AACSC,QAAAA,MAAM,GAAS,CAExB;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AA9CmE,O","sourcesContent":["import { _decorator, assetManager, Button, Component, ImageAsset, instantiate, Label, log, native, Node, ScrollView, Sprite, SpriteFrame, sys, systemEvent, Texture2D, tween, UIOpacity, UITransform, Vec2, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nimport { addToastAction, ToastType } from '../../store/actions/baseBoard';\r\nimport { global, hallAudio, lang, sourceManageSeletor } from '../../index';\r\nimport { SKT_MAG_TYPE, sktInstance, sktMsgListener } from '../../socketConnect';\r\nimport BaseViewModel from '../../viewModel/BaseViewModel';\r\nimport { EffectType } from '../../../utils/NodeIOEffect';\r\nimport { PrefabPathDefine } from '../../sourceDefine/prefabDefine';\r\nimport { SoundPathDefine } from '../../sourceDefine/soundDefine';\r\nconst { ccclass, property } = _decorator;\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n    TurntableData: any\r\n}\r\nexport interface IEvent {\r\n    onClosePanel: () => void\r\n}\r\n\r\n@ccclass('TurntableWin')\r\nexport class TurntableWin extends BaseComponent<IState, IProps, IEvent> {\r\n    start() {\r\n\r\n    }\r\n\r\n    protected propertyNode = {\r\n        props_btn_off:new Node(),\r\n        props_win_gift_name:new Node(),\r\n        props_win_gift_num:new Node(),\r\n    }\r\n\r\n    public props: IProps = {\r\n        TurntableData:{}\r\n    }\r\n\r\n    public events: IEvent = {\r\n        onClosePanel: () => { },\r\n    }\r\n\r\n    protected initState() {\r\n        return {\r\n\r\n        }\r\n    }\r\n\r\n    protected bindEvent(): void {\r\n       this.propertyNode.props_btn_off.on(Node.EventType.TOUCH_END, () => {\r\n        hallAudio.playOneShot(SoundPathDefine.BTU_CLICK)\r\n        this.events.onClosePanel()\r\n     })\r\n    }\r\n\r\n    protected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n       if(key === 'TurntableData'){\r\n       if(value.cur&&value.cur.turntablePrizeEntity){\r\n        this.propertyNode.props_win_gift_name.getComponent(Label).string=value.cur.turntablePrizeEntity.prizeName\r\n        // this.propertyNode.props_win_gift_num.getComponent(Label).string=value.cur.turntablePrizeEntity.prizeValue\r\n       }\r\n       }\r\n    }\r\n    protected bindUI(): void {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n}\r\n\r\n"]}
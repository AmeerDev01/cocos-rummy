{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/dragonTiger/ViewModel/DragonTigerTitleViewModel.ts"],"names":["_decorator","Animation","Tween","Vec3","ViewModel","StoreInject","getStore","sourceManageSeletor","PrefabPathDefine","EffectType","SetViewModel","RuleViewModel","global","gameTime","hisTime","timer","resetPokerStore","setPokerLeftAction","setPokerRightAction","setReadyPAction","setSendedPAction","setTipsAction","updatePokerInfo","changeGameTypeAction","resetHistoryStore","setMemberBetAction","changeAllWinUsersAction","changeCancelBetDataAction","changeGoldDataAction","resetStore","setNewBetDataAction","setUsersInfoAction","resetUserStore","ccclass","property","TitleViewModel","constructor","isClick","begin","setEvent","returnHall","window","clearInterval","clearTimeout","clearCacheData","closeSubGame","openMenuPanel","openMenu","openHelpPenel","openRule","openSetPanel","openSet","dispatch","titleNode","viewNode","getChildByName","titleAnimation","getComponent","play","on","EventType","FINISHED","tw","to","scale","start","nodeWrap","setViewModel","mountView","getFile","MAIN_SET","source","appendTo","parentNode","effectType","EFFECT1","isModal","onClosePanel","unMount","EFFECT2","connect","ruleViewModel","MAIN_RULE","inject","state","memberBet","history","winType","userInfo"],"mappings":"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","sourcesContent":["import { _decorator, assetManager,AssetManager, Component, instantiate, Node, Animation, Tween, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nimport { DragonTiger_title, IProps, IEvent } from \"../components/DragonTiger_title\"\r\nimport ViewModel ,{ StoreInject }from \"../../../base/ViewModel\"\r\nimport { StateType } from \"../store/reducer\";\r\nimport { getStore } from '../store';\r\nimport {sourceManageSeletor} from '../index';\r\nimport { PrefabPathDefine } from '../sourceDefine/prefabDefine';\r\nimport { EffectType } from '../../../utils/NodeIOEffect';\r\nimport SetViewModel from './DragonTigerSetViewModel';\r\nimport RuleViewModel from './DragonTigerRuleViewModel';\r\nimport { global } from '../../../hall';\r\nimport { gameTime, hisTime, timer } from '../components/DragonTiger_MainPanel';\r\nimport { resetPokerStore, setPokerLeftAction, setPokerRightAction, setReadyPAction, setSendedPAction, setTipsAction, updatePokerInfo } from '../store/actions/pokerDetail';\r\nimport { changeGameTypeAction, resetHistoryStore, setMemberBetAction } from '../store/actions/history';\r\nimport { changeAllWinUsersAction, changeCancelBetDataAction, changeGoldDataAction, resetStore, setNewBetDataAction, setUsersInfoAction } from '../store/actions/game';\r\nimport { resetUserStore } from '../store/actions/userInfo';\r\n\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport let setViewModel:SetViewModel\r\nexport let ruleViewModel:RuleViewModel\r\n@StoreInject(getStore())\r\nclass TitleViewModel extends ViewModel<DragonTiger_title, IProps, IEvent> {\r\n\r\n    private isClick:boolean=false\r\n    constructor() {\r\n        super('DragonTiger_title')     \r\n      }\r\n    \r\n    protected begin() { \r\n        this.setEvent({\r\n          returnHall: () => {\r\n            window.clearInterval(timer);\r\n            window.clearTimeout(hisTime);\r\n            window.clearTimeout(gameTime);\r\n            this.clearCacheData()\r\n            global.closeSubGame();\r\n          },\r\n          openMenuPanel:()=>{\r\n            this.openMenu()\r\n            \r\n          },\r\n          openHelpPenel:()=>{\r\n            this.openRule()\r\n          },\r\n    \r\n          openSetPanel:()=>{\r\n            this.openSet();\r\n          },\r\n        })\r\n  }\r\n  public clearCacheData() {\r\n    this.dispatch(resetStore(null));\r\n    this.dispatch(resetHistoryStore(null));\r\n    this.dispatch(resetPokerStore(null));\r\n    this.dispatch(resetUserStore(null));\r\n    this.dispatch(changeGoldDataAction({}));\r\n    this.dispatch(setTipsAction(null));\r\n    this.dispatch(setSendedPAction(0));\r\n    this.dispatch(setReadyPAction(0));\r\n    this.dispatch(changeGameTypeAction(null));\r\n    this.dispatch(setMemberBetAction(null));\r\n    this.dispatch(updatePokerInfo(null));\r\n    this.dispatch(setPokerLeftAction(null));\r\n    this.dispatch(setPokerRightAction(null));\r\n    this.dispatch(setNewBetDataAction(null));\r\n    this.dispatch(changeCancelBetDataAction(null));\r\n    this.dispatch(setUsersInfoAction(null));\r\n    this.dispatch(changeAllWinUsersAction(null));\r\n\r\n\r\n\r\n  }\r\n    \r\n    public  openMenu(){\r\n      const titleNode:Node= this.viewNode.getChildByName(\"props_mask_titrle\")\r\n      const titleAnimation=this.viewNode.getChildByName(\"props_mask_titrle\").getComponent(Animation)\r\n      if(!this.isClick){\r\n        titleAnimation.play()   \r\n        titleAnimation.on(Animation.EventType.FINISHED,()=>{\r\n          this.isClick=true\r\n        },this)\r\n  \r\n      }else{\r\n        const tw=new Tween(titleNode).to(0.2,{scale:new Vec3(1,0,0)}).start()\r\n        this.isClick=false\r\n      }\r\n  \r\n      \r\n    }\r\n    public openSet(nodeWrap?: Node) {\r\n      setViewModel = new SetViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.MAIN_SET).source)\r\n        .appendTo(nodeWrap || this.parentNode, { effectType: EffectType.EFFECT1, isModal: true }).setEvent({\r\n          onClosePanel: () => {\r\n            setViewModel.unMount(EffectType.EFFECT2)\r\n            \r\n          }\r\n        }).connect()\r\n    }\r\n    public openRule(nodeWrap?: Node) {\r\n      ruleViewModel = new RuleViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.MAIN_RULE).source)\r\n        .appendTo(nodeWrap || this.parentNode, { effectType: EffectType.EFFECT1, isModal: true }).setEvent({\r\n          onClosePanel: () => {\r\n            ruleViewModel.unMount(EffectType.EFFECT2)\r\n            \r\n          }\r\n        }).connect()\r\n    }\r\n    public connect() {\r\n      this.inject({}, (state: StateType) => {\r\n        return {\r\n          memberBet:state.history.memberBet,\r\n          winType:state.userInfo.winType,\r\n        }\r\n      })\r\n      return this\r\n    }\r\n\r\n}\r\n\r\nexport default TitleViewModel\r\n\r\n"]}
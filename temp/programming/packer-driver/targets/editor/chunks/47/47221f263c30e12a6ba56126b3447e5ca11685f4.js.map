{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/utils/DropDownBox.ts"],"names":["Node","ScrollView","Toggle","initDropDownBox","data","node","event","dataList","initView","list","_chooseInded","scrollView","getComponent","content","children","forEach","item","index","destroy","active","itemNode","renderItem","result","push","on","EventType","TOUCH_END","chooseItem","item2","index2","updateItemNode","toggleNode","isChecked","addChild","checkIndex","bgNode"],"mappings":"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","sourcesContent":["import { Node, ScrollView, Toggle } from \"cc\"\r\n\r\nexport type DropDownItemType<T> = {\r\n  item: T, index: number, itemNode: Node\r\n}\r\n/**前提条件\r\n * 1：具有一个带toggle组件的节点\r\n * 2：具有一个带有scrollView的节点，且content的第一个节点作为选项模板，为一个按钮(按钮Label子节点name=Label)\r\n * 3：传入一个bgNode的父节点，作为点击自动收起下拉框，要确认冒泡能收到事件\r\n * 4：数据checkIndex为默认选中节点，为-1则无默认选中值\r\n * 5：返回值为重渲染函数，传入更新的数据\r\n */\r\nconst initDropDownBox = <T>(\r\n  data: { list: Array<T>, checkIndex: number },\r\n  node: {\r\n    /**触发展开/收起下拉的Toggle节点 */\r\n    toggleNode: Node, \r\n    /**下拉面板 */\r\n    scrollView: Node, \r\n    /**背景节点(事件一定能穿透到的容器节点)用于点击其他区域自动关闭下拉框 */\r\n    bgNode: Node },\r\n  event: {\r\n    /**根据数据渲染选项节点 */\r\n    renderItem: (record: T) => Node,\r\n    /**选中值的回调 */\r\n    chooseItem: (item: DropDownItemType<T>) => void\r\n    /**渲染每个节点的回调处理，有多少个数据，就会执行多少次 */\r\n    updateItemNode: (itemNode: Node, isChoose: boolean) => void\r\n  }) => {\r\n  const dataList: DropDownItemType<T>[] = []\r\n  const initView = (list: Array<T>, _chooseInded: number) => {\r\n    node.scrollView.getComponent(ScrollView).content.children.forEach((item, index) => {\r\n      index >= 1 ? item.destroy() : (item.active = false)\r\n    })\r\n    list.forEach((item, index) => {\r\n      const itemNode = event.renderItem(item)\r\n      itemNode.active = true\r\n      const result = { item, index, itemNode }\r\n      dataList.push(result)\r\n      //这里是一个闭包，注意\r\n      itemNode.on(Node.EventType.TOUCH_END, () => {\r\n        event.chooseItem(result)\r\n        dataList.forEach((item2, index2) => event.updateItemNode(item2.itemNode, index2 === index ? true : false))\r\n        node.toggleNode.getComponent(Toggle).isChecked = false\r\n      })\r\n      node.scrollView.active = false\r\n      node.scrollView.getComponent(ScrollView).content.addChild(itemNode)\r\n    })\r\n    dataList.forEach((item, index) => event.updateItemNode(item.itemNode, index === _chooseInded ? true : false))\r\n    _chooseInded >= 0 && event.chooseItem(dataList[_chooseInded])\r\n  }\r\n  initView(data.list, data.checkIndex)\r\n  node.bgNode.on(Node.EventType.TOUCH_END, () => {\r\n    node.toggleNode.getComponent(Toggle).isChecked = false\r\n  })\r\n  node.toggleNode.on('toggle', () => node.scrollView.active = node.toggleNode.getComponent(Toggle).isChecked, this)\r\n  return (list: Array<T>) => {\r\n    initView(list, -1)\r\n  }\r\n}\r\nexport default initDropDownBox\r\n\r\n\r\n/*\r\n使用示例\r\n\r\nconst reRender = initDropDownBox({\r\n    list: ['+12', '+13', '+14', '+15', '+86'],\r\n    checkIndex: 1\r\n  }, {\r\n    toggleNode: this.propertyNode.props_togglePhoneAreaNum_pwd,\r\n    scrollView: this.propertyNode.props_ScrollView_areaNum_pwd,\r\n    bgNode: this.node.parent\r\n  }, {\r\n    renderItem: (record) => {\r\n      const templateBtu: Node = instantiate(this.propertyNode.props_ScrollView_areaNum_pwd.getComponent(ScrollView).content.children[0])\r\n      templateBtu.getChildByName(\"Label\").getComponent(Label).string = record\r\n      return templateBtu\r\n    },\r\n    chooseItem: ({ item }) => { \r\n      this.propertyNode.props_intput_phone_areaNum_pwd.getComponent(EditBox).string = item \r\n    },\r\n    updateItemNode: (node, isChoose) => {\r\n      node.getChildByName(\"Label\").getComponent(Label).color = isChoose ? Color.RED : Color.BLACK\r\n    }\r\n  })\r\n\r\n  ....\r\n  //重新赋值渲染\r\n  reRender([],-1)\r\n\r\n*/"]}
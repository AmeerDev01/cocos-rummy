{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/domino/store/reducer/game.ts"],"names":["instantiate","ActionTypes","initState","reduxAct","default","DeskStatus","PlayerSatus","SeatPosition","calCardAzimuth","getCardAlignValue","config","createReducer","DOMINO_INIT_SELF_SEAT","state","payload","_state","player","seatIndex","playerMap","DOMINO_JOIN_SEAT","seatPostion","LEFT","TOP","RIGHT","DOWN","console","log","DOMINO_CHANGE_DESK_STATUS","statue","status","WAITING","filter","v","forEach","gameData","isMaster","remainCardCount","cardIList","noWayCardNumber","CLSOE","COUNTDOWNING","newCardItem","readyCountdown","rightOutCardItem","leftOutCardItem","outCardItem","intendOutCard","lastActiveSeatIndex","currActiveSeatIndex","balanceOdds","countdown","DOMINO_UPDATE_PLAYER_GAME_DATA","find","i","uid","palyerId","playGame","DOMINO_DEAL","cardItems","DOMINO_CHANGE_OUT_CARD_PLAYER","DOMINO_SHOW_OUT_CARD","cardItem","showOutCard","length","alignValue","azimuth","value","upFace","downFace","push","DOMINO_OUT_COUTNDOWN","outCountdown","DOMINO_CLEAR_ROOM_DATA","Array","seatNumber","fill","quitRoomAction","DOMINO_SET_DESK_CARD_OUTLINE","DOMINO_QUIT_ROOM","Date","now","DOMINO_GAME_IN_WINLOSS","winloss","Math","abs","winlossType","lossSeatIndex","glodAmount","winSeatIndex","DOMINO_QUIT_SEAT","playerId","DOMINO_UPDATE_LEWAT","playerNew","lewatPokers","DOMINO_BALANCE","balancePlayer","balances","balance","memberId","gold","odds","DOMINO_UPDATE_GOLD"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,W,OAAAA,W;;AACAC,MAAAA,W,iBAAAA,W;AAA2CC,MAAAA,S,iBAAAA,S;;AAChCC,MAAAA,Q,aAAXC,O;;AACAC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,W,iBAAAA,W;AAAaC,MAAAA,Y,iBAAAA,Y;AAAcC,MAAAA,c,iBAAAA,c;AAAgBC,MAAAA,iB,iBAAAA,iB;;AACzDC,MAAAA,M;;;;;;;;;yBAEQ;AAAA;AAAA,gCAASC,aAAT,CAAsC;AACnD,SAAC;AAAA;AAAA,wCAAYC,qBAAb,GAAqC,CAACC,KAAD,EAAQC,OAAR,KAAqF;AACxH,gBAAMC,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACAC,UAAAA,OAAO,CAACE,MAAR,CAAeC,SAAf,GAA2B,CAA3B;AACAF,UAAAA,MAAM,CAACG,SAAP,CAAiB,CAAjB,IAAsBJ,OAAO,CAACE,MAA9B;AACA,iBAAO,EACL,GAAGD;AADE,WAAP;AAGD,SARkD;AASnD,SAAC;AAAA;AAAA,wCAAYI,gBAAb,GAAgC,CAACN,KAAD,EAAQC,OAAR,KAAgF;AAC9G,gBAAMC,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACA,kBAAQC,OAAO,CAACM,WAAhB;AACE,iBAAK;AAAA;AAAA,8CAAaC,IAAlB;AACEN,cAAAA,MAAM,CAACG,SAAP,CAAiB,CAAjB,IAAsBJ,OAAO,CAACE,MAA9B;AACAF,cAAAA,OAAO,CAACE,MAAR,CAAeC,SAAf,GAA2B,CAA3B;AAA8B;;AAChC,iBAAK;AAAA;AAAA,8CAAaK,GAAlB;AACEP,cAAAA,MAAM,CAACG,SAAP,CAAiB,CAAjB,IAAsBJ,OAAO,CAACE,MAA9B;AACAF,cAAAA,OAAO,CAACE,MAAR,CAAeC,SAAf,GAA2B,CAA3B;AACA;;AACF,iBAAK;AAAA;AAAA,8CAAaM,KAAlB;AACER,cAAAA,MAAM,CAACG,SAAP,CAAiB,CAAjB,IAAsBJ,OAAO,CAACE,MAA9B;AACAF,cAAAA,OAAO,CAACE,MAAR,CAAeC,SAAf,GAA2B,CAA3B;AACA;;AACF,iBAAK;AAAA;AAAA,8CAAaO,IAAlB;AACET,cAAAA,MAAM,CAACG,SAAP,CAAiB,CAAjB,IAAsBJ,OAAO,CAACE,MAA9B;AACAF,cAAAA,OAAO,CAACE,MAAR,CAAeC,SAAf,GAA2B,CAA3B;AACA;AAfJ;;AAiBAQ,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCX,MAAhC;AACA,iBAAO,EACL,GAAGA;AADE,WAAP;AAGD,SAhCkD;AAiCnD,SAAC;AAAA;AAAA,wCAAYY,yBAAb,GAAyC,CAACd,KAAD,EAAQC,OAAR,KAAyF;AAChI,gBAAMC,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACAE,UAAAA,MAAM,CAACa,MAAP,GAAgBd,OAAO,CAACe,MAAxB;;AACA,cAAIf,OAAO,CAACe,MAAR,KAAmB;AAAA;AAAA,wCAAWC,OAAlC,EAA2C;AACzCf,YAAAA,MAAM,CAACG,SAAP,CAAiBa,MAAjB,CAAwBC,CAAC,IAAIA,CAA7B,EAAgCC,OAAhC,CAAwCD,CAAC,IAAI;AAC3CA,cAAAA,CAAC,CAACE,QAAF,CAAWC,QAAX,GAAsB,KAAtB;AACAH,cAAAA,CAAC,CAACE,QAAF,CAAWE,eAAX,GAA6B,CAA7B;AACAJ,cAAAA,CAAC,CAACE,QAAF,CAAWG,SAAX,GAAuB,EAAvB;AACAL,cAAAA,CAAC,CAACE,QAAF,CAAWI,eAAX,GAA6B,EAA7B;AACD,aALD;AAMD,WAPD,MAOO,IAAIxB,OAAO,CAACe,MAAR,KAAmB;AAAA;AAAA,wCAAWU,KAAlC,EAAyC;AAC9CxB,YAAAA,MAAM,CAACG,SAAP,CAAiBa,MAAjB,CAAwBC,CAAC,IAAIA,CAA7B,EAAgCC,OAAhC,CAAwCD,CAAC,IAAI;AAC3CA,cAAAA,CAAC,CAACE,QAAF,CAAWrB,KAAX,GAAmB;AAAA;AAAA,8CAAYiB,OAA/B;AACAE,cAAAA,CAAC,CAACE,QAAF,CAAWI,eAAX,GAA6B,EAA7B;AACD,aAHD;AAID;;AAED,kBAAQxB,OAAO,CAACe,MAAhB;AACE,iBAAK;AAAA;AAAA,0CAAWC,OAAhB;AACA,iBAAK;AAAA;AAAA,0CAAWU,YAAhB;AACA,iBAAK;AAAA;AAAA,0CAAWD,KAAhB;AACExB,cAAAA,MAAM,CAAC0B,WAAP,GAAqB,IAArB;AACA1B,cAAAA,MAAM,CAAC2B,cAAP,GAAwB,IAAxB;AACA3B,cAAAA,MAAM,CAAC4B,gBAAP,GAA0B,EAA1B;AACA5B,cAAAA,MAAM,CAAC6B,eAAP,GAAyB,EAAzB;AACA7B,cAAAA,MAAM,CAAC8B,WAAP,GAAqB,EAArB;AACA9B,cAAAA,MAAM,CAAC+B,aAAP,GAAuB,IAAvB;AACA/B,cAAAA,MAAM,CAACgC,mBAAP,GAA6B,CAAC,CAA9B;AACAhC,cAAAA,MAAM,CAACiC,mBAAP,GAA6B,CAAC,CAA9B;AACAjC,cAAAA,MAAM,CAACkC,WAAP,GAAqB,CAArB;AACA;AAbJ;;AAeAlC,UAAAA,MAAM,CAAC2B,cAAP,GAAwB5B,OAAO,CAACoC,SAAhC;AAEA,iBAAO,EACL,GAAGnC;AADE,WAAP;AAGD,SAtEkD;AAuEnD,SAAC;AAAA;AAAA,wCAAYoC,8BAAb,GAA8C,CAACtC,KAAD,EAAQC,OAAR,KAA8F;AAC1I,gBAAMC,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACA,gBAAMG,MAAM,GAAGD,MAAM,CAACG,SAAP,CAAiBkC,IAAjB,CAAsBC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACC,GAAF,KAAUxC,OAAO,CAACyC,QAAlD,CAAf;;AACAvC,UAAAA,MAAM,KAAKA,MAAM,CAACkB,QAAP,GAAkBpB,OAAO,CAAC0C,QAA/B,CAAN;AACA,iBAAO,EACL,GAAGzC;AADE,WAAP;AAGD,SA9EkD;AA+EnD,SAAC;AAAA;AAAA,wCAAY0C,WAAb,GAA2B,CAAC5C,KAAD,EAAQC,OAAR,KAA2E;AACpG,gBAAME,MAAM,GAAGhB,WAAW,CAACa,KAAK,CAACK,SAAN,CAAgB,CAAhB,CAAD,CAA1B;AACAF,UAAAA,MAAM,CAACkB,QAAP,CAAgBG,SAAhB,GAA4BvB,OAAO,CAAC4C,SAApC;AACA7C,UAAAA,KAAK,CAACK,SAAN,CAAgB,CAAhB,IAAqBF,MAArB;AACA,iBAAO,EACL,GAAGH;AADE,WAAP;AAGD,SAtFkD;AAuFnD,SAAC;AAAA;AAAA,wCAAY8C,6BAAb,GAA6C,CAAC9C,KAAD,EAAQC,OAAR,KAA6F;AACxI;AACA,gBAAMiC,mBAAmB,GAAGlC,KAAK,CAACmC,mBAAlC;AACA;;AACA,gBAAMA,mBAAmB,GAAGlC,OAAO,CAACG,SAApC;AACAQ,UAAAA,OAAO,CAACC,GAAR,CAAa,cAAaqB,mBAAoB,WAAUjC,OAAO,CAACG,SAAU,EAA1E;AACA,iBAAO,EACL,GAAGJ,KADE;AAELkC,YAAAA,mBAFK;AAGLC,YAAAA;AAHK,WAAP;AAKD,SAlGkD;AAmGnD,SAAC;AAAA;AAAA,wCAAYY,oBAAb,GAAoC,CAAC/C,KAAD,EAAQC,OAAR,KAAoF;AACtH,gBAAMC,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACA,gBAAMgD,QAAQ,GAAG/C,OAAO,CAACgD,WAAzB;;AAEA,cAAI/C,MAAM,CAAC8B,WAAP,CAAmBkB,MAAvB,EAA+B;AAC7B;AAAA;AAAA,kDAAeF,QAAf,EAAyB9C,MAAM,CAAC8B,WAAP,CAAmB,CAAnB,CAAzB,EAAgD9B,MAAM,CAAC6B,eAAvD,EAAwE7B,MAAM,CAAC4B,gBAA/E;AACA,kBAAMqB,UAAU,GAAG;AAAA;AAAA,wDAAkBjD,MAAM,CAAC8B,WAAP,CAAmB,CAAnB,CAAlB,EAAyCgB,QAAQ,CAACI,OAAT,KAAqB,CAArB,GAAyBlD,MAAM,CAAC6B,eAAhC,GAAkD7B,MAAM,CAAC4B,gBAAlG,EAAoHkB,QAApH,CAAnB;AACAA,YAAAA,QAAQ,CAACG,UAAT,GAAsBA,UAAtB;AAEAvC,YAAAA,OAAO,CAACC,GAAR,CAAa,UAASmC,QAAQ,CAACK,KAAM,UAASL,QAAQ,CAACM,MAAO,IAAGN,QAAQ,CAACO,QAAS,SAAQP,QAAQ,CAACI,OAAQ,SAAQJ,QAAQ,CAACG,UAAW,EAAxI;AACD,WAND,MAMO;AACL;AACAH,YAAAA,QAAQ,CAACG,UAAT,GAAsBH,QAAQ,CAACM,MAA/B;AACAN,YAAAA,QAAQ,CAACI,OAAT,GAAmB,CAAnB;AACD;;AAEDlD,UAAAA,MAAM,CAAC8B,WAAP,CAAmBwB,IAAnB,CAAwBR,QAAxB;;AACA,cAAIA,QAAQ,CAACI,OAAT,KAAqB,CAAzB,EAA4B;AAC1BlD,YAAAA,MAAM,CAAC6B,eAAP,CAAuByB,IAAvB,CAA4BR,QAA5B;AACD,WAFD,MAEO,IAAIA,QAAQ,CAACI,OAAT,KAAqB,CAAzB,EAA4B;AACjClD,YAAAA,MAAM,CAAC4B,gBAAP,CAAwB0B,IAAxB,CAA6BR,QAA7B;AACD;;AACD9C,UAAAA,MAAM,CAAC0B,WAAP,GAAqBoB,QAArB;AACA,gBAAM7C,MAAM,GAAGD,MAAM,CAACG,SAAP,CAAiB2C,QAAQ,CAAC5C,SAA1B,CAAf;AACAD,UAAAA,MAAM,CAACkB,QAAP,CAAgBG,SAAhB,GAA4BrB,MAAM,CAACkB,QAAP,CAAgBG,SAAhB,CAA0BN,MAA1B,CAAiCC,CAAC,IAAIA,CAAC,CAACkC,KAAF,KAAYL,QAAQ,CAACK,KAA3D,CAA5B;AACA,iBAAO,EACL,GAAGnD;AADE,WAAP;AAGD,SA/HkD;AAgInD,SAAC;AAAA;AAAA,wCAAYuD,oBAAb,GAAoC,CAACzD,KAAD,EAAQC,OAAR,KAAoF;AACtH,iBAAO,EACL,GAAGD,KADE;AAEL0D,YAAAA,YAAY,EAAEzD,OAAO,CAACyD;AAFjB,WAAP;AAID,SArIkD;AAsInD,SAAC;AAAA;AAAA,wCAAYC,sBAAb,GAAsC,CAAC3D,KAAD,EAAQC,OAAR,KAAsF;AAC1H,gBAAMC,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACAE,UAAAA,MAAM,CAACiC,mBAAP,GAA6B,CAAC,CAA9B;AACAjC,UAAAA,MAAM,CAACgC,mBAAP,GAA6B,CAAC,CAA9B;AACAhC,UAAAA,MAAM,CAAC0B,WAAP,GAAqB,IAArB;AACA1B,UAAAA,MAAM,CAAC+B,aAAP,GAAuB,IAAvB;AACA/B,UAAAA,MAAM,CAAC6B,eAAP,GAAyB,EAAzB;AACA7B,UAAAA,MAAM,CAAC4B,gBAAP,GAA0B,EAA1B;AACA5B,UAAAA,MAAM,CAAC8B,WAAP,GAAqB,EAArB;AACA9B,UAAAA,MAAM,CAACwD,YAAP,GAAsB,IAAtB;AACAxD,UAAAA,MAAM,CAAC2B,cAAP,GAAwB,IAAxB;AACA3B,UAAAA,MAAM,CAACG,SAAP,GAAmB,IAAIuD,KAAJ,CAAU;AAAA;AAAA,gCAAOC,UAAjB,EAA6BC,IAA7B,CAAkC,IAAlC,CAAnB;AACA5D,UAAAA,MAAM,CAACa,MAAP,GAAgB;AAAA;AAAA,wCAAWE,OAA3B;AACAf,UAAAA,MAAM,CAAC6D,cAAP,GAAwB,CAAxB;AACA7D,UAAAA,MAAM,CAACkC,WAAP,GAAqB,CAArB;AACA,iBAAO,EACL,GAAGlC;AADE,WAAP;AAGD,SAxJkD;AAyJnD,SAAC;AAAA;AAAA,wCAAY8D,4BAAb,GAA4C,CAAChE,KAAD,EAAQC,OAAR,KAA4F;AACtI,iBAAO,EACL,GAAGD,KADE;AAELiC,YAAAA,aAAa,EAAEhC,OAAO,CAACgC;AAFlB,WAAP;AAID,SA9JkD;AA+JnD,SAAC;AAAA;AAAA,wCAAYgC,gBAAb,GAAgC,CAACjE,KAAD,EAAQC,OAAR,KAAgF;AAC9G,iBAAO,EACL,GAAGD,KADE;AAEL+D,YAAAA,cAAc,EAAEG,IAAI,CAACC,GAAL;AAFX,WAAP;AAID,SApKkD;AAqKnD,SAAC;AAAA;AAAA,wCAAYC,sBAAb,GAAsC,CAACpE,KAAD,EAAQC,OAAR,KAAsF;AAC1H,gBAAMoE,OAAO,GAAGC,IAAI,CAACC,GAAL,CAAStE,OAAO,CAACuE,WAAR,CAAoBH,OAA7B,CAAhB;;AACA,gBAAMnE,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACAE,UAAAA,MAAM,CAACG,SAAP,CAAiBJ,OAAO,CAACuE,WAAR,CAAoBC,aAArC,EAAoDC,UAApD,IAAkEL,OAAlE;AACAnE,UAAAA,MAAM,CAACG,SAAP,CAAiBJ,OAAO,CAACuE,WAAR,CAAoBC,aAArC,EAAoDJ,OAApD,GAA8D,CAACA,OAA/D;AACAnE,UAAAA,MAAM,CAACG,SAAP,CAAiBJ,OAAO,CAACuE,WAAR,CAAoBG,YAArC,EAAmDD,UAAnD,IAAiEL,OAAjE;AACAnE,UAAAA,MAAM,CAACG,SAAP,CAAiBJ,OAAO,CAACuE,WAAR,CAAoBG,YAArC,EAAmDN,OAAnD,GAA6DA,OAA7D;AACA,iBAAO,EACL,GAAGnE;AADE,WAAP;AAGD,SA/KkD;AAgLnD,SAAC;AAAA;AAAA,wCAAY0E,gBAAb,GAAgC,CAAC5E,KAAD,EAAQC,OAAR,KAAgF;AAC9G,gBAAME,MAAM,GAAGH,KAAK,CAACK,SAAN,CAAgBkC,IAAhB,CAAqBpB,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACsB,GAAF,KAAUxC,OAAO,CAAC4E,QAAjD,CAAf;;AACA,cAAI,CAAC1E,MAAL,EAAa;AACX,mBAAO,EAAE,GAAGH;AAAL,aAAP;AACD;;AACD,gBAAME,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACAE,UAAAA,MAAM,CAACG,SAAP,CAAiBF,MAAM,CAACC,SAAxB,IAAqC,IAArC;AACA,iBAAO,EACL,GAAGF;AADE,WAAP;AAGD,SA1LkD;AA2LnD,SAAC;AAAA;AAAA,wCAAY4E,mBAAb,GAAmC,CAAC9E,KAAD,EAAQC,OAAR,KAAmF;AACpH,gBAAME,MAAM,GAAGH,KAAK,CAACK,SAAN,CAAgBkC,IAAhB,CAAqBpB,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACsB,GAAF,KAAUxC,OAAO,CAAC4E,QAAjD,CAAf;;AACA,cAAI,CAAC1E,MAAL,EAAa;AACX,mBAAO,EAAE,GAAGH;AAAL,aAAP;AACD;;AACD,gBAAM+E,SAAS,GAAG5F,WAAW,CAACa,KAAK,CAACK,SAAN,CAAgBF,MAAM,CAACC,SAAvB,CAAD,CAA7B;AACA2E,UAAAA,SAAS,CAAC1D,QAAV,CAAmBI,eAAnB,GAAqCxB,OAAO,CAAC+E,WAA7C;AACAhF,UAAAA,KAAK,CAACK,SAAN,CAAgB0E,SAAS,CAAC3E,SAA1B,IAAuC2E,SAAvC;AACA,iBAAO,EACL,GAAG/E;AADE,WAAP;AAGD,SAtMkD;AAuMnD,SAAC;AAAA;AAAA,wCAAYiF,cAAb,GAA8B,CAACjF,KAAD,EAAQC,OAAR,KAA8E;AAC1G,gBAAMC,MAAM,GAAGf,WAAW,CAACa,KAAD,CAA1B;;AACAE,UAAAA,MAAM,CAACG,SAAP,CAAiBe,OAAjB,CAAyBD,CAAC,IAAI;AAC5B,gBAAIA,CAAJ,EAAO;AACL,oBAAM+D,aAAa,GAAGjF,OAAO,CAACkF,QAAR,CAAiB5C,IAAjB,CAAsB6C,OAAO,IAAIjE,CAAC,CAACsB,GAAF,KAAU2C,OAAO,CAACC,QAAnD,CAAtB;;AACA,kBAAIH,aAAJ,EAAmB;AACjB/D,gBAAAA,CAAC,CAACuD,UAAF,GAAeQ,aAAa,CAACE,OAA7B;;AACA,oBAAIjE,CAAC,CAACf,SAAF,KAAgB,CAApB,EAAuB;AACrBF,kBAAAA,MAAM,CAACoF,IAAP,GAAcnE,CAAC,CAACuD,UAAhB;AACD;AACF;AACF;AACF,WAVD;;AAWAxE,UAAAA,MAAM,CAACkC,WAAP,GAAqBnC,OAAO,CAACkF,QAAR,CAAiB,CAAjB,EAAoBI,IAAzC;AACA,iBAAO,EACL,GAAGrF;AADE,WAAP;AAGD,SAxNkD;AAyNnD,SAAC;AAAA;AAAA,wCAAYsF,kBAAb,GAAkC,CAACxF,KAAD,EAAQC,OAAR,KAAkF;AAClH,iBAAO,EACL,GAAGD,KADE;AAELsF,YAAAA,IAAI,EAAErF,OAAO,CAACqF;AAFT,WAAP;AAID;AA9NkD,OAAtC;AAAA;AAAA,iC","sourcesContent":["import { instantiate } from \"cc\";\r\nimport { ActionTypes, ActionPayLoad, InitStateType, initState } from \"../action/game\"\r\nimport { default as reduxAct } from 'redux-act'\r\nimport { DeskStatus, PlayerSatus, SeatPosition, calCardAzimuth, getCardAlignValue, getComposeCardValue } from \"../../type\";\r\nimport config from \"../../config\";\r\n\r\nexport default reduxAct.createReducer<InitStateType>({\r\n  [ActionTypes.DOMINO_INIT_SELF_SEAT]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_INIT_SELF_SEAT>): InitStateType => {\r\n    const _state = instantiate(state)\r\n    payload.player.seatIndex = 0;\r\n    _state.playerMap[0] = payload.player\r\n    return {\r\n      ..._state\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_JOIN_SEAT]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_JOIN_SEAT>): InitStateType => {\r\n    const _state = instantiate(state)\r\n    switch (payload.seatPostion) {\r\n      case SeatPosition.LEFT:\r\n        _state.playerMap[1] = payload.player;\r\n        payload.player.seatIndex = 1; break;\r\n      case SeatPosition.TOP:\r\n        _state.playerMap[2] = payload.player;\r\n        payload.player.seatIndex = 2;\r\n        break;\r\n      case SeatPosition.RIGHT:\r\n        _state.playerMap[3] = payload.player;\r\n        payload.player.seatIndex = 3;\r\n        break;\r\n      case SeatPosition.DOWN:\r\n        _state.playerMap[0] = payload.player;\r\n        payload.player.seatIndex = 0;\r\n        break;\r\n    }\r\n    console.log(\"DOMINO_JOIN_SEAT\", _state);\r\n    return {\r\n      ..._state\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_CHANGE_DESK_STATUS]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_CHANGE_DESK_STATUS>): InitStateType => {\r\n    const _state = instantiate(state)\r\n    _state.statue = payload.status;\r\n    if (payload.status === DeskStatus.WAITING) {\r\n      _state.playerMap.filter(v => v).forEach(v => {\r\n        v.gameData.isMaster = false;\r\n        v.gameData.remainCardCount = 0;\r\n        v.gameData.cardIList = [];\r\n        v.gameData.noWayCardNumber = [];\r\n      })\r\n    } else if (payload.status === DeskStatus.CLSOE) {\r\n      _state.playerMap.filter(v => v).forEach(v => {\r\n        v.gameData.state = PlayerSatus.WAITING;\r\n        v.gameData.noWayCardNumber = [];\r\n      })\r\n    }\r\n\r\n    switch (payload.status) {\r\n      case DeskStatus.WAITING:\r\n      case DeskStatus.COUNTDOWNING:\r\n      case DeskStatus.CLSOE:\r\n        _state.newCardItem = null;\r\n        _state.readyCountdown = null;\r\n        _state.rightOutCardItem = [];\r\n        _state.leftOutCardItem = [];\r\n        _state.outCardItem = [];\r\n        _state.intendOutCard = null;\r\n        _state.lastActiveSeatIndex = -1;\r\n        _state.currActiveSeatIndex = -1;\r\n        _state.balanceOdds = 0;\r\n        break;\r\n    }\r\n    _state.readyCountdown = payload.countdown;\r\n\r\n    return {\r\n      ..._state,\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_UPDATE_PLAYER_GAME_DATA]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_UPDATE_PLAYER_GAME_DATA>): InitStateType => {\r\n    const _state = instantiate(state)\r\n    const player = _state.playerMap.find(i => i && i.uid === payload.palyerId)\r\n    player && (player.gameData = payload.playGame)\r\n    return {\r\n      ..._state\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_DEAL]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_DEAL>): InitStateType => {\r\n    const player = instantiate(state.playerMap[0])\r\n    player.gameData.cardIList = payload.cardItems;\r\n    state.playerMap[0] = player;\r\n    return {\r\n      ...state\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_CHANGE_OUT_CARD_PLAYER]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_CHANGE_OUT_CARD_PLAYER>): InitStateType => {\r\n    /**上一个激活的用户 */\r\n    const lastActiveSeatIndex = state.currActiveSeatIndex;\r\n    /**当前正激活等待的用户 */\r\n    const currActiveSeatIndex = payload.seatIndex;\r\n    console.log(`切换用户，上一个用户 ${lastActiveSeatIndex}, 下一个用户 ${payload.seatIndex}`);\r\n    return {\r\n      ...state,\r\n      lastActiveSeatIndex,\r\n      currActiveSeatIndex\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_SHOW_OUT_CARD]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_SHOW_OUT_CARD>): InitStateType => {\r\n    const _state = instantiate(state)\r\n    const cardItem = payload.showOutCard;\r\n\r\n    if (_state.outCardItem.length) {\r\n      calCardAzimuth(cardItem, _state.outCardItem[0], _state.leftOutCardItem, _state.rightOutCardItem);\r\n      const alignValue = getCardAlignValue(_state.outCardItem[0], cardItem.azimuth === 0 ? _state.leftOutCardItem : _state.rightOutCardItem, cardItem);\r\n      cardItem.alignValue = alignValue;\r\n\r\n      console.log(`最新出牌值: ${cardItem.value}, 上下值: ${cardItem.upFace}-${cardItem.downFace}, 方位： ${cardItem.azimuth}, 对齐值：${cardItem.alignValue}`);\r\n    } else {\r\n      // 第一张牌（也就是中间一张牌），对齐值不管是上下相等还是不等，都用上面的值，因为中间值横向摆放始终是小的向左\r\n      cardItem.alignValue = cardItem.upFace;\r\n      cardItem.azimuth = 2;\r\n    }\r\n\r\n    _state.outCardItem.push(cardItem);\r\n    if (cardItem.azimuth === 0) {\r\n      _state.leftOutCardItem.push(cardItem);\r\n    } else if (cardItem.azimuth === 1) {\r\n      _state.rightOutCardItem.push(cardItem);\r\n    }\r\n    _state.newCardItem = cardItem;\r\n    const player = _state.playerMap[cardItem.seatIndex];\r\n    player.gameData.cardIList = player.gameData.cardIList.filter(v => v.value !== cardItem.value);\r\n    return {\r\n      ..._state,\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_OUT_COUTNDOWN]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_OUT_COUTNDOWN>): InitStateType => {\r\n    return {\r\n      ...state,\r\n      outCountdown: payload.outCountdown\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_CLEAR_ROOM_DATA]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_CLEAR_ROOM_DATA>): InitStateType => {\r\n    const _state = instantiate(state)\r\n    _state.currActiveSeatIndex = -1;\r\n    _state.lastActiveSeatIndex = -1;\r\n    _state.newCardItem = null;\r\n    _state.intendOutCard = null;\r\n    _state.leftOutCardItem = [];\r\n    _state.rightOutCardItem = [];\r\n    _state.outCardItem = [];\r\n    _state.outCountdown = null;\r\n    _state.readyCountdown = null;\r\n    _state.playerMap = new Array(config.seatNumber).fill(null);\r\n    _state.statue = DeskStatus.WAITING;\r\n    _state.quitRoomAction = 0;\r\n    _state.balanceOdds = 0;\r\n    return {\r\n      ..._state,\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_SET_DESK_CARD_OUTLINE]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_SET_DESK_CARD_OUTLINE>): InitStateType => {\r\n    return {\r\n      ...state,\r\n      intendOutCard: payload.intendOutCard\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_QUIT_ROOM]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_QUIT_ROOM>): InitStateType => {\r\n    return {\r\n      ...state,\r\n      quitRoomAction: Date.now()\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_GAME_IN_WINLOSS]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_GAME_IN_WINLOSS>): InitStateType => {\r\n    const winloss = Math.abs(payload.winlossType.winloss)\r\n    const _state = instantiate(state);\r\n    _state.playerMap[payload.winlossType.lossSeatIndex].glodAmount -= winloss;\r\n    _state.playerMap[payload.winlossType.lossSeatIndex].winloss = -winloss;\r\n    _state.playerMap[payload.winlossType.winSeatIndex].glodAmount += winloss;\r\n    _state.playerMap[payload.winlossType.winSeatIndex].winloss = winloss;\r\n    return {\r\n      ..._state,\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_QUIT_SEAT]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_QUIT_SEAT>): InitStateType => {\r\n    const player = state.playerMap.find(v => v && v.uid === payload.playerId);\r\n    if (!player) {\r\n      return { ...state };\r\n    }\r\n    const _state = instantiate(state);\r\n    _state.playerMap[player.seatIndex] = null;\r\n    return {\r\n      ..._state,\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_UPDATE_LEWAT]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_UPDATE_LEWAT>): InitStateType => {\r\n    const player = state.playerMap.find(v => v && v.uid === payload.playerId);\r\n    if (!player) {\r\n      return { ...state };\r\n    }\r\n    const playerNew = instantiate(state.playerMap[player.seatIndex]);\r\n    playerNew.gameData.noWayCardNumber = payload.lewatPokers;\r\n    state.playerMap[playerNew.seatIndex] = playerNew;\r\n    return {\r\n      ...state,\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_BALANCE]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_BALANCE>): InitStateType => {\r\n    const _state = instantiate(state);\r\n    _state.playerMap.forEach(v => {\r\n      if (v) {\r\n        const balancePlayer = payload.balances.find(balance => v.uid === balance.memberId);\r\n        if (balancePlayer) {\r\n          v.glodAmount = balancePlayer.balance\r\n          if (v.seatIndex === 0) {\r\n            _state.gold = v.glodAmount;\r\n          }\r\n        }\r\n      }\r\n    })\r\n    _state.balanceOdds = payload.balances[0].odds;\r\n    return {\r\n      ..._state,\r\n    }\r\n  },\r\n  [ActionTypes.DOMINO_UPDATE_GOLD]: (state, payload: ActionPayLoad<ActionTypes.DOMINO_UPDATE_GOLD>): InitStateType => {\r\n    return {\r\n      ...state,\r\n      gold: payload.gold\r\n    }\r\n  }\r\n}, initState);"]}
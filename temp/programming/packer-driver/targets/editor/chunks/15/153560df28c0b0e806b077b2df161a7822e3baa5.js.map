{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/fruit777/viewModel/RollerPanelViewModel.ts"],"names":["ViewModel","StoreInject","getStore","AutoLauncherType","GameType","IconEffectType","config","setStopRollAction","initRollAction","setIconEffect","setRollRoundEnd","setRollSpeed","SKT_MAG_TYPE","sktMsgListener","dataTransfer","refreshData","DataKeyType","TaskScheduler","Task","PrefabPathDefine","footerViewModel","fruit777_Audio","gameBoardViewModel","sourceManageSeletor","EffectType","changeProfit","setSubGameTimes","setWaiting","updateBalance","updateSubGameTimes","BaseViewModel","SoundPathDefine","addToastAction","sendNativeVibrate","global","lang","RollerPanelViewModel","constructor","lastGameType","gameType","viewGameType","rollerMap","taskScheduler","autoLaunchType","winnerDialog","stopRollerIndex","id","parseInt","Math","random","begin","isInitFaild","dispatch","MAIN","forEach","queue","queueIndex","isLargeRollGame","SUBGAME2","gameOption","largeRollOption","normalRollOption","push","index","iconQueue","map","iconId","uiData","find","i","iconEffect","NONE","height","singleRollerHeight","width","singleRollerWidth","intervalHeight","singleIntervalHeight","LargeIcon","LargeRoller","rolling","speed","rollerSpeed","speedBackUp","rollerWidth","intervalWidth","rollerIntervalWidth","stopIconIndex","direction","closeSubGame","confirmContent","write","k","HallModule","LoadFaild","SUBGAME_TIMES","setEvent","panelRollEnd","rollerIndex","allRollStop","PROFIT_AMOUNT","FREE_GAME_AMOUNT","BALANCE","flicherArr","ICON_EFFECT_DATA","allFlicherTask","done","length","playOneShot","GET_COIN","arrItemArr","arrItem","NORMAIL","comp","scheduleOnce","ROLLER_END","subscribeDone","joinqQueue","GAME_TYPE","props","isSortStop","task","showAwardTask","checkAward","changeGameTypeTask","isExecute","FRUIT_SHELL","winning","mountView","getFile","BIG_PRIZE","source","appendTo","parentNode","effectType","EFFECT1","isModal","setProps","glodAmount","killSelfHandler","unMount","LAMIT_FAST","_taskScheduler","add","LAUNCHER_BET","data","error","WebSocketModule","ConfigGameFaild","stopQueue","stopIndex","ROLLER_STOP_INDEX_ID","rollerItem","stopMode","window","setTimeout","e","content","autoLauncherPanel","setLaunchEvent","manualBetHandler","profitMultiple","PROFIT_MULTIPLE","item","minRate","maxRate","OPEN_PRIZE","unMountCallBack","destoryQueue","rollerViewModelMap","mv","removeById","stopForLast","connect","inject","state","game","currGameType","autoLauncherType","roller","iconEffectData","jackpotAmount"],"mappings":"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","sourcesContent":["import { Node } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { Fruit777_RollerPanel, IProps, IEvent } from \"../components/Fruit777_RollerPanel\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { getStore } from \"../store\"\r\nimport { AutoLauncherType, DialogType, DirectionType, GameType, IconEffectType, RollerType } from \"../type\"\r\nimport config from \"../config\"\r\nimport { beginRollAction, setStopRollAction, initRollAction, endRollingAction, setIconEffect, setRollRoundEnd, setRollSpeed } from \"../store/actions/roller\"\r\nimport { SKT_MAG_TYPE, sktInstance, sktMsgListener } from \"../socketConnect\"\r\nimport dataTransfer, { refreshData, DataKeyType } from \"../dataTransfer\"\r\nimport TaskScheduler, { Task, TaskSchedulerDefault } from \"../../../utils/TaskScheduler\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { footerViewModel, fruit777_Audio, gameBoardViewModel, sourceManageSeletor } from \"../index\"\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\"\r\nimport { changeProfit, setSubGameTimes, setWaiting, updateBalance, updateJackpotAmount, updateSubGameTimes } from \"../store/actions/game\"\r\nimport BaseViewModel from \"../../../common/viewModel/BaseViewModel\"\r\nimport { Fruit777_BigPrize, IState as BPIState, IProps as BPIProps, IEvent as BPIEvent } from \"../components/Fruit777_BigPrize\"\r\nimport { SoundPathDefine } from \"../sourceDefine/soundDefine\"\r\nimport { addToastAction } from \"../../../hall/store/actions/baseBoard\"\r\nimport { sendNativeVibrate } from \"../../../common/bridge\"\r\nimport { global, lang } from \"../../../hall/index\"\r\n\r\n@StoreInject(getStore())\r\nclass RollerPanelViewModel extends ViewModel<Fruit777_RollerPanel, IProps, IEvent> {\r\n  constructor() {\r\n    super('Fruit777_RollerPanel')\r\n    this.id = parseInt((Math.random() * 100000000) + '')\r\n  }\r\n  private lastGameType: GameType\r\n  private gameType: GameType\r\n  private viewGameType: GameType\r\n  public rollerMap: RollerType[] = []\r\n  public taskScheduler: TaskScheduler = new TaskScheduler()\r\n  private autoLaunchType: AutoLauncherType\r\n  private winnerDialog: BaseViewModel<Fruit777_BigPrize, BPIState, BPIProps, BPIEvent>\r\n\r\n  private stopRollerIndex: number = -1\r\n  private id: number\r\n  protected begin() {\r\n    // const rollerMap: RollerType[] = []\r\n    let isInitFaild = false\r\n    this.dispatch(setRollRoundEnd(true))\r\n    config[this.gameType === GameType.MAIN ? 'iconRollerQueue' : 'largeIconRollerQueue'].forEach((queue, queueIndex) => {\r\n      const isLargeRollGame: boolean = (this.gameType === GameType.SUBGAME2 && queueIndex === 1)\r\n      const gameOption = isLargeRollGame ? config.largeRollOption : config.normalRollOption\r\n      this.rollerMap.push({\r\n        index: queueIndex,\r\n        iconQueue: queue.map((iconId, index) => {\r\n          const uiData = config[isLargeRollGame ? 'largeIcon' : 'rollerIcon'].find(i => i.id === iconId)\r\n          !uiData && (isInitFaild = true)\r\n          return {\r\n            iconId,\r\n            queueIndex: index + 1,\r\n            iconEffect: IconEffectType.NONE,\r\n            height: gameOption.singleRollerHeight,\r\n            width: gameOption.singleRollerWidth,\r\n            intervalHeight: gameOption.singleIntervalHeight,\r\n            LargeIcon: (this.gameType === GameType.SUBGAME2 && queueIndex == 1),\r\n            uiData\r\n          }\r\n        }),\r\n        LargeRoller: isLargeRollGame,\r\n        rolling: false,\r\n        speed: gameOption.rollerSpeed,\r\n        speedBackUp: gameOption.rollerSpeed,\r\n        width: gameOption.rollerWidth,\r\n        intervalWidth: gameOption.rollerIntervalWidth,\r\n        stopIconIndex: -1,\r\n        direction: gameOption.direction\r\n      })\r\n    })\r\n    if (isInitFaild) {\r\n      global.closeSubGame({\r\n        confirmContent: (lang.write(k => k.HallModule.LoadFaild))\r\n      })\r\n      return\r\n    }\r\n    if (this.viewGameType === GameType.SUBGAME2) {\r\n      //马上执行的游戏类型是小游戏2\r\n      this.dispatch(setSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n      this.dispatch(updateSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n    }\r\n    this.setEvent({\r\n      panelRollEnd: (rollerIndex) => {\r\n        // console.log('rollerIndex', rollerIndex)\r\n        this.stopRollerIndex = rollerIndex\r\n      },\r\n      allRollStop: () => {\r\n        // console.log(\"allRollStop\")\r\n        \r\n        this.dispatch(setRollRoundEnd(true))\r\n        if (this.viewGameType === GameType.MAIN) {\r\n          this.dispatch(changeProfit(dataTransfer(DataKeyType.PROFIT_AMOUNT)))\r\n        } else {\r\n          this.dispatch(changeProfit(dataTransfer(DataKeyType.FREE_GAME_AMOUNT)))\r\n        }\r\n        // console.log(this.lastGameType, this.gameType)\r\n        this.dispatch(updateBalance(dataTransfer(DataKeyType.BALANCE)))\r\n        this.dispatch(updateSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n        const flicherArr: number[][][] = dataTransfer(DataKeyType.ICON_EFFECT_DATA)\r\n        // flicherArr.length && fruit777_Audio.playOneShot(SoundPathDefine.FRUIT_SHELL)\r\n        const allFlicherTask = new Task((done) => {\r\n          if (flicherArr.length >= 1) {\r\n            fruit777_Audio.playOneShot(SoundPathDefine.GET_COIN)\r\n            let arrItemArr = []\r\n            flicherArr.forEach((arrItem, index) => arrItemArr.push(...arrItem))\r\n            // console.log('arrItemArr', arrItemArr)\r\n            this.dispatch(setIconEffect(IconEffectType.NORMAIL, arrItemArr))\r\n            // this.dispatch(setIconEffect(IconEffectType.NORMAIL, [[0, 2], [1, 0], [2, 0]]))\r\n            if (!arrItemArr.length) {\r\n              done()\r\n            } else {\r\n              //闪烁2秒钟就结束\r\n              this.comp.scheduleOnce(() => done(), 2)\r\n            }\r\n          } else {\r\n            fruit777_Audio.playOneShot(SoundPathDefine.ROLLER_END)\r\n            done()\r\n          }\r\n        }).subscribeDone(`total`, () => {\r\n          this.dispatch(setIconEffect(IconEffectType.NONE, []))\r\n        })\r\n        this.taskScheduler.joinqQueue(allFlicherTask)\r\n\r\n        //游戏不跳转，才显示每一条线，并且没有自动,11/6日：如果处于加速模式，也不显示每一个闪动了\r\n        if (dataTransfer(DataKeyType.GAME_TYPE) === this.viewGameType && this.autoLaunchType === AutoLauncherType.NONE && this.comp.props.isSortStop) {\r\n          //将闪动加入任务调度器队列\r\n          flicherArr.forEach((arrItem, index) => {\r\n            const task = new Task((done) => {\r\n              this.dispatch(setIconEffect(IconEffectType.NORMAIL, arrItem))\r\n              //闪烁2秒钟就结束\r\n              this.comp.scheduleOnce(() => done(), 1.5)\r\n            }).subscribeDone(`${index}`, () => {\r\n              this.dispatch(setIconEffect(IconEffectType.NONE, []))\r\n            })\r\n            this.taskScheduler.joinqQueue(task, false)\r\n          })\r\n        }\r\n        const showAwardTask = new Task((done) => {\r\n          //图标效果执行完之后要执行的任务，检查是否有爆奖\r\n          this.checkAward(done)\r\n        })\r\n        this.taskScheduler.joinqQueue(showAwardTask, false)\r\n\r\n        if (gameBoardViewModel.changeGameTypeTask && !gameBoardViewModel.changeGameTypeTask.isExecute) {\r\n          //切换游戏\r\n          if (this.viewGameType === GameType.SUBGAME2 && dataTransfer(DataKeyType.FREE_GAME_AMOUNT) !== 0) {\r\n            // 大滑槽小游戏结束之后要开西瓜\r\n            this.taskScheduler.joinqQueue(new Task((done) => {\r\n              //大滑槽小游戏，要开西瓜\r\n              // fruit777_Audio.playOneShot(SoundPathDefine.OPEN_WIN_END)\r\n              fruit777_Audio.playOneShot(SoundPathDefine.FRUIT_SHELL)\r\n              const winning = config.winning[config.winning.length - 1]\r\n              this.winnerDialog = new BaseViewModel<Fruit777_BigPrize, BPIState, BPIProps, BPIEvent>('Fruit777_BigPrize').mountView(sourceManageSeletor()\r\n                .getFile(PrefabPathDefine.BIG_PRIZE).source).appendTo(this.parentNode, { effectType: EffectType.EFFECT1, isModal: true })\r\n                .setProps({ winning, glodAmount: dataTransfer(DataKeyType.FREE_GAME_AMOUNT) })\r\n                .setEvent({\r\n                  killSelfHandler: () => {\r\n                    this.winnerDialog.unMount(EffectType.EFFECT1)\r\n                    done()\r\n                  }\r\n                })\r\n            }))\r\n          }\r\n          // else if (this.gameType === GameType.SUBGAME2) {\r\n          //   //马上执行的游戏类型是小游戏2\r\n          //   this.taskScheduler.joinqQueue(new Task((done) => {\r\n          //     this.dispatch(setSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n          //     done()\r\n          //   }))\r\n          // }\r\n          //禁用掉主下注按钮\r\n          this.dispatch(setRollRoundEnd(false))\r\n          this.taskScheduler.joinqQueue(gameBoardViewModel.changeGameTypeTask)\r\n        } else {\r\n          //不切换游戏\r\n          this.taskScheduler.joinqQueue(new Task((done) => {\r\n            this.dispatch(setWaiting(true))\r\n            done()\r\n          }))\r\n        }\r\n      }\r\n    })\r\n    // this.setProps({ rollerMap })\r\n    this.dispatch(initRollAction(this.rollerMap))\r\n    if (this.autoLaunchType === AutoLauncherType.LAMIT_FAST) {\r\n      this.dispatch(setRollSpeed(1.5))\r\n    }\r\n    const _taskScheduler = new TaskScheduler()\r\n    sktMsgListener.add(SKT_MAG_TYPE.LAUNCHER_BET, \"roller\", (data, error) => {\r\n      if (error) {\r\n        // this.dispatch(addToastAction({ content: error }))\r\n        // this.rollerMap.forEach((rollerItem, index) => {\r\n        //   this.dispatch(setStopRollAction(index, 1))\r\n        // })\r\n        global.closeSubGame({ confirmContent: lang.write(k => k.WebSocketModule.ConfigGameFaild) + ':' + error })\r\n      } else {\r\n        try {\r\n          refreshData(data)\r\n          this.taskScheduler.stopQueue(false)\r\n          this.dispatch(setIconEffect(IconEffectType.NONE, []))\r\n          const stopIndex: number[] = dataTransfer(DataKeyType.ROLLER_STOP_INDEX_ID)\r\n          this.stopRollerIndex = -1\r\n          this.rollerMap.forEach((rollerItem, index) => {\r\n            //顺序停止，stopMode=index的时候不使用这种方案，因为一轮可能就会花不少时间，所以最好不用这种\r\n            if (this.comp.props.stopMode === 'jump' && this.comp.props.isSortStop) {\r\n              _taskScheduler.joinqQueue(new Task((done) => {\r\n                this.dispatch(setStopRollAction(index, stopIndex ? stopIndex[index] : 0))\r\n                if (index < 5) {\r\n                  // const t = window.setInterval(() => {\r\n                  //   if (this.stopRollerIndex === index) {\r\n                  //     window.clearInterval(t)\r\n                  //     done()\r\n                  //   }\r\n                  // }, 1000)\r\n                  window.setTimeout(() => {\r\n                    done()\r\n                  }, 200)\r\n                } else {\r\n                  done()\r\n                }\r\n              }))\r\n            } else {\r\n              this.dispatch(setStopRollAction(index, stopIndex ? stopIndex[index] : 0))\r\n            }\r\n          })\r\n        } catch (e) {\r\n          this.dispatch(addToastAction({ content: e }))\r\n          this.rollerMap.forEach((rollerItem, index) => {\r\n            this.dispatch(setStopRollAction(index, 1))\r\n          })\r\n        }\r\n      }\r\n    }, 0)\r\n    this.dispatch(changeProfit(dataTransfer(this.viewGameType === GameType.MAIN ? DataKeyType.PROFIT_AMOUNT : DataKeyType.FREE_GAME_AMOUNT)))\r\n    this.comp.scheduleOnce(() => {\r\n      this.dispatch(setWaiting(true))\r\n    }, 1.5)\r\n    footerViewModel.autoLauncherPanel.setLaunchEvent(() => {\r\n      footerViewModel.manualBetHandler()\r\n    })\r\n  }\r\n  /**检查是否要爆奖，爆什么奖 */\r\n  private checkAward(done: Function) {\r\n    const profitMultiple = dataTransfer(DataKeyType.PROFIT_MULTIPLE)\r\n    const winning = config.winning.find(item => item.minRate <= profitMultiple && profitMultiple < item.maxRate)\r\n    if (winning) {\r\n      sendNativeVibrate(200)\r\n      const winnerDialog = new BaseViewModel<Fruit777_BigPrize, BPIState, BPIProps, BPIEvent>('Fruit777_BigPrize').mountView(sourceManageSeletor()\r\n        .getFile(PrefabPathDefine.BIG_PRIZE).source).appendTo(this.parentNode, { effectType: EffectType.EFFECT1, isModal: true })\r\n        .setProps({ winning, glodAmount: dataTransfer(this.viewGameType === GameType.MAIN ? DataKeyType.PROFIT_AMOUNT : DataKeyType.FREE_GAME_AMOUNT) })\r\n        .setEvent({\r\n          killSelfHandler: () => {\r\n            winnerDialog.unMount(EffectType.EFFECT1)\r\n            done()\r\n          }\r\n        })\r\n      fruit777_Audio.playOneShot(SoundPathDefine.OPEN_PRIZE)\r\n    } else {\r\n      done()\r\n    }\r\n  }\r\n\r\n  protected unMountCallBack(): void {\r\n    this.taskScheduler.destoryQueue()\r\n    this.comp.rollerViewModelMap && this.comp.rollerViewModelMap.forEach(mv => mv.unMount())\r\n    // this.comp.rollerViewModelMap = []\r\n    this.dispatch(initRollAction([]))\r\n    sktMsgListener.removeById(\"roller\")\r\n    // this.winnerDialog && this.winnerDialog.unMount()\r\n  }\r\n  /**按照上次的位置停止 */\r\n  public stopForLast() {\r\n    const stopIndex: number[] = dataTransfer(DataKeyType.ROLLER_STOP_INDEX_ID)\r\n    this.rollerMap.forEach((rollerItem, index) => {\r\n      this.dispatch(setStopRollAction(index, stopIndex ? stopIndex[index] : 0))\r\n    })\r\n  }\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      this.lastGameType = state.game.lastGameType\r\n      this.gameType = state.game.currGameType\r\n      this.viewGameType = state.game.viewGameType\r\n      this.autoLaunchType = state.game.autoLauncherType\r\n      return {\r\n        rollerMap: state.roller.rollerMap,\r\n        iconEffectData: state.roller.iconEffectData,\r\n        jackpotAmount: state.game.jackpotAmount,\r\n        stopMode: state.game.stopMode,\r\n        isSortStop: state.game.isSortStop\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default RollerPanelViewModel"]}
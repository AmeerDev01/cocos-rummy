{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/fruit777/components/Fruit777_BoxPanel.ts"],"names":["_decorator","Label","Node","BaseComponent","PrefabPathDefine","gameBoardViewModel","sourceManageSeletor","TaskScheduler","BaseViewModel","ccclass","property","Fruit777_BoxPanel","awardBoxMap","propertyNode","props_Layout_box_wrap","props_Layout_times","props_Label_sgTimes","props","openDoBoxData","remainGameTimes","BONUS","events","onOpenHandler","boxId","onFreeGameAmoundChange","amount","allDoneHandler","updateTimesHandler","times","jactpotType","flyTimer","taskScheduler","targetViewModel","start","initState","bindEvent","useProps","key","value","cur","find","item","comp","setProps","string","bindUI","fly","changeGameTypeTask","isExecute","joinqQueue","i","awardBox","mountView","getFile","AWARD_BOX","source","appendTo","setEvent","checkFlyEndHandler","unschedule","scheduleOnce","push","destroyCallBack","stopQueue","getTimesNode","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, instantiate, Label, Node, sys, tween, UIOpacity, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nconst { ccclass, property } = _decorator;\r\nimport { Fruit777_AwardBox, IState as AIIState, IProps as AIIProps, IEvent as AIEvent } from \"../components/Fruit777_AwardBox\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { footerViewModel, gameBoardViewModel, sourceManageSeletor } from \"../index\"\r\nimport { IProps as Award_IProps } from './Fruit777_AwardBox';\r\nimport TaskScheduler, { TaskSchedulerDefault } from '../../../utils/TaskScheduler';\r\nimport { JactpotType } from '../type';\r\nimport BaseViewModel from '../../../common/viewModel/BaseViewModel';\r\n\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\t/**马上要打开的宝箱和数据 */\r\n\topenDoBoxData?: Award_IProps,\r\n\t/**剩余小游戏次数 */\r\n\tremainGameTimes?: number,\r\n\t/**奖励金额 */\r\n\tBONUS?: number\r\n}\r\nexport interface IEvent {\r\n\tonOpenHandler: (boxId: number) => void\r\n\tonFreeGameAmoundChange: (amount: number) => void\r\n\tallDoneHandler: () => void,\r\n\tupdateTimesHandler: (times: number, jactpotType?: JactpotType) => void\r\n}\r\n\r\n@ccclass('Fruit777_BoxPanel')\r\nexport class Fruit777_BoxPanel extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() { }\r\n\tpublic awardBoxMap: BaseViewModel<Fruit777_AwardBox, AIIState, AIIProps, AIEvent>[] = []\r\n\tprotected propertyNode = {\r\n\t\t/**宝箱外包裹 */\r\n\t\tprops_Layout_box_wrap: new Node(),\r\n\t\t/**剩余次数外节点 */\r\n\t\tprops_Layout_times: new Node(),\r\n\t\t/**剩余次数 */\r\n\t\tprops_Label_sgTimes: new Label()\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\t\topenDoBoxData: null,\r\n\t\tremainGameTimes: 0,\r\n\t\tBONUS: 0\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\tonOpenHandler: (boxId: number) => { },\r\n\t\tonFreeGameAmoundChange: (amount: number) => { },\r\n\t\tallDoneHandler: () => { },\r\n\t\tupdateTimesHandler: (times: number, jactpotType?: JactpotType) => { }\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\r\n\t}\r\n\tprivate flyTimer: number = -1\r\n\tprivate taskScheduler: TaskScheduler = new TaskScheduler()\r\n\tprivate targetViewModel: BaseViewModel<Fruit777_AwardBox, AIIState, AIIProps, AIEvent>\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\t\tif (key === \"openDoBoxData\" && value.cur) {\r\n\t\t\tthis.targetViewModel = this.awardBoxMap.find(item => item.comp.props.boxId === this.props.openDoBoxData.boxId)\r\n\t\t\tthis.targetViewModel && this.targetViewModel.setProps(this.props.openDoBoxData)\r\n\t\t}\r\n\t\tif (key === \"remainGameTimes\") {\r\n\t\t\tthis.propertyNode.props_Label_sgTimes.string = this.props.remainGameTimes + ''\r\n\t\t}\r\n\t\tif (key === \"BONUS\") {\r\n\t\t\tthis.targetViewModel.setProps({ BONUS: value.cur })\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\t\tconst fly = () => {\r\n\t\t\tif (gameBoardViewModel.changeGameTypeTask && !gameBoardViewModel.changeGameTypeTask.isExecute) {\r\n\t\t\t\tthis.taskScheduler && this.taskScheduler.joinqQueue(gameBoardViewModel.changeGameTypeTask)\r\n\t\t\t\tthis.events && this.events.allDoneHandler()\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (let i = 0; i < 20; i++) {\r\n\t\t\tconst awardBox = new BaseViewModel<Fruit777_AwardBox, AIIState, AIIProps, AIEvent>(\"Fruit777_AwardBox\").mountView(sourceManageSeletor().getFile(PrefabPathDefine.AWARD_BOX).source)\r\n\t\t\t\t.appendTo(this.propertyNode.props_Layout_box_wrap).setProps({ boxId: i }).setEvent({\r\n\t\t\t\t\tonOpenHandler: (boxId) => {\r\n\t\t\t\t\t\tthis.events.onOpenHandler(boxId)\r\n\t\t\t\t\t},\r\n\t\t\t\t\tupdateTimesHandler: (times, jactpotType) => {\r\n\t\t\t\t\t\tthis.events.updateTimesHandler(times, jactpotType)\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcheckFlyEndHandler: () => {\r\n\t\t\t\t\t\t// console.log(gameBoardViewModel.changeGameTypeTask.isExecute)\r\n\t\t\t\t\t\tthis.unschedule(fly)\r\n\t\t\t\t\t\tthis.scheduleOnce(fly, 3.5)\r\n\t\t\t\t\t\t// this.flyTimer && window.clearTimeout(this.flyTimer)\r\n\t\t\t\t\t\t// this.flyTimer = window.setTimeout(() => {\r\n\r\n\t\t\t\t\t\t// }, 3500)\r\n\t\t\t\t\t},\r\n\t\t\t\t\tonFreeGameAmoundChange: (amount: number) => {\r\n\t\t\t\t\t\tthis.events.onFreeGameAmoundChange(amount)\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\tthis.awardBoxMap.push(awardBox)\r\n\t\t}\r\n\t}\r\n\r\n\tprotected destroyCallBack(): void {\r\n\t\tthis.taskScheduler.stopQueue(false)\r\n\t}\r\n\r\n\tpublic getTimesNode() {\r\n\t\treturn this.propertyNode.props_Layout_times\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}
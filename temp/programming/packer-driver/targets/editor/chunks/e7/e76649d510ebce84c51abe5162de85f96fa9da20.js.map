{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/viewModel/LoginViewDialogModel.ts"],"names":["LoginViewDialogModel","Prefab","sys","ViewModel","LoginType","EffectType","ApiUrl","addToastAction","ResetPasswordViewModel","fetcher","sourceManageSeletor","PrefabPathDefine","InputValidator","lang","deviceInfo","getPackageName","constructor","begin","setProps","setEvent","loginHandler","showLoginType","loginData","paramData","type","phone","number","promotionCode","memberName","password","pkgCode","macCode","getUniqueId","PASSWORD","Object","assign","authStr","PHONE","verificationCode","isPhoneNumber","done","send","LOGIN_PWD","then","data","values","split","token","length","localStorage","setItem","comp","events","loginDoneHandler","catch","e","console","log","sendSmsHandler","phoneNumber","dispatch","content","write","k","loginModule","LoginCode","placeStr","setPasswordHandler","resetPasswordViewModel","mountView","getFileAsync","_LOGIN_SET_PASSWORD","source","appendTo","parentNode","effectType","EFFECT1","closeHandler","unMount","pwdLoginSuccess","connect","initProps","inject","state"],"mappings":";;;gRAgBMA,oB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAhBSC,MAAAA,M,OAAAA,M;AAAQC,MAAAA,G,OAAAA,G;;AAChBC,MAAAA,S;;AAE4BC,MAAAA,S,iBAAAA,S;;AAC1BC,MAAAA,U,iBAAAA,U;;AAEAC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,c,iBAAAA,c;;AACFC,MAAAA,sB;;AACEC,MAAAA,O,iBAAAA,O;AAASC,MAAAA,mB,iBAAAA,mB;;AACTC,MAAAA,gB,iBAAAA,gB;;AACFC,MAAAA,c;;AACEC,MAAAA,I,kBAAAA,I;;AACAC,MAAAA,U,kBAAAA,U;;AACAC,MAAAA,c,kBAAAA,c;;;;;;;;;AAEHf,MAAAA,oB,GAAN,MAAMA,oBAAN;AAAA;AAAA,kCAA+E;AAC7EgB,QAAAA,WAAW,GAAG;AACZ,gBAAM,kBAAN;AACD;;AACSC,QAAAA,KAAK,GAAG;AAChB,eAAKC,QAAL,CAAc,EAAd;AAEA,eAAKC,QAAL,CAAc;AACZC,YAAAA,YAAY,EAAE,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAC1C;AACA,kBAAIC,SAAS,GAAG;AACdC,gBAAAA,IAAI,EAAEH,aADQ;AAEdI,gBAAAA,KAAK,EAAEH,SAAS,CAACI,MAFH;AAGdC,gBAAAA,aAAa,EAAEL,SAAS,CAACK,aAHX;AAIdC,gBAAAA,UAAU,EAAE,EAJE;AAKdC,gBAAAA,QAAQ,EAAE,EALI;AAMdC,gBAAAA,OAAO,EAAE;AAAA;AAAA,uDANK;AAOdC,gBAAAA,OAAO,EAAE;AAAA;AAAA,8CAAWC,WAAX;AAPK,eAAhB;;AASA,kBAAIX,aAAa,KAAK;AAAA;AAAA,0CAAUY,QAAhC,EAA0C;AACxC;AACAC,gBAAAA,MAAM,CAACC,MAAP,CAAcZ,SAAd,EAAyB;AACvBK,kBAAAA,UAAU,EAAEN,SAAS,CAACI,MADC;AAEvBG,kBAAAA,QAAQ,EAAEP,SAAS,CAACc;AAFG,iBAAzB;AAID,eAND,MAMO,IAAIf,aAAa,KAAK;AAAA;AAAA,0CAAUgB,KAAhC,EAAuC;AAC5CH,gBAAAA,MAAM,CAACC,MAAP,CAAcZ,SAAd,EAAyB;AAAEe,kBAAAA,gBAAgB,EAAEhB,SAAS,CAACc;AAA9B,iBAAzB;AACD;;AACD;AAAA;AAAA,sDAAqBnB,KAArB,GAA6BsB,aAA7B,CAA2ChB,SAAS,CAACE,KAArD,EAA4De,IAA5D,CAAiE,MAAM;AACrE;AAAA;AAAA,wCAAQC,IAAR,CAAa;AAAA;AAAA,sCAAOC,SAApB,EAA+BnB,SAA/B,EAA0CoB,IAA1C,CAAgDC,IAAD,IAAkB;AAC/D,wBAAMC,MAAM,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAf;AACA,sBAAIC,KAAK,GAAGF,MAAM,CAACG,MAAP,KAAkB,CAAlB,GAAsBJ,IAAtB,GAA6BC,MAAM,CAAC,CAAD,CAA/C,CAF+D,CAG/D;;AACA3C,kBAAAA,GAAG,CAAC+C,YAAJ,CAAiBC,OAAjB,CAAyB,OAAzB,EAAkCH,KAAlC;AACA,uBAAKI,IAAL,CAAUC,MAAV,CAAiBC,gBAAjB;AACD,iBAND,EAMGC,KANH,CAMUC,CAAD,IAAO;AACdC,kBAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,iBARD;AASD,eAVD;AAWD,aAhCW;AAiCZG,YAAAA,cAAc,EAAGC,WAAD,IAAyB;AACvC,mBAAKC,QAAL,CAAc;AAAA;AAAA,oDAAe;AAAEC,gBAAAA,OAAO,EAAE;AAAA;AAAA,kCAAKC,KAAL,CAAWC,CAAC,IAAIA,CAAC,CAACC,WAAF,CAAcC,SAA9B,EAAyC,EAAzC,EAA6C;AAAEC,kBAAAA,QAAQ,EAAE;AAAZ,iBAA7C;AAAX,eAAf,CAAd,EADuC,CAEvC;AACA;AACA;AACA;AACA;AACA;AACD,aAzCW;AA0CZC,YAAAA,kBAAkB,EAAE,YAAY;AAC9B,oBAAMC,sBAAsB,GAAG;AAAA;AAAA,sEAA6BC,SAA7B,CAC7B,CAAC,MAAM;AAAA;AAAA,8DAAoB,MAApB,EAA4BC,YAA5B,CAAyC;AAAA;AAAA,wDAAiBC,mBAA1D,EAA+EtE,MAA/E,CAAP,EAA+FuE,MADlE,EAE5BC,QAF4B,CAEnB,KAAKC,UAFc,EAEF;AAAEC,gBAAAA,UAAU,EAAE;AAAA;AAAA,8CAAWC;AAAzB,eAFE,EAEkCzD,QAFlC,CAE2C;AACtE0D,gBAAAA,YAAY,EAAE,MAAM;AAClBT,kBAAAA,sBAAsB,CAACU,OAAvB,CAA+B;AAAA;AAAA,gDAAWF,OAA1C;AACD,iBAHqE;AAItEG,gBAAAA,eAAe,EAAE,MAAM;AACrB,uBAAK5B,IAAL,CAAUC,MAAV,CAAiBC,gBAAjB;AACD;AANqE,eAF3C,EAS1B2B,OAT0B,EAA/B;AAUD;AArDW,WAAd;AAuDD;;AACMA,QAAAA,OAAO,CAACC,SAA0B,GAAG,EAA9B,EAAkC;AAC9C,eAAKC,MAAL,CAAYD,SAAZ,EAAwBE,KAAD,IAAsB;AAC3C,mBAAO,EAAP;AAGD,WAJD;AAKA,iBAAO,IAAP;AACD;;AAtE4E,O;;yBAyEhEnF,oB","sourcesContent":["import { Node, Prefab, sys } from \"cc\"\r\nimport ViewModel from \"../../base/ViewModel\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { Hall_LoginDialog, IProps, LoginType, IEvent } from \"../components/Hall_LoginDialog\"\r\nimport { EffectType } from \"../../utils/NodeIOEffect\"\r\nimport Fetcher from \"../../utils/Fetcher\"\r\nimport { ApiUrl } from \"../apiUrl\"\r\nimport { addToastAction } from \"../store/actions/baseBoard\"\r\nimport ResetPasswordViewModel from \"./ResetPasswordViewModel\"\r\nimport { fetcher, sourceManageSeletor } from \"../index\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport InputValidator from \"../../utils/InputValidator\"\r\nimport { lang } from \"../index\"\r\nimport { deviceInfo } from \"../config\"\r\nimport { getPackageName } from \"../../common/bridge\"\r\n\r\nclass LoginViewDialogModel extends ViewModel<Hall_LoginDialog, IProps, IEvent> {\r\n  constructor() {\r\n    super('Hall_LoginDialog')\r\n  }\r\n  protected begin() {\r\n    this.setProps({})\r\n\r\n    this.setEvent({\r\n      loginHandler: (showLoginType, loginData) => {\r\n        // this.dispatch(addToastAction({ content: \"输入有误\" }))\r\n        let paramData = {\r\n          type: showLoginType,\r\n          phone: loginData.number,\r\n          promotionCode: loginData.promotionCode,\r\n          memberName: '',\r\n          password: '',\r\n          pkgCode: getPackageName(),\r\n          macCode: deviceInfo.getUniqueId()\r\n        }\r\n        if (showLoginType === LoginType.PASSWORD) {\r\n          // Object.assign(paramData, { password: loginData.authStr })\r\n          Object.assign(paramData, {\r\n            memberName: loginData.number,\r\n            password: loginData.authStr,\r\n          })\r\n        } else if (showLoginType === LoginType.PHONE) {\r\n          Object.assign(paramData, { verificationCode: loginData.authStr })\r\n        }\r\n        new InputValidator().begin().isPhoneNumber(paramData.phone).done(() => {\r\n          fetcher.send(ApiUrl.LOGIN_PWD, paramData).then((data: string) => {\r\n            const values = data.split(\",\")\r\n            let token = values.length === 1 ? data : values[0];\r\n            //登录成功\r\n            sys.localStorage.setItem('token', token)\r\n            this.comp.events.loginDoneHandler()\r\n          }).catch((e) => {\r\n            console.log(e)\r\n          })\r\n        })\r\n      },\r\n      sendSmsHandler: (phoneNumber: string) => {\r\n        this.dispatch(addToastAction({ content: lang.write(k => k.loginModule.LoginCode, {}, { placeStr: \"验证信息已经发送，请注意查收\" }) }))\r\n        // Fetcher.Instance<Fetcher<ApiUrl>>().send(ApiUrl.SEND_SMS, { phone: phoneNumber }).then((rsp) => {\r\n        //   this.dispatch(addToastAction({ content: `验证信息已经发送，请注意查收` }))\r\n        //   this.setProps({ smsCode: rsp })\r\n        // }).catch((e) => {\r\n        //   console.log(e)\r\n        // })\r\n      },\r\n      setPasswordHandler: async () => {\r\n        const resetPasswordViewModel = new ResetPasswordViewModel().mountView(\r\n          (await sourceManageSeletor(\"hall\").getFileAsync(PrefabPathDefine._LOGIN_SET_PASSWORD, Prefab)).source)\r\n          .appendTo(this.parentNode, { effectType: EffectType.EFFECT1 }).setEvent({\r\n            closeHandler: () => {\r\n              resetPasswordViewModel.unMount(EffectType.EFFECT1)\r\n            },\r\n            pwdLoginSuccess: () => {\r\n              this.comp.events.loginDoneHandler()\r\n            }\r\n          }).connect()\r\n      }\r\n    })\r\n  }\r\n  public connect(initProps: Partial<IProps> = {}) {\r\n    this.inject(initProps, (state: StateType) => {\r\n      return {\r\n\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default LoginViewDialogModel"]}
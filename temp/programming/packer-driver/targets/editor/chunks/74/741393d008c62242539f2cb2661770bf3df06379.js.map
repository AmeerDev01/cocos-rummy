{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/godWealth/Framework/care/Controller.ts"],"names":["Controller","Observer","View","constructor","view","commandMap","_instance","Error","initializeController","Instance","executeCommand","notification","commandClassRef","getName","command","execute","registerCommand","notificationName","registerObserver","removeCommand","hasCommand","removeObserver"],"mappings":";;;8CAOqBA,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAHdC,MAAAA,Q;;AACAC,MAAAA,I;;;;;;;yBAEcF,U,GAAN,MAAMA,UAAN,CAAwC;AAMnDG,QAAAA,WAAW,GAAG;AAAA,eAHJC,IAGI,GAHU,IAGV;AAAA,eAFJC,UAEI,GAF2C,IAE3C;AACV,cAAIL,UAAU,CAACM,SAAf,EAA0B,MAAMC,KAAK,CAAC,2CAAD,CAAX;AAC1BP,UAAAA,UAAU,CAACM,SAAX,GAAuB,IAAvB;AACA,eAAKD,UAAL,GAAkB,EAAlB;AACA,eAAKG,oBAAL;AACH;;AAEyB,mBAARC,QAAQ,GAAgB;AACtC,cAAI,CAACT,UAAU,CAACM,SAAhB,EACIN,UAAU,CAACM,SAAX,GAAuB,IAAIN,UAAJ,EAAvB;AACJ,iBAAOA,UAAU,CAACM,SAAlB;AACH;;AAESE,QAAAA,oBAAoB,GAAG;AAC7B,eAAKJ,IAAL,GAAY;AAAA;AAAA,4BAAKK,QAAjB;AACH;;AAEMC,QAAAA,cAAc,CAACC,YAAD,EAAoC;AACrD,cAAIC,eAAoB,GAAG,KAAKP,UAAL,CAAgBM,YAAY,CAACE,OAAb,EAAhB,CAA3B;;AACA,cAAID,eAAJ,EAAqB;AACjB,gBAAIE,OAAiB,GAAa,IAAIF,eAAJ,EAAlC;AACAE,YAAAA,OAAO,CAACC,OAAR,CAAgBJ,YAAhB;AACH;AACJ;;AAEMK,QAAAA,eAAe,CAACC,gBAAD,EAA2BL,eAA3B,EAA4D;AAC9E,cAAI,CAAC,KAAKP,UAAL,CAAgBY,gBAAhB,CAAL,EAAwC;AACpC,iBAAKb,IAAL,CAAUc,gBAAV,CAA2BD,gBAA3B,EAA6C;AAAA;AAAA,sCAAa,KAAKP,cAAlB,EAAkC,IAAlC,CAA7C;AACH;;AACD,eAAKL,UAAL,CAAgBY,gBAAhB,IAAoCL,eAApC;AACH;;AAEMO,QAAAA,aAAa,CAACF,gBAAD,EAAiC;AACjD,cAAI,KAAKG,UAAL,CAAgBH,gBAAhB,CAAJ,EAAuC;AACnC,iBAAKb,IAAL,CAAUiB,cAAV,CAAyBJ,gBAAzB,EAA2C,IAA3C;AACA,mBAAO,KAAKZ,UAAL,CAAgBY,gBAAhB,CAAP;AACH;AACJ;;AAEMG,QAAAA,UAAU,CAACH,gBAAD,EAAoC;AACjD,iBAAO,KAAKZ,UAAL,CAAgBY,gBAAhB,KAAqC,IAA5C;AACH;;AA/CkD,O;;AAAlCjB,MAAAA,U,CAEFM,S","sourcesContent":["import { ICommand } from \"../interfaces/ICommand\";\r\nimport { IController } from \"../interfaces/IController\";\r\nimport { INotification } from \"../interfaces/INotification\";\r\nimport { IView } from \"../interfaces/IView\";\r\nimport Observer from \"../patterns/observer/Observer\";\r\nimport View from \"./view\";\r\n\r\nexport default class Controller implements IController {\r\n\r\n    private static _instance: IController;\r\n    protected view: IView = null;\r\n    protected commandMap: { [propName: string]: Function } = null;\r\n\r\n    constructor() {\r\n        if (Controller._instance) throw Error(\"Controller singleton already constructed!\");\r\n        Controller._instance = this;\r\n        this.commandMap = {};\r\n        this.initializeController();\r\n    }\r\n\r\n    public static get Instance(): IController {\r\n        if (!Controller._instance)\r\n            Controller._instance = new Controller();\r\n        return Controller._instance;\r\n    }\r\n\r\n    protected initializeController() {\r\n        this.view = View.Instance;\r\n    }\r\n\r\n    public executeCommand(notification: INotification): void {\r\n        let commandClassRef: any = this.commandMap[notification.getName()];\r\n        if (commandClassRef) {\r\n            let command: ICommand = <ICommand>new commandClassRef();\r\n            command.execute(notification);\r\n        }\r\n    }\r\n\r\n    public registerCommand(notificationName: string, commandClassRef: Function): void {\r\n        if (!this.commandMap[notificationName]) {\r\n            this.view.registerObserver(notificationName, new Observer(this.executeCommand, this));\r\n        }\r\n        this.commandMap[notificationName] = commandClassRef;\r\n    }\r\n\r\n    public removeCommand(notificationName: string): void {\r\n        if (this.hasCommand(notificationName)) {\r\n            this.view.removeObserver(notificationName, this);\r\n            delete this.commandMap[notificationName];\r\n        }\r\n    }\r\n\r\n    public hasCommand(notificationName: string): boolean {\r\n        return this.commandMap[notificationName] != null;\r\n    }\r\n\r\n}"]}
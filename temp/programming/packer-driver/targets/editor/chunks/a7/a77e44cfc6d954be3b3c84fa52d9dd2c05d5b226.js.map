{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/bandarQiuQiu/components/BandarQiuQiu_win.ts"],"names":["updateWinUsers","node","winChild","children","filter","v","name","startsWith","forEach","active","getChildByName","getComponent","Label","string","load","SpriteFrame","err","sp","Sprite","spriteFrame","winList","item","index","i","goldNum","gold","formatAmountWithLetter","memberName","icon","_decorator","Node","BaseComponent","omitStr","bundleCommon","bundleBanDarQiuQiu","gameCacheData","ccclass","property","BandarQiuQiu_win","propertyNode","props_spr_win_bg","props_label_win_num","props","myInfo","events","onClosePanel","start","initState","bindEvent","useProps","key","value","cur","winGold","formatAmountWithCommas","updateWinsAndLosses","bindUI","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator,Label,Node, Sprite, SpriteFrame } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nimport { formatNumber, omitStr } from '../../../utils/tool';\r\nimport { bundleCommon, bundleBanDarQiuQiu } from '../index';\r\nimport { gameCacheData, HeadType,} from '../type';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport function updateWinUsers(node){\r\n\tlet winChild = node.children.filter(v => v.name.startsWith('props_spr_user_bg'));\r\n\twinChild.forEach(v=>{\r\n\t\tv.active = false;\r\n\t\tv.getChildByName(\"Label_user_name\").getComponent(Label).string = \"\";\r\n\t\tv.getChildByName(\"Label_user_gold\").getComponent(Label).string = \"\";\r\n\t\tbundleBanDarQiuQiu.load(`img/head1/spriteFrame`, SpriteFrame, (err, sp) => {\r\n\t\t\tif (!err) {\r\n\t\t\t\tv.getChildByName(`spr_user_head`).getComponent(Sprite).spriteFrame = sp\r\n\t\t\t}\r\n\t\t})\r\n\t});\r\n   gameCacheData.winList.forEach((item,index)=>{\r\n\t  winChild.forEach((v,i)=>{\r\n\t\tif(index === i){\r\n\t\t\tlet goldNum: string = item.gold.formatAmountWithLetter();\r\n\t\t\tv.active = true;\r\n\t\t\tv.getChildByName(\"Label_user_name\").getComponent(Label).string = omitStr(item.memberName, 12);\r\n\t\t\tv.getChildByName(\"Label_user_gold\").getComponent(Label).string = \"+\" + goldNum;\r\n\t\t\tbundleCommon.load(`resource/head/head_circle_${item.icon}/spriteFrame`, SpriteFrame, (err, sp) => {\r\n\t\t\t\tif (!err) {\r\n\t\t\t\t\tv.getChildByName(`spr_user_head`).getComponent(Sprite).spriteFrame = sp\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t })\r\n   })\r\n}\r\n\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\tmyInfo: HeadType,\r\n\t// roomWinInfo:WinInfo[]\r\n}\r\nexport interface IEvent {\r\n\tonClosePanel:()=>void\r\n}\r\n\r\n\r\n@ccclass('BandarQiuQiu_win')\r\nexport class BandarQiuQiu_win extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() {\r\n\t\t\r\n\t }\r\n\r\n\tprotected propertyNode = {\r\n\t\tprops_spr_win_bg:new Node(),\r\n        props_label_win_num:new Node(),\r\n\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\t\tmyInfo:null\r\n\t\t// roomWinInfo:[]\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\tonClosePanel:()=>{}\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\r\n\t}\r\n\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\r\n\t\tif(key===\"myInfo\"){\r\n\t\t\tupdateWinUsers(this.node)\r\n\t\t\tif(value.cur.winGold===0){\r\n\t\t\t\tthis.propertyNode.props_label_win_num.getComponent(Label).string=value.cur.winGold\r\n\t\t\t}else{\r\n\t\t\t\tthis.propertyNode.props_label_win_num.getComponent(Label).string=\"+\"+value.cur.winGold.formatAmountWithCommas()\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\t\r\n\t\r\n\t\t\t\r\n\t}\r\n\r\n\tpublic updateWinsAndLosses(myInfo){\r\n\r\n\t\tupdateWinUsers(this.node)\r\n\t\tif(myInfo.winGold===0){\r\n\t\t\tthis.propertyNode.props_label_win_num.getComponent(Label).string=myInfo.winGold\r\n\t\t}else{\r\n\t\t\tthis.propertyNode.props_label_win_num.getComponent(Label).string=\"+\"+myInfo.winGold.formatAmountWithCommas()\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}
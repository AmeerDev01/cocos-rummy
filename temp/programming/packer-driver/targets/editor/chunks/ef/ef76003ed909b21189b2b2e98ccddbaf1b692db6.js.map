{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/utils/fastEqual/equals.ts"],"names":["areArraysEqual","a","b","state","index","length","equals","areDatesEqual","getTime","areMapsEqual","size","matchedIndices","aIterable","entries","aResult","bResult","next","done","bIterable","hasMatch","matchIndex","aKey","aValue","value","bKey","bValue","areObjectsEqual","properties","keys","property","OWNER","$$typeof","areObjectsEqualStrict","descriptorA","descriptorB","getOwnPropertyDescriptor","configurable","enumerable","writable","arePrimitiveWrappersEqual","valueOf","areRegExpsEqual","source","flags","areSetsEqual","values","areTypedArraysEqual","getStrictProperties","hasOwn","sameValueZeroEqual","Object"],"mappings":"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","sourcesContent":["import { getStrictProperties, hasOwn, sameValueZeroEqual } from './utils';\r\nimport type {\r\n  Dictionary,\r\n  PrimitiveWrapper,\r\n  State,\r\n  TypedArray,\r\n} from './internalTypes';\r\n\r\nconst OWNER = '_owner';\r\n\r\nconst { getOwnPropertyDescriptor, keys } = Object;\r\n\r\n/**\r\n * Whether the arrays are equal in value.\r\n */\r\nexport function areArraysEqual(a: any[], b: any[], state: State<any>) {\r\n  let index = a.length;\r\n\r\n  if (b.length !== index) {\r\n    return false;\r\n  }\r\n\r\n  while (index-- > 0) {\r\n    if (!state.equals(a[index], b[index], index, index, a, b, state)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Whether the dates passed are equal in value.\r\n */\r\nexport function areDatesEqual(a: Date, b: Date): boolean {\r\n  return sameValueZeroEqual(a.getTime(), b.getTime());\r\n}\r\n\r\n/**\r\n * Whether the `Map`s are equal in value.\r\n */\r\nexport function areMapsEqual(\r\n  a: Map<any, any>,\r\n  b: Map<any, any>,\r\n  state: State<any>,\r\n): boolean {\r\n  if (a.size !== b.size) {\r\n    return false;\r\n  }\r\n\r\n  const matchedIndices: Record<number, true> = {};\r\n  const aIterable = a.entries();\r\n\r\n  let index = 0;\r\n  let aResult: IteratorResult<[any, any]>;\r\n  let bResult: IteratorResult<[any, any]>;\r\n\r\n  while ((aResult = aIterable.next())) {\r\n    if (aResult.done) {\r\n      break;\r\n    }\r\n\r\n    const bIterable = b.entries();\r\n\r\n    let hasMatch = false;\r\n    let matchIndex = 0;\r\n\r\n    while ((bResult = bIterable.next())) {\r\n      if (bResult.done) {\r\n        break;\r\n      }\r\n\r\n      const [aKey, aValue] = aResult.value;\r\n      const [bKey, bValue] = bResult.value;\r\n\r\n      if (\r\n        !hasMatch &&\r\n        !matchedIndices[matchIndex] &&\r\n        (hasMatch =\r\n          state.equals(aKey, bKey, index, matchIndex, a, b, state) &&\r\n          state.equals(aValue, bValue, aKey, bKey, a, b, state))\r\n      ) {\r\n        matchedIndices[matchIndex] = true;\r\n      }\r\n\r\n      matchIndex++;\r\n    }\r\n\r\n    if (!hasMatch) {\r\n      return false;\r\n    }\r\n\r\n    index++;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Whether the objects are equal in value.\r\n */\r\nexport function areObjectsEqual(\r\n  a: Dictionary,\r\n  b: Dictionary,\r\n  state: State<any>,\r\n): boolean {\r\n  const properties = keys(a);\r\n\r\n  let index = properties.length;\r\n\r\n  if (keys(b).length !== index) {\r\n    return false;\r\n  }\r\n\r\n  let property: string;\r\n\r\n  // Decrementing `while` showed faster results than either incrementing or\r\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\r\n  // methods like `some` / `every` were not used to avoid incurring the garbage\r\n  // cost of anonymous callbacks.\r\n  while (index-- > 0) {\r\n    property = properties[index]!;\r\n\r\n    if (\r\n      property === OWNER &&\r\n      (a.$$typeof || b.$$typeof) &&\r\n      a.$$typeof !== b.$$typeof\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      !hasOwn(b, property) ||\r\n      !state.equals(a[property], b[property], property, property, a, b, state)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Whether the objects are equal in value with strict property checking.\r\n */\r\nexport function areObjectsEqualStrict(\r\n  a: Dictionary,\r\n  b: Dictionary,\r\n  state: State<any>,\r\n): boolean {\r\n  const properties = getStrictProperties(a);\r\n\r\n  let index = properties.length;\r\n\r\n  if (getStrictProperties(b).length !== index) {\r\n    return false;\r\n  }\r\n\r\n  let property: string | symbol;\r\n  let descriptorA: ReturnType<typeof getOwnPropertyDescriptor>;\r\n  let descriptorB: ReturnType<typeof getOwnPropertyDescriptor>;\r\n\r\n  // Decrementing `while` showed faster results than either incrementing or\r\n  // decrementing `for` loop and than an incrementing `while` loop. Declarative\r\n  // methods like `some` / `every` were not used to avoid incurring the garbage\r\n  // cost of anonymous callbacks.\r\n  while (index-- > 0) {\r\n    property = properties[index]!;\r\n\r\n    if (\r\n      property === OWNER &&\r\n      (a.$$typeof || b.$$typeof) &&\r\n      a.$$typeof !== b.$$typeof\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (!hasOwn(b, property)) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      !state.equals(a[property], b[property], property, property, a, b, state)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    descriptorA = getOwnPropertyDescriptor(a, property);\r\n    descriptorB = getOwnPropertyDescriptor(b, property);\r\n\r\n    if (\r\n      (descriptorA || descriptorB) &&\r\n      (!descriptorA ||\r\n        !descriptorB ||\r\n        descriptorA.configurable !== descriptorB.configurable ||\r\n        descriptorA.enumerable !== descriptorB.enumerable ||\r\n        descriptorA.writable !== descriptorB.writable)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Whether the primitive wrappers passed are equal in value.\r\n */\r\nexport function arePrimitiveWrappersEqual(\r\n  a: PrimitiveWrapper,\r\n  b: PrimitiveWrapper,\r\n): boolean {\r\n  return sameValueZeroEqual(a.valueOf(), b.valueOf());\r\n}\r\n\r\n/**\r\n * Whether the regexps passed are equal in value.\r\n */\r\nexport function areRegExpsEqual(a: RegExp, b: RegExp): boolean {\r\n  return a.source === b.source && a.flags === b.flags;\r\n}\r\n\r\n/**\r\n * Whether the `Set`s are equal in value.\r\n */\r\nexport function areSetsEqual(\r\n  a: Set<any>,\r\n  b: Set<any>,\r\n  state: State<any>,\r\n): boolean {\r\n  if (a.size !== b.size) {\r\n    return false;\r\n  }\r\n\r\n  const matchedIndices: Record<number, true> = {};\r\n  const aIterable = a.values();\r\n\r\n  let aResult: IteratorResult<any>;\r\n  let bResult: IteratorResult<any>;\r\n\r\n  while ((aResult = aIterable.next())) {\r\n    if (aResult.done) {\r\n      break;\r\n    }\r\n\r\n    const bIterable = b.values();\r\n\r\n    let hasMatch = false;\r\n    let matchIndex = 0;\r\n\r\n    while ((bResult = bIterable.next())) {\r\n      if (bResult.done) {\r\n        break;\r\n      }\r\n\r\n      if (\r\n        !hasMatch &&\r\n        !matchedIndices[matchIndex] &&\r\n        (hasMatch = state.equals(\r\n          aResult.value,\r\n          bResult.value,\r\n          aResult.value,\r\n          bResult.value,\r\n          a,\r\n          b,\r\n          state,\r\n        ))\r\n      ) {\r\n        matchedIndices[matchIndex] = true;\r\n      }\r\n\r\n      matchIndex++;\r\n    }\r\n\r\n    if (!hasMatch) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Whether the TypedArray instances are equal in value.\r\n */\r\nexport function areTypedArraysEqual(a: TypedArray, b: TypedArray) {\r\n  let index = a.length;\r\n\r\n  if (b.length !== index) {\r\n    return false;\r\n  }\r\n\r\n  while (index-- > 0) {\r\n    if (a[index] !== b[index]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n"]}
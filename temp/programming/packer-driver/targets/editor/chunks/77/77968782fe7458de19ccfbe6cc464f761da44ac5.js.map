{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/domino/viewModel/MainBoardViewModel.ts"],"names":["ViewModel","StoreInject","BaseViewModel","global","lang","addToastAction","EffectType","config","playDead","playSend","playWin","sourceManageSeletor","SKT_MAG_TYPE","sktInstance","sktMsgListener","PrefabPathDefine","getStore","changeDeskStatus","changeOutCardPlayer","changePlayerStatus","clearRoomData","deal","initSelfSeat","joinSeat","outCountdown","quitSeat","sendBalance","setWinlossType","showOutCard","updatePlayerLewat","DeskStatus","PlayerSatus","SeatPosition","convertAzimuth","genCardItem","BalancePanelViewModel","EndingViewModel","MineViewModel","OpponentViewModel","RecordViewModel","MainBoardViewModel","constructor","onComplate","seatMine","seatRight","seatTop","seatLeft","distributeCards","playerMap","myChairId","roomId","memberId","tableId","lower","upper","roomInfo","balancePanelViewModel","endingViewModel","isCanOutCard","TaskScheduler","t","begin","listenerSocket","mountView","getFile","MINE_SEAT","source","appendTo","comp","getPlayerWrapNode","connect","LEFT_SEAT","initSeatIndex","TOP_SEAT","RIGHT_SEAT","setPanel","SET_PANEL","viewNode","RECORD","setEvent","openSetPanel","toggle","showToggle","openShopPanel","openShop","flyCard","cardPanelNode","cardNode","seatIndex","endPosition","getEndPosition","getSeatPosition","onQuitRoom","quitRoom","dealerBeginOut","dispatch","PLAYING","nextPlayer","props","find","v","gameData","isMaster","startCountdown","onQuitGame","onChangeRoom","onReady","ready","sendSktMessage","READY","isGameIn","getPlayer","state","WAITING","notGameIn","statue","CLSOE","COUNTDOWNING","getBeginGameCountdownCount","content","write","k","palyingModule","GameExit","placeStr","QUIT_ROOM","clearData","unMount","window","clearInterval","changeRoom","CHANGE_ROOM","gameId","enterGame","player","isSelf","getPlayerSeatPositionByChairId","chairId","node","getChildByName","position","seatList","DOWN","LEFT","TOP","RIGHT","getNextNativePlayer","lastUid","playerViewModelMap","thisIndex","lastIndex","findIndex","item","unMountCallBack","removeListener","remove","BEGIN_GAME_COUNTDOWN","PUSH_DEALER","PUSH_DEAL","OUT_CARD","BALANCE","add","data","getPlayerGameData","villageId","GAME_STATE_CHANGE","gameState","setBeginGameCountdownCount","seconds","time","timestamp","Date","now","cardItems","map","DISTRIBUTE","outPlayer","card","cardItem","azimuth","flyGold","dominoDeductMoneyVo","dominoMemBerInfo","lewatPokes","dominoNext","leftTime","openBalancePanel","pushQuitRoom","roomLength","filter","length","uid","startIndex","lossMemberId","endIndex","winMemberId","winloss","money","lossSeatIndex","winSeatIndex","changeNextPlayer","convertPosition","sendOutCard","console","log","outCardLength","outCardItem","poker","value","undefined","outCard","count","countdown","setInterval","isValid","currActiveSeatIndex","coutndown","openEndingOdds","odds","done","setTimeout","GAME_ENDING_ODDS","effectType","EFFECT1","setProps","balances","myBalance","prefabPath","WIN_BALANCE_PANEL","LOSE_BALANCE_PANEL","balancePlayers","gold","inject","deskData","quitRoomAction","readyCountdown","noShowCardNumber","leftOutCardItem","rightOutCardItem","lastActiveSeatIndex","newCardItem","intendOutCard","balanceOdds"],"mappings":"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","sourcesContent":["import { Node, Vec3 } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport BaseViewModel from \"../../../common/viewModel/BaseViewModel\"\r\nimport { global, lang } from \"../../../hall\"\r\nimport { addToastAction } from \"../../../hall/store/actions/baseBoard\"\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\"\r\nimport { Domino_MainBoard, IEvent, IProps } from \"../components/Domino_MainBoard\"\r\nimport { Domino_SetPanel, IEvent as SPIEvent, IProps as SPIProps, IState as SPIState } from \"../components/Domino_SetPanel\"\r\nimport config from \"../config\"\r\nimport { playDead, playSend, playWin, sourceManageSeletor } from \"../index\"\r\nimport { SKT_MAG_TYPE, sktInstance, sktMsgListener } from \"../socketConnect\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { getStore } from \"../store\"\r\nimport { changeDeskStatus, changeOutCardPlayer, changePlayerStatus, clearRoomData, deal, initSelfSeat, joinSeat, outCountdown, quitSeat, sendBalance, setWinlossType, showOutCard, updatePlayerLewat } from \"../store/action/game\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { BalancePlayer, CardItem, Countdown, DeskStatus, DominoDeductMoneyVo, GameStateVo, OutCardDataSo, OutCardDataVo, Player, PlayerSatus, PushDealerVo, RoomInfo, SeatPosition, convertAzimuth, genCardItem } from \"../type\"\r\nimport BalancePanelViewModel from \"./BalancePanelViewModel\"\r\nimport EndingViewModel from \"./EndingViewModel\"\r\nimport MineViewModel from \"./MineViewModel\"\r\nimport OpponentViewModel from \"./OpponentViewModel\"\r\nimport RecordViewModel from \"./RecordViewModel\"\r\n\r\n@StoreInject(getStore())\r\nclass MainBoardViewModel extends ViewModel<Domino_MainBoard, IProps, IEvent> {\r\n  constructor() {\r\n    super('Domino_MainBoard')\r\n  }\r\n\r\n  public onComplate: () => void;\r\n  public seatMine: MineViewModel\r\n  public seatRight: OpponentViewModel\r\n  public seatTop: OpponentViewModel\r\n  public seatLeft: OpponentViewModel\r\n  public distributeCards: OpponentViewModel\r\n  public playerMap: Player[] = []\r\n  public myChairId: number\r\n  public roomId: string\r\n  public memberId: string\r\n  public tableId: string\r\n  public lower: number\r\n  public upper: number\r\n  public roomInfo: RoomInfo\r\n\r\n  /**出牌倒计时 */\r\n  private outCountdown = 0;\r\n\r\n  private balancePanelViewModel: BalancePanelViewModel;\r\n  private endingViewModel: EndingViewModel;\r\n  // 是否可以出牌\r\n  private isCanOutCard = false;\r\n\r\n  private TaskScheduler\r\n\r\n  protected begin() {\r\n    this.listenerSocket();\r\n    this.seatMine = new MineViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.MINE_SEAT).source).appendTo(this.comp.getPlayerWrapNode()).connect()\r\n    this.seatLeft = new OpponentViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.LEFT_SEAT).source).appendTo(this.comp.getPlayerWrapNode()).initSeatIndex(1).connect()\r\n    this.seatTop = new OpponentViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.TOP_SEAT).source).appendTo(this.comp.getPlayerWrapNode()).initSeatIndex(2).connect()\r\n    this.seatRight = new OpponentViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.RIGHT_SEAT).source).appendTo(this.comp.getPlayerWrapNode()).initSeatIndex(3).connect()\r\n\r\n    const setPanel = new BaseViewModel<Domino_SetPanel, SPIState, SPIProps, SPIEvent>('Domino_SetPanel').mountView(sourceManageSeletor().getFile(PrefabPathDefine.SET_PANEL).source).appendTo(this.viewNode)\r\n    new RecordViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.RECORD).source).appendTo(this.viewNode).connect();\r\n    this.setEvent({\r\n      openSetPanel: (toggle) => {\r\n        setPanel.comp.showToggle(toggle)\r\n      },\r\n      openShopPanel: () => {\r\n        global.openShop();\r\n      },\r\n      flyCard: (cardPanelNode: Node, cardNode: Node, seatIndex: number) => {\r\n        this.deal(seatIndex);\r\n        // 自己飞牌的终点是牌插入的位置\r\n        if (seatIndex === 0) {\r\n          this.seatMine.comp.deal((endPosition: Vec3) => {\r\n            this.comp.flyCard(cardPanelNode, cardNode, endPosition, seatIndex);\r\n          });\r\n        } else {\r\n          this.comp.flyCard(cardPanelNode, cardNode, this.getEndPosition(seatIndex), seatIndex);\r\n        }\r\n\r\n      },\r\n      getSeatPosition: (seatIndex: number) => {\r\n        return this.getSeatPosition(seatIndex);\r\n      },\r\n      onQuitRoom: () => {\r\n        this.quitRoom();\r\n      },\r\n      dealerBeginOut: () => {\r\n        this.dispatch(changeDeskStatus(DeskStatus.PLAYING, null));\r\n        // 下一个出牌的用户\r\n        const nextPlayer = this.comp.props.playerMap.find(v => v && v.gameData.isMaster);\r\n        this.dispatch(changeOutCardPlayer(nextPlayer.seatIndex));\r\n        // 开始倒计时\r\n        this.startCountdown(8);\r\n      }\r\n    })\r\n\r\n    setPanel.setEvent({\r\n      onQuitGame: () => {\r\n        this.quitRoom();\r\n      },\r\n      onChangeRoom: () => {\r\n        // this.changeRoom();\r\n      }\r\n    })\r\n\r\n    this.seatMine.setEvent({\r\n      onReady: () => {\r\n        this.ready();\r\n      }\r\n    })\r\n\r\n    this.onComplate && this.onComplate();\r\n  }\r\n\r\n  private ready() {\r\n    sktInstance.sendSktMessage(SKT_MAG_TYPE.READY, {\r\n      roomId: this.roomId,\r\n      tableId: this.tableId,\r\n      memberId: this.memberId\r\n    })\r\n  }\r\n\r\n  private isGameIn() {\r\n    if (this.getPlayer(this.memberId).gameData.state === PlayerSatus.WAITING) {\r\n      return false;\r\n    }\r\n    const notGameIn = this.comp.props.statue === DeskStatus.WAITING || this.comp.props.statue === DeskStatus.CLSOE;\r\n\r\n    if (notGameIn) {\r\n      return false;\r\n    }\r\n\r\n    if (this.comp.props.statue === DeskStatus.COUNTDOWNING && this.comp.getBeginGameCountdownCount() > 1) {\r\n      return false;\r\n    }\r\n\r\n    this.dispatch(addToastAction({ content: lang.write(k => k.palyingModule.GameExit, {}, { placeStr: \"您正在游戏中，退出失败，请游戏结束后重试。\" }) }))\r\n    return true;\r\n  }\r\n\r\n  public quitRoom() {\r\n    // 游戏中不能退出游戏\r\n    if (this.isGameIn()) {\r\n      return;\r\n    }\r\n    sktInstance.sendSktMessage(SKT_MAG_TYPE.QUIT_ROOM, {\r\n      memberId: this.memberId,\r\n      tableId: this.tableId,\r\n    });\r\n    this.comp.clearData();\r\n    this.unMount();\r\n    this.t && window.clearInterval(this.t);\r\n    this.dispatch(clearRoomData(0));\r\n  }\r\n\r\n  private changeRoom() {\r\n    // 游戏中不能退出游戏\r\n    if (this.isGameIn()) {\r\n      return;\r\n    }\r\n\r\n    sktInstance.sendSktMessage(SKT_MAG_TYPE.CHANGE_ROOM, {\r\n      gameId: config.gameId,\r\n      tableId: this.tableId,\r\n      roomId: this.roomId,\r\n    });\r\n\r\n    this.comp.clearData();\r\n    this.t && window.clearInterval(this.t);\r\n    this.dispatch(clearRoomData(0));\r\n\r\n  }\r\n\r\n  public enterGame(player: Player) {\r\n    if (player.isSelf) {\r\n      this.dispatch(initSelfSeat(player))\r\n      if (player.gameData.state === PlayerSatus.WAITING) {\r\n        this.ready();\r\n        // // 进入房间之后自动准备\r\n        // window.setTimeout(() => {\r\n        // }, 50);\r\n      }\r\n    } else {\r\n      this.dispatch(joinSeat(this.getPlayerSeatPositionByChairId(player.chairId), player))\r\n    }\r\n  }\r\n\r\n  private deal(seatIndex: number) {\r\n    seatIndex === 1 && this.seatLeft.comp.deal();\r\n    seatIndex === 2 && this.seatTop.comp.deal();\r\n    seatIndex === 3 && this.seatRight.comp.deal();\r\n  }\r\n\r\n  private getEndPosition(seatIndex: number) {\r\n    if (seatIndex === 1) {\r\n      return this.seatLeft.comp.node.getChildByName('props_Layout_cards_handCards').position;\r\n    } else if (seatIndex === 2) {\r\n      return this.seatTop.comp.node.getChildByName('props_Layout_cards_handCards').position;\r\n    } else if (seatIndex === 3) {\r\n      return this.seatRight.comp.node.getChildByName('props_Layout_cards_handCards').position;\r\n    }\r\n  }\r\n\r\n  private getSeatPosition(seatIndex: number) {\r\n    if (seatIndex === 0) {\r\n      return this.seatMine.comp.node.getChildByName('spr_bg').position;\r\n    } else if (seatIndex === 1) {\r\n      return this.seatLeft.comp.node.getChildByName('spr_bg').position;\r\n    } else if (seatIndex === 2) {\r\n      return this.seatTop.comp.node.getChildByName('spr_bg').position;\r\n    } else if (seatIndex === 3) {\r\n      return this.seatRight.comp.node.getChildByName('spr_bg').position;\r\n    }\r\n  }\r\n\r\n  /**通过chairId，结合自身方向获取响应的坐位方向 */\r\n  private getPlayerSeatPositionByChairId(chairId: number): SeatPosition {\r\n    let seatList = []\r\n    switch (this.myChairId) {\r\n      case 1: seatList = [SeatPosition.DOWN, SeatPosition.LEFT, SeatPosition.TOP, SeatPosition.RIGHT]; break;\r\n      case 2: seatList = [SeatPosition.RIGHT, SeatPosition.DOWN, SeatPosition.LEFT, SeatPosition.TOP]; break;\r\n      case 3: seatList = [SeatPosition.TOP, SeatPosition.RIGHT, SeatPosition.DOWN, SeatPosition.LEFT]; break;\r\n      case 4: seatList = [SeatPosition.LEFT, SeatPosition.TOP, SeatPosition.RIGHT, SeatPosition.DOWN]; break;\r\n    }\r\n    return seatList[--chairId]\r\n  }\r\n  /**\r\n   * 获取下一个要等待动作的用户\r\n   * @param lastUid 上一个在动的用户\r\n   */\r\n  public getNextNativePlayer(lastUid?: string) {\r\n    const playerViewModelMap: Array<MineViewModel | OpponentViewModel> = [this.seatMine, this.seatLeft, this.seatTop, this.seatRight]\r\n    let thisIndex = 0\r\n    if (lastUid) {\r\n      let lastIndex = playerViewModelMap.findIndex(item => item.comp.props['uid'] === lastUid)\r\n      if (lastIndex === 3) {\r\n        thisIndex = 0\r\n      } else {\r\n        thisIndex++\r\n      }\r\n      return playerViewModelMap[thisIndex]\r\n    } else {\r\n      return playerViewModelMap.find(item => item.comp.props['isMaster'])\r\n    }\r\n  }\r\n\r\n  protected unMountCallBack(): void {\r\n    this.removeListener();\r\n    this.t && window.clearInterval(this.t);\r\n  }\r\n\r\n  private removeListener() {\r\n    sktMsgListener.remove(SKT_MAG_TYPE.READY);\r\n    sktMsgListener.remove(SKT_MAG_TYPE.BEGIN_GAME_COUNTDOWN);\r\n    sktMsgListener.remove(SKT_MAG_TYPE.PUSH_DEALER);\r\n    sktMsgListener.remove(SKT_MAG_TYPE.PUSH_DEAL);\r\n    sktMsgListener.remove(SKT_MAG_TYPE.OUT_CARD);\r\n    sktMsgListener.remove(SKT_MAG_TYPE.BALANCE);\r\n    sktMsgListener.remove(SKT_MAG_TYPE.QUIT_ROOM);\r\n    sktMsgListener.remove(SKT_MAG_TYPE.CHANGE_ROOM);\r\n  }\r\n\r\n  private listenerSocket() {\r\n    sktMsgListener.add(SKT_MAG_TYPE.READY, 'room', (data) => {\r\n      const gameData = this.getPlayerGameData(data.memberId);\r\n      gameData.state = PlayerSatus.READY;\r\n      this.dispatch(changePlayerStatus(data.memberId, gameData))\r\n    });\r\n\r\n    // sktMsgListener.add(SKT_MAG_TYPE.BEGIN_GAME_COUNTDOWN, 'room', (data) => {\r\n    //   this.dispatch(changeDeskStatus(DeskStatus.COUNTDOWNING));\r\n    // });\r\n    sktMsgListener.add(SKT_MAG_TYPE.PUSH_DEALER, 'room', (data: PushDealerVo) => {\r\n      const gameData = this.getPlayerGameData(data.villageId);\r\n      gameData.isMaster = true;\r\n      this.dispatch(changePlayerStatus(data.villageId, gameData))\r\n    });\r\n    sktMsgListener.add(SKT_MAG_TYPE.GAME_STATE_CHANGE, 'room', (data: GameStateVo) => {\r\n      // 开始游戏倒计时\r\n      if (data.gameState === 1) {\r\n        this.comp.setBeginGameCountdownCount(data.seconds);\r\n        this.dispatch(changeDeskStatus(DeskStatus.COUNTDOWNING, {\r\n          time: data.seconds,\r\n          seatIndex: -1,\r\n          timestamp: Date.now()\r\n        }));\r\n      }\r\n    });\r\n\r\n    sktMsgListener.add(SKT_MAG_TYPE.PUSH_DEAL, 'room', (data: []) => {\r\n      this.balancePanelViewModel && this.balancePanelViewModel.unMount();\r\n      this.balancePanelViewModel = null;\r\n      this.endingViewModel && this.endingViewModel.unMount();\r\n      this.endingViewModel = null;\r\n\r\n      const cardItems = data.map(v => genCardItem(v))\r\n      this.dispatch(deal(cardItems));\r\n      this.dispatch(changeDeskStatus(DeskStatus.DISTRIBUTE, null));\r\n    });\r\n    sktMsgListener.add(SKT_MAG_TYPE.OUT_CARD, 'room', (data: OutCardDataVo) => {\r\n      // 停止倒计时\r\n      this.startCountdown(0);\r\n      this.dispatch(changeDeskStatus(DeskStatus.PLAYING, null));\r\n      // 出牌的用户\r\n      const outPlayer = this.comp.props.playerMap.find(v => v && v.chairId === data.chairId)\r\n\r\n      if (data.card >= 0) {\r\n        // 出的牌\r\n        const cardItem = genCardItem(data.card)\r\n        cardItem.seatIndex = outPlayer.seatIndex;\r\n        cardItem.azimuth = convertAzimuth(data.position);\r\n        this.dispatch(showOutCard(cardItem));\r\n\r\n        playSend();\r\n      } else {\r\n        this.flyGold(data.dominoDeductMoneyVo);\r\n\r\n        this.dispatch(updatePlayerLewat(data.dominoMemBerInfo.memberId, data.dominoMemBerInfo.lewatPokes));\r\n      }\r\n\r\n      // 下一个出牌的用户\r\n      const nextPlayer = this.getPlayer(data.dominoNext.memberId);\r\n      // 设置是否\r\n      this.isCanOutCard = data.dominoNext.memberId === this.memberId;\r\n      this.dispatch(changeOutCardPlayer(nextPlayer.seatIndex));\r\n\r\n      // 开始倒计时\r\n      this.startCountdown(data.dominoNext.leftTime);\r\n    });\r\n    sktMsgListener.add(SKT_MAG_TYPE.BALANCE, 'room', (data: BalancePlayer[]) => {\r\n      // 停止倒计时\r\n      this.startCountdown(0);\r\n      this.openBalancePanel(data);\r\n    });\r\n\r\n    sktMsgListener.add(SKT_MAG_TYPE.QUIT_ROOM, 'room', (data) => {\r\n      this.pushQuitRoom(data.memberId);\r\n    });\r\n    sktMsgListener.add(SKT_MAG_TYPE.CHANGE_ROOM, 'room', (data) => {\r\n      this.pushQuitRoom(data.memberId);\r\n    });\r\n  }\r\n\r\n  private pushQuitRoom(memberId) {\r\n    // if (this.memberId === memberId) {\r\n    //   this.comp.clearData();\r\n    //   this.unMount();\r\n    //   this.dispatch(clearRoomData(0));\r\n    // } else {\r\n    this.dispatch(quitSeat(memberId));\r\n\r\n    if (this.comp.props.statue === DeskStatus.COUNTDOWNING) {\r\n      // 小于2人了，暂停倒计时\r\n      const roomLength = this.comp.props.playerMap.filter(v => v).length\r\n      if (roomLength < 2) {\r\n        this.dispatch(changeDeskStatus(DeskStatus.WAITING, null));\r\n      }\r\n    }\r\n\r\n    // }\r\n  }\r\n\r\n  public getPlayer(memberId: string) {\r\n    return this.comp.props.playerMap.find(v => v && v.uid === memberId)\r\n  }\r\n\r\n  private flyGold(dominoDeductMoneyVo: DominoDeductMoneyVo) {\r\n    if (dominoDeductMoneyVo) {\r\n      const startIndex = this.getPlayer(dominoDeductMoneyVo.lossMemberId).seatIndex;\r\n      const endIndex = this.getPlayer(dominoDeductMoneyVo.winMemberId).seatIndex;\r\n      this.comp.flyGold(startIndex, endIndex, () => {\r\n        this.dispatch(setWinlossType({\r\n          winloss: dominoDeductMoneyVo.money,\r\n          lossSeatIndex: startIndex,\r\n          winSeatIndex: endIndex,\r\n        }));\r\n      });\r\n    }\r\n  }\r\n\r\n  private changeNextPlayer(memberId: number) {\r\n    this.dispatch(changeDeskStatus(DeskStatus.PLAYING, null));\r\n    // 下一个出牌的用户\r\n    // const nextPlayer = this.comp.props.playerMap.find(v => v && v.uid === memberId);\r\n    // this.dispatch(changeOutCardPlayer(nextPlayer.seatIndex));\r\n    // // 开始倒计时\r\n    // this.startCountdown(data.dominoNext.leftTime);\r\n  }\r\n\r\n  private getPlayerGameData(memberId: string) {\r\n    const player = this.comp.props.playerMap.find(v => v && v.uid === memberId);\r\n    const gameData = { ...player.gameData }\r\n    return gameData;\r\n  }\r\n\r\n  private convertPosition(azimuth: number) {\r\n    return azimuth + 1;\r\n  }\r\n\r\n  /**出牌 */\r\n  public sendOutCard(cardItem: CardItem) {\r\n    if (!this.isCanOutCard) {\r\n      console.log('你当前不能出牌')\r\n    };\r\n    if (cardItem.azimuth) {\r\n      const outCardLength = this.comp.props.outCardItem.length\r\n      cardItem.azimuth = outCardLength === 0 ? 2 : cardItem.azimuth;\r\n    }\r\n    const player = this.comp.props.playerMap[cardItem.seatIndex];\r\n    const poker = cardItem.value >= 0 ? cardItem.value : undefined;\r\n\r\n    let outCard: OutCardDataSo = {\r\n      gameId: config.gameId + '',\r\n      tableId: player.tableId,\r\n      chairId: player.chairId,\r\n      position: this.convertPosition(cardItem.azimuth),\r\n      poker: poker,\r\n      memberId: player.uid,\r\n    }\r\n\r\n    sktInstance.sendSktMessage(SKT_MAG_TYPE.OUT_CARD, outCard)\r\n  }\r\n\r\n  private t = 0;\r\n  /**开始出牌倒计时 */\r\n  public startCountdown(count: number) {\r\n    this.outCountdown = count;\r\n    this.t && window.clearInterval(this.t);\r\n    if (this.outCountdown > 0) {\r\n      this.countdown(this.outCountdown);\r\n      this.t = window.setInterval(() => {\r\n        this.countdown(--this.outCountdown);\r\n        if (this.outCountdown <= 0) {\r\n          window.clearInterval(this.t);\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      this.countdown(this.outCountdown);\r\n    }\r\n  }\r\n\r\n  private countdown(count) {\r\n    if (this.comp && this.comp.isValid) {\r\n      const seatIndex = this.comp.props.currActiveSeatIndex;\r\n      const coutndown: Countdown = {\r\n        time: count,\r\n        seatIndex: seatIndex\r\n      }\r\n      this.dispatch(outCountdown(coutndown));\r\n    } else {\r\n      this.t && window.clearInterval(this.t);\r\n    }\r\n  }\r\n\r\n  private openEndingOdds(odds: number, done) {\r\n    window.setTimeout(() => {\r\n      if (this.viewNode && this.viewNode.isValid) {\r\n        this.endingViewModel && this.endingViewModel.unMount();\r\n        this.endingViewModel = null;\r\n        this.endingViewModel = new EndingViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.GAME_ENDING_ODDS).source)\r\n          .appendTo(this.viewNode, { effectType: EffectType.EFFECT1 }).setProps({ odds: odds }).connect();\r\n        done();\r\n      }\r\n    }, 2000)\r\n  }\r\n\r\n  private openBalancePanel(balances: BalancePlayer[]) {\r\n    const myBalance = balances.find(v => v.memberId === this.memberId);\r\n    const winloss = myBalance.count;\r\n    this.dispatch(sendBalance(balances));\r\n\r\n    this.openEndingOdds(myBalance.odds, () => {\r\n\r\n      const prefabPath = winloss > 0 ? PrefabPathDefine.WIN_BALANCE_PANEL : PrefabPathDefine.LOSE_BALANCE_PANEL;\r\n      window.setTimeout(() => {\r\n        winloss > 0 ? playWin() : playDead();\r\n        this.dispatch(changeDeskStatus(DeskStatus.CLSOE, null));\r\n        if (this.viewNode && this.viewNode.isValid) {\r\n          this.endingViewModel && this.endingViewModel.unMount();\r\n          this.endingViewModel = null;\r\n\r\n          this.balancePanelViewModel && this.balancePanelViewModel.unMount();\r\n          this.balancePanelViewModel = null;\r\n          this.balancePanelViewModel = new BalancePanelViewModel().mountView(sourceManageSeletor().getFile(prefabPath).source)\r\n            .appendTo(this.viewNode, { effectType: EffectType.EFFECT1 })\r\n            .setProps({\r\n              balancePlayers: balances\r\n            })\r\n            .setEvent({\r\n              onReady: (time: boolean) => {\r\n                // 余额不足，如果是倒计时结束了，就退出游戏，如果是手动点击继续，就弹出商城\r\n                if (this.comp.props.gold < this.roomInfo.lower) {\r\n                  if (time) {\r\n                    this.quitRoom();\r\n                  } else {\r\n                    global.openShop();\r\n                  }\r\n                  return;\r\n                }\r\n                this.dispatch(changeDeskStatus(DeskStatus.WAITING, null));\r\n                this.ready();\r\n              },\r\n              onQuitRoom: () => {\r\n                this.quitRoom();\r\n              }\r\n            })\r\n        }\r\n      }, 2000)\r\n\r\n    })\r\n  }\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      this.playerMap = state.deskData.playerMap\r\n      return {\r\n        quitRoomAction: state.deskData.quitRoomAction,\r\n        readyCountdown: state.deskData.readyCountdown,\r\n        statue: state.deskData.statue,\r\n        noShowCardNumber: state.deskData.noShowCardNumber,\r\n        outCardItem: state.deskData.outCardItem,\r\n        leftOutCardItem: state.deskData.leftOutCardItem,\r\n        rightOutCardItem: state.deskData.rightOutCardItem,\r\n        playerMap: state.deskData.playerMap,\r\n        lastActiveSeatIndex: state.deskData.lastActiveSeatIndex,\r\n        currActiveSeatIndex: state.deskData.currActiveSeatIndex,\r\n        newCardItem: state.deskData.newCardItem,\r\n        intendOutCard: state.deskData.intendOutCard,\r\n        gold: state.deskData.gold,\r\n        balanceOdds: state.deskData.balanceOdds,\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default MainBoardViewModel"]}
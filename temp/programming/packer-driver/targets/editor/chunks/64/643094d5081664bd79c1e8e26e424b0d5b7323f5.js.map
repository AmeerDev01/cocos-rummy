{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/components/Hall_ChangePassword.ts"],"names":["_decorator","Button","EditBox","Node","BaseComponent","fetcher","global","lang","addToastAction","ToastType","InputValidator","ApiUrl","ccclass","property","Hall_ChangePassword","propertyNode","props_btn_spr_change_close","props_btn_sure","props_intput_sandiL","props_intput_sandiB","props_intput_kSandi","props","events","onClosePanel","doneHandler","start","initState","bindEvent","node","on","EventType","TOUCH_END","oldPwd","string","trim","newPwd","newPwd_re","hallDispatch","content","write","k","HallModule","pwdRepetitionError","placeStr","type","ERROR","begin","isChartLength","done","send","RESET_PASSWORD","password","oldPassword","then","data","BindPhoneModule","BindPhoneChange","SUCCESS","catch","e","console","log","useProps","key","value","bindUI","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,M,OAAAA,M;AAAmBC,MAAAA,O,OAAAA,O;AAAgBC,MAAAA,I,OAAAA,I;;AAC/CC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,O,iBAAAA,O;AAASC,MAAAA,M,iBAAAA,M;AAAQC,MAAAA,I,iBAAAA,I;;AACjBC,MAAAA,c,iBAAAA,c;AAAgBC,MAAAA,S,iBAAAA,S;;AAClBC,MAAAA,c;;AACEC,MAAAA,M,iBAAAA,M;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBb,U;;qCAejBc,mB,WADZF,OAAO,CAAC,qBAAD,C,gBAAR,MACaE,mBADb;AAAA;AAAA,0CAC+E;AAAA;AAAA;AAAA,eAKpEC,YALoE,GAKrD;AACxBC,YAAAA,0BAA0B,EAAE,IAAIf,MAAJ,EADJ;AAExBgB,YAAAA,cAAc,EAAE,IAAIhB,MAAJ,EAFQ;;AAGxB;AACAiB,YAAAA,mBAAmB,EAAE,IAAIhB,OAAJ,EAJG;;AAKxB;AACAiB,YAAAA,mBAAmB,EAAE,IAAIjB,OAAJ,EANG;;AAOxB;AACAkB,YAAAA,mBAAmB,EAAE,IAAIlB,OAAJ;AARG,WALqD;AAAA,eAgBvEmB,KAhBuE,GAgBvD,EAhBuD;AAAA,eAoBvEC,MApBuE,GAoBtD;AACvBC,YAAAA,YAAY,EAAE,MAAM,CAAG,CADA;AAEvBC,YAAAA,WAAW,EAAE,MAAM,CAAG;AAFC,WApBsD;AAAA;;AAC9EC,QAAAA,KAAK,GAAG,CAEP;;AAsBSC,QAAAA,SAAS,GAAG;AACrB,iBAAO,EAAP;AAGA;;AAESC,QAAAA,SAAS,GAAS;AAC3B,eAAKZ,YAAL,CAAkBC,0BAAlB,CAA6CY,IAA7C,CAAkDC,EAAlD,CAAqD1B,IAAI,CAAC2B,SAAL,CAAeC,SAApE,EAA+E,MAAM;AACpF,iBAAKT,MAAL,CAAYC,YAAZ;AACA,WAFD,EAD2B,CAI3B;;AACA,eAAKR,YAAL,CAAkBE,cAAlB,CAAiCW,IAAjC,CAAsCC,EAAtC,CAAyC1B,IAAI,CAAC2B,SAAL,CAAeC,SAAxD,EAAmE,MAAM;AACxE,kBAAMC,MAAM,GAAG,KAAKjB,YAAL,CAAkBG,mBAAlB,CAAsCe,MAAtC,CAA6CC,IAA7C,EAAf;AACA,kBAAMC,MAAM,GAAG,KAAKpB,YAAL,CAAkBI,mBAAlB,CAAsCc,MAAtC,CAA6CC,IAA7C,EAAf;AACA,kBAAME,SAAS,GAAG,KAAKrB,YAAL,CAAkBK,mBAAlB,CAAsCa,MAAtC,CAA6CC,IAA7C,EAAlB;;AACA,gBAAIC,MAAM,KAAKC,SAAf,EAA0B;AACzB;AAAA;AAAA,oCAAOC,YAAP,CAAoB;AAAA;AAAA,oDAAe;AAAEC,gBAAAA,OAAO,EAAE;AAAA;AAAA,kCAAKC,KAAL,CAAWC,CAAC,IAAIA,CAAC,CAACC,UAAF,CAAaC,kBAA7B,EAAiD,EAAjD,EAAqD;AAAEC,kBAAAA,QAAQ,EAAE;AAAZ,iBAArD,CAAX;AAA6FC,gBAAAA,IAAI,EAAE;AAAA;AAAA,4CAAUC;AAA7G,eAAf,CAApB;AACA;AACA;;AACD;AAAA;AAAA,oDAAqBC,KAArB,GAA6BC,aAA7B,CAA2C,CAAC,CAAD,EAAI,EAAJ,CAA3C,EAAoDf,MAApD,EAA4De,aAA5D,CAA0E,CAAC,CAAD,EAAI,EAAJ,CAA1E,EAAmFZ,MAAnF,EAA2FY,aAA3F,CAAyG,CAAC,CAAD,EAAI,EAAJ,CAAzG,EAAkHX,SAAlH,EAA6HY,IAA7H,CAAkI,MAAM;AACvI;AAAA;AAAA,sCAAQC,IAAR,CAAa;AAAA;AAAA,oCAAOC,cAApB,EAAoC;AACnCC,gBAAAA,QAAQ,EAAEhB,MADyB;AACjBiB,gBAAAA,WAAW,EAAEpB;AADI,eAApC,EAEGqB,IAFH,CAESC,IAAD,IAAU;AACjB;AACA;AAAA;AAAA,sCAAOjB,YAAP,CAAoB;AAAA;AAAA,sDAAe;AAAEC,kBAAAA,OAAO,EAAE;AAAA;AAAA,oCAAKC,KAAL,CAAWC,CAAC,IAAIA,CAAC,CAACe,eAAF,CAAkBC,eAAlC,EAAmD,EAAnD,EAAuD;AAAEb,oBAAAA,QAAQ,EAAE;AAAZ,mBAAvD,CAAX;AAAyFC,kBAAAA,IAAI,EAAE;AAAA;AAAA,8CAAUa;AAAzG,iBAAf,CAApB;AACA,qBAAKnC,MAAL,CAAYE,WAAZ;AACA,eAND,EAMGkC,KANH,CAMUC,CAAD,IAAO;AACfC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,eARD;AASA,aAVD;AAWA,WAnBD;AAoBA;;AAESG,QAAAA,QAAQ,CAACC,GAAD,EAAoBC,KAApB,EAAmD,CAEpE;;AAESC,QAAAA,MAAM,GAAS,CAExB;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AApE6E,O","sourcesContent":["import { _decorator, Button, Component, EditBox, Label, Node } from 'cc';\r\nimport { BaseComponent } from '../../base/BaseComponent';\r\nimport { fetcher, global, lang } from '../index';\r\nimport { addToastAction, ToastType } from '../store/actions/baseBoard';\r\nimport InputValidator from '../../utils/InputValidator';\r\nimport { ApiUrl } from '../apiUrl';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\r\n}\r\nexport interface IEvent {\r\n\tonClosePanel: () => void\r\n\tdoneHandler: () => void\r\n}\r\n\r\n@ccclass('Hall_ChangePassword')\r\nexport class Hall_ChangePassword extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() {\r\n\r\n\t}\r\n\r\n\tprotected propertyNode = {\r\n\t\tprops_btn_spr_change_close: new Button(),\r\n\t\tprops_btn_sure: new Button(),\r\n\t\t/**旧密码 */\r\n\t\tprops_intput_sandiL: new EditBox(),\r\n\t\t/**新密码 */\r\n\t\tprops_intput_sandiB: new EditBox(),\r\n\t\t/**密码确认 */\r\n\t\tprops_intput_kSandi: new EditBox()\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\tonClosePanel: () => { },\r\n\t\tdoneHandler: () => { }\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\t\tthis.propertyNode.props_btn_spr_change_close.node.on(Node.EventType.TOUCH_END, () => {\r\n\t\t\tthis.events.onClosePanel()\r\n\t\t})\r\n\t\t// 确认\r\n\t\tthis.propertyNode.props_btn_sure.node.on(Node.EventType.TOUCH_END, () => {\r\n\t\t\tconst oldPwd = this.propertyNode.props_intput_sandiL.string.trim()\r\n\t\t\tconst newPwd = this.propertyNode.props_intput_sandiB.string.trim()\r\n\t\t\tconst newPwd_re = this.propertyNode.props_intput_kSandi.string.trim()\r\n\t\t\tif (newPwd !== newPwd_re) {\r\n\t\t\t\tglobal.hallDispatch(addToastAction({ content: lang.write(k => k.HallModule.pwdRepetitionError, {}, { placeStr: \"两次输入的密码不一致\" }), type: ToastType.ERROR }))\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tnew InputValidator().begin().isChartLength([6, 30], oldPwd).isChartLength([6, 30], newPwd).isChartLength([6, 30], newPwd_re).done(() => {\r\n\t\t\t\tfetcher.send(ApiUrl.RESET_PASSWORD, {\r\n\t\t\t\t\tpassword: newPwd, oldPassword: oldPwd\r\n\t\t\t\t}).then((data) => {\r\n\t\t\t\t\t//操作成功\r\n\t\t\t\t\tglobal.hallDispatch(addToastAction({ content: lang.write(k => k.BindPhoneModule.BindPhoneChange, {}, { placeStr: \"操作成功\" }), type: ToastType.SUCCESS }))\r\n\t\t\t\t\tthis.events.doneHandler()\r\n\t\t\t\t}).catch((e) => {\r\n\t\t\t\t\tconsole.log(e)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}
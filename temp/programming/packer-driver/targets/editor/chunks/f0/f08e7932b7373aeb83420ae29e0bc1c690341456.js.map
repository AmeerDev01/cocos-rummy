{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/starlight/viewModel/HeaderViewModel.ts"],"names":["ViewModel","StoreInject","getStore","SoundPathDefine","EffectType","BaseViewModel","starlight_Audio","sourceManageSeletor","PrefabPathDefine","HeaderViewModel","constructor","begin","setEvent","openHelpPanel","playOneShot","BUTTONCLICK","helpPanelPanel","mountView","getFile","INTRODUCE","source","appendTo","viewNode","parent","effectType","EFFECT1","isModal","setProps","ante","comp","props","bettingInformation","bet","closeHandler","unMount","connect","inject","state","balance","game","isRollEnd","roller","roundAllEnd"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACOA,MAAAA,S;AAAaC,MAAAA,W,iBAAAA,W;;AAIXC,MAAAA,Q,iBAAAA,Q;;AACAC,MAAAA,e,iBAAAA,e;;AACAC,MAAAA,U,iBAAAA,U;;AACFC,MAAAA,a;;AACEC,MAAAA,e,iBAAAA,e;AAAiBC,MAAAA,mB,iBAAAA,mB;;AAEjBC,MAAAA,gB,iBAAAA,gB;;;;;;;;;AAEHC,MAAAA,e,WADL;AAAA;AAAA,sCAAY;AAAA;AAAA,iCAAZ,C,gBAAD,MACMA,eADN;AAAA;AAAA,kCAC0E;AACxEC,QAAAA,WAAW,GAAG;AACZ,gBAAM,kBAAN;AACD;;AAESC,QAAAA,KAAK,GAAG;AAChB,eAAKC,QAAL,CAAc;AACZC,YAAAA,aAAa,EAAE,MAAM;AACnB;AAAA;AAAA,sDAAgBC,WAAhB,CAA4B;AAAA;AAAA,sDAAgBC,WAA5C;AACA,kBAAIC,cAAc,GAAG;AAAA;AAAA,kDAAkE,qBAAlE,EAAyFC,SAAzF,CAAmG;AAAA;AAAA,gEAAsBC,OAAtB,CAA8B;AAAA;AAAA,wDAAiBC,SAA/C,EAA0DC,MAA7J,EAClBC,QADkB,CACT,KAAKC,QAAL,CAAcC,MADL,EACa;AAAEC,gBAAAA,UAAU,EAAE;AAAA;AAAA,8CAAWC,OAAzB;AAAkCC,gBAAAA,OAAO,EAAE;AAA3C,eADb,EACgEC,QADhE,CACyE;AAAEC,gBAAAA,IAAI,EAAE,KAAKC,IAAL,CAAUC,KAAV,CAAgBC,kBAAhB,CAAmCC;AAA3C,eADzE,EAC0HpB,QAD1H,CACmI;AACpJqB,gBAAAA,YAAY,EAAE,MAAM;AAClBjB,kBAAAA,cAAc,CAACkB,OAAf,CAAuB;AAAA;AAAA,gDAAWT,OAAlC;AACD;AAHmJ,eADnI,CAArB;AAMD;AATW,WAAd;AAWD;;AAEMU,QAAAA,OAAO,GAAG;AACf;AACA,eAAKC,MAAL,CAAY,EAAZ,EAAkBC,KAAD,IAAsB;AACrC;AACA,mBAAO;AACLC,cAAAA,OAAO,EAAED,KAAK,CAACE,IAAN,CAAWD,OADf;AAELE,cAAAA,SAAS,EAAEH,KAAK,CAACI,MAAN,CAAaC,WAFnB;AAGLX,cAAAA,kBAAkB,EAAEM,KAAK,CAACE,IAAN,CAAWR;AAH1B,aAAP;AAKD,WAPD;AAQA,iBAAO,IAAP;AACD;;AA9BuE,O;;yBAiC3DtB,e","sourcesContent":["import { Node } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { Starlight_Header, IProps, IEvent } from \"../components/Starlight_Header\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport dataTransfer, { DataKeyType } from \"../dataTransfer\"\r\nimport { getStore } from \"../store\"\r\nimport { SoundPathDefine } from \"../sourceDefine/soundDefine\"\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\"\r\nimport BaseViewModel from \"../../../common/viewModel/BaseViewModel\"\r\nimport { starlight_Audio, sourceManageSeletor } from \"../index\"\r\nimport { Starlight_HelpPanel, IProps as FIProps, IState as FIState, IEvent as FIEvent } from \"../components/Starlight_HelpPanel\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\n@StoreInject(getStore())\r\nclass HeaderViewModel extends ViewModel<Starlight_Header, IProps, IEvent> {\r\n  constructor() {\r\n    super('Starlight_Header')\r\n  }\r\n\r\n  protected begin() { \r\n    this.setEvent({\r\n      openHelpPanel: () => {\r\n        starlight_Audio.playOneShot(SoundPathDefine.BUTTONCLICK)\r\n        let helpPanelPanel = new BaseViewModel<Starlight_HelpPanel, FIState, FIProps, FIEvent>(\"Starlight_HelpPanel\").mountView(sourceManageSeletor().getFile(PrefabPathDefine.INTRODUCE).source)\r\n          .appendTo(this.viewNode.parent, { effectType: EffectType.EFFECT1, isModal: true }).setProps({ ante: this.comp.props.bettingInformation.bet}).setEvent({\r\n            closeHandler: () => {\r\n              helpPanelPanel.unMount(EffectType.EFFECT1)\r\n            }\r\n          })\r\n      },\r\n    })\r\n  }\r\n\r\n  public connect() {\r\n    // console.log('inject', dataTransfer(DataKeyType.BALANCE))\r\n    this.inject({ }, (state: StateType) => {\r\n      // console.log('state.game.balance', state.game.balance)\r\n      return {\r\n        balance: state.game.balance,\r\n        isRollEnd: state.roller.roundAllEnd,\r\n        bettingInformation: state.game.bettingInformation,\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default HeaderViewModel\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/utils/fastEqual/index.ts"],"names":["createCustomEqual","options","circular","createInternalComparator","createCustomInternalComparator","createState","strict","config","comparator","equals","createEqualityComparatorConfig","createEqualityComparator","createInternalEqualityComparator","createIsEqual","sameValueZeroEqual","deepEqual","strictDeepEqual","circularDeepEqual","strictCircularDeepEqual","shallowEqual","strictShallowEqual","circularShallowEqual","strictCircularShallowEqual"],"mappings":";;;;;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,WAASA,iBAAT,CACLC,OAAwC,GAAG,EADtC,EAEL;AACA,UAAM;AACJC,MAAAA,QAAQ,GAAG,KADP;AAEJC,MAAAA,wBAAwB,EAAEC,8BAFtB;AAGJC,MAAAA,WAHI;AAIJC,MAAAA,MAAM,GAAG;AAJL,QAKFL,OALJ;AAOA,UAAMM,MAAM,GAAG;AAAA;AAAA,0EAAqCN,OAArC,CAAf;AACA,UAAMO,UAAU,GAAG;AAAA;AAAA,8DAAyBD,MAAzB,CAAnB;AACA,UAAME,MAAM,GAAGL,8BAA8B,GACzCA,8BAA8B,CAACI,UAAD,CADW,GAEzC;AAAA;AAAA,8EAAiCA,UAAjC,CAFJ;AAIA,WAAO;AAAA;AAAA,wCAAc;AAAEN,MAAAA,QAAF;AAAYM,MAAAA,UAAZ;AAAwBH,MAAAA,WAAxB;AAAqCI,MAAAA,MAArC;AAA6CH,MAAAA;AAA7C,KAAd,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;+BAjBeN,iB;;;;;;;;AA5EdU,MAAAA,8B,iBAAAA,8B;AACAC,MAAAA,wB,iBAAAA,wB;AACAC,MAAAA,gC,iBAAAA,gC;AACAC,MAAAA,a,iBAAAA,a;;AAGOC,MAAAA,kB,iBAAAA,kB;;;;;;;;;;;;;;;oCAEAA,kB;;AAGT;AACA;AACA;2BACaC,S,GAAYf,iBAAiB,E;AAE1C;AACA;AACA;;;iCACagB,e,GAAkBhB,iBAAiB,CAAC;AAAEM,QAAAA,MAAM,EAAE;AAAV,OAAD,C;AAEhD;AACA;AACA;;;mCACaW,iB,GAAoBjB,iBAAiB,CAAC;AAAEE,QAAAA,QAAQ,EAAE;AAAZ,OAAD,C;AAElD;AACA;AACA;AACA;;;yCACagB,uB,GAA0BlB,iBAAiB,CAAC;AACvDE,QAAAA,QAAQ,EAAE,IAD6C;AAEvDI,QAAAA,MAAM,EAAE;AAF+C,OAAD,C;AAKxD;AACA;AACA;;;8BACaa,Y,GAAenB,iBAAiB,CAAC;AAC5CG,QAAAA,wBAAwB,EAAE;AAAA;AAAA;AADkB,OAAD,C;AAI7C;AACA;AACA;;;oCACaiB,kB,GAAqBpB,iBAAiB,CAAC;AAClDM,QAAAA,MAAM,EAAE,IAD0C;AAElDH,QAAAA,wBAAwB,EAAE;AAAA;AAAA;AAFwB,OAAD,C;AAKnD;AACA;AACA;;;sCACakB,oB,GAAuBrB,iBAAiB,CAAC;AACpDE,QAAAA,QAAQ,EAAE,IAD0C;AAEpDC,QAAAA,wBAAwB,EAAE;AAAA;AAAA;AAF0B,OAAD,C;AAKrD;AACA;AACA;AACA;;;4CACamB,0B,GAA6BtB,iBAAiB,CAAC;AAC1DE,QAAAA,QAAQ,EAAE,IADgD;AAE1DC,QAAAA,wBAAwB,EAAE;AAAA;AAAA,oDAFgC;AAG1DG,QAAAA,MAAM,EAAE;AAHkD,OAAD,C","sourcesContent":["import {\r\n  createEqualityComparatorConfig,\r\n  createEqualityComparator,\r\n  createInternalEqualityComparator,\r\n  createIsEqual,\r\n} from './comparator';\r\nimport type { CustomEqualCreatorOptions } from './internalTypes';\r\nimport { sameValueZeroEqual } from './utils';\r\n\r\nexport { sameValueZeroEqual };\r\nexport * from './internalTypes';\r\n\r\n/**\r\n * Whether the items passed are deeply-equal in value.\r\n */\r\nexport const deepEqual = createCustomEqual();\r\n\r\n/**\r\n * Whether the items passed are deeply-equal in value based on strict comparison.\r\n */\r\nexport const strictDeepEqual = createCustomEqual({ strict: true });\r\n\r\n/**\r\n * Whether the items passed are deeply-equal in value, including circular references.\r\n */\r\nexport const circularDeepEqual = createCustomEqual({ circular: true });\r\n\r\n/**\r\n * Whether the items passed are deeply-equal in value, including circular references,\r\n * based on strict comparison.\r\n */\r\nexport const strictCircularDeepEqual = createCustomEqual({\r\n  circular: true,\r\n  strict: true,\r\n});\r\n\r\n/**\r\n * Whether the items passed are shallowly-equal in value.\r\n */\r\nexport const shallowEqual = createCustomEqual({\r\n  createInternalComparator: () => sameValueZeroEqual,\r\n});\r\n\r\n/**\r\n * Whether the items passed are shallowly-equal in value based on strict comparison\r\n */\r\nexport const strictShallowEqual = createCustomEqual({\r\n  strict: true,\r\n  createInternalComparator: () => sameValueZeroEqual,\r\n});\r\n\r\n/**\r\n * Whether the items passed are shallowly-equal in value, including circular references.\r\n */\r\nexport const circularShallowEqual = createCustomEqual({\r\n  circular: true,\r\n  createInternalComparator: () => sameValueZeroEqual,\r\n});\r\n\r\n/**\r\n * Whether the items passed are shallowly-equal in value, including circular references,\r\n * based on strict comparison.\r\n */\r\nexport const strictCircularShallowEqual = createCustomEqual({\r\n  circular: true,\r\n  createInternalComparator: () => sameValueZeroEqual,\r\n  strict: true,\r\n});\r\n\r\n/**\r\n * Create a custom equality comparison method.\r\n *\r\n * This can be done to create very targeted comparisons in extreme hot-path scenarios\r\n * where the standard methods are not performant enough, but can also be used to provide\r\n * support for legacy environments that do not support expected features like\r\n * `RegExp.prototype.flags` out of the box.\r\n */\r\nexport function createCustomEqual<Meta = undefined>(\r\n  options: CustomEqualCreatorOptions<Meta> = {},\r\n) {\r\n  const {\r\n    circular = false,\r\n    createInternalComparator: createCustomInternalComparator,\r\n    createState,\r\n    strict = false,\r\n  } = options;\r\n\r\n  const config = createEqualityComparatorConfig<Meta>(options);\r\n  const comparator = createEqualityComparator(config);\r\n  const equals = createCustomInternalComparator\r\n    ? createCustomInternalComparator(comparator)\r\n    : createInternalEqualityComparator(comparator);\r\n\r\n  return createIsEqual({ circular, comparator, createState, equals, strict });\r\n}\r\n"]}
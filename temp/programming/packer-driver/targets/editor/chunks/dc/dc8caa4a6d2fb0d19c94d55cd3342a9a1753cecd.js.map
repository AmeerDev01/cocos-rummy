{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/base/SourceManage.ts"],"names":["SourceManage","assetManager","DEV","loopFiles","bundlePkgName","sourceType","defineList","_arr","key","push","path","source","isPreLoad","substring","constructor","bundle","fileMap","num","isStop","stopPreLoad","preLoadAllFiles1","progressHandler","done","logLabel","_fileMap","file","load","err2","asset","length","string","console","error","name","getFileAsync","filePath","Promise","resolve","reject","sourceFile","getFile","loadBundle","err","_bundle","log","result","find","undefined","getSourceFile","get"],"mappings":"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","sourcesContent":["import { Asset, AssetManager, Label, __private, assetManager, instantiate, log } from \"cc\"\r\nimport { DEV } from \"cc/env\"\r\nexport interface ISourceFile {\r\n  bundlePkgName: string,\r\n  path: string,\r\n  sourceType: __private._types_globals__Constructor<Asset>,\r\n  source: any,\r\n  isPreLoad: boolean\r\n}\r\n\r\n\r\n/**将枚举的文件转换为ISourceFile的列表 */\r\nexport const loopFiles = (bundlePkgName: string, sourceType: __private._types_globals__Constructor<Asset>, defineList: any) => {\r\n  const _arr: ISourceFile[] = []\r\n  for (let key in defineList) {\r\n    _arr.push({\r\n      bundlePkgName,\r\n      path: defineList[key],\r\n      sourceType,\r\n      source: null,\r\n      isPreLoad: key.substring(0, 1) === \"_\" && !DEV ? false : true\r\n    })\r\n  }\r\n  return _arr\r\n}\r\n\r\n// export const loopFilesDir = (bundlePkgName: string, sourceType: __private._types_globals__Constructor<Asset>, dirPath: string) => {\r\n//   const _arr: ISourceFile[] = []\r\n//   for (let key in defineList) {\r\n//     _arr.push({\r\n//       bundlePkgName,\r\n//       path: defineList[key],\r\n//       sourceType,\r\n//       source: null\r\n//     })\r\n//   }\r\n//   return _arr\r\n// }\r\n\r\n/**保存了一组资源的类，具备预加载，获取单个文件的能力 */\r\nexport default class SourceManage {\r\n  constructor(bundle: AssetManager.Bundle, fileMap: ISourceFile[]) {\r\n    this.fileMap = fileMap\r\n    this.bundle = bundle\r\n    this.num = 0\r\n  }\r\n  public bundle: AssetManager.Bundle\r\n  private fileMap: ISourceFile[]\r\n  private num: number = 0\r\n  private isStop: boolean = false\r\n\r\n  public stopPreLoad() {\r\n    this.isStop = true\r\n  }\r\n  public preLoadAllFiles1(progressHandler: (total: number, doneCount: number, sourceFileloading: ISourceFile | null) => void, done: () => void, logLabel: Label) {\r\n    const _fileMap = this.fileMap\r\n    const file = _fileMap[this.num]\r\n    if (file) {\r\n      // logLabel.string += `=>开始${file.path}`\r\n      // assetManager.loadBundle(file.bundlePkgName, (err, _bundle) => {\r\n      // logLabel.string += `=>bundlePkgName（${err}）`\r\n      // if (!err) {\r\n      // console.log(this.bundle.name, file.path)\r\n      this.bundle.load(file.path, file.sourceType, (err2, asset) => {\r\n        // logLabel.string += `=>load${err2}）`\r\n        if (!err2) {\r\n          file.source = asset\r\n          this.num++\r\n          // console.log(this.fileMap.length, this.num, this)\r\n          progressHandler(_fileMap.length, this.num, file)\r\n          // logLabel.string += `=>完成${file.path}`\r\n          if (!this.isStop) {\r\n            this.preLoadAllFiles1(progressHandler, done, logLabel)\r\n          } else {\r\n            this.isStop = false\r\n          }\r\n        } else {\r\n          logLabel.string += `资源加载错误:${file.path}`\r\n          console.error(`加载资源错误：${this.bundle.name}-${file.path}`)\r\n        }\r\n      })\r\n      // }\r\n      // })\r\n    } else {\r\n      done()\r\n    }\r\n  }\r\n\r\n  /**预加载所有的文件 */\r\n  // public preLoadAllFiles(progressHandler: (\r\n  //   total: number, remain: number,\r\n  //   sourceFileloading: ISourceFile | null) => void) {\r\n  //   return new Promise((resolve, reject) => {\r\n  //     const fileCount = this.fileMap.length\r\n  //     let remainLoadCount = this.fileMap.length\r\n  //     this.fileMap.forEach((file, index) => {\r\n  //       console.log('Load the local manifest lose ...', index);\r\n  //       assetManager.loadBundle(file.bundlePkgName, (err, _bundle) => {\r\n  //         if (!err) {\r\n  //           _bundle.load(file.path, file.sourceType, (err, asset) => {\r\n  //             if (!err) {\r\n  //               file.source = asset\r\n  //               // console.log(`文件${file.path}已读取`)\r\n  //             } else {\r\n  //               console.error(`文件<${file.path}>错误或未找到：${err}`)\r\n  //               reject(`文件<${file.path}>错误或未找到：${err}`)\r\n  //             }\r\n  //             remainLoadCount--\r\n  //             progressHandler(fileCount, remainLoadCount, file)\r\n  //             if (remainLoadCount === 0) {\r\n  //               resolve(true)\r\n  //             }\r\n  //           })\r\n  //         } else {\r\n  //           console.log(`bundle包<${file.bundlePkgName}>错误或未找到：${err}`);\r\n  //           reject(`bundle包<${file.bundlePkgName}>错误或未找到：${err}`)\r\n  //         }\r\n  //       })\r\n  //     })\r\n  //   })\r\n\r\n  // }\r\n\r\n  public getFileAsync(filePath: string, sourceType: __private._types_globals__Constructor<Asset>): Promise<ISourceFile> {\r\n    return new Promise((resolve, reject) => {\r\n      const sourceFile = this.getFile(filePath)\r\n      sourceFile && resolve(sourceFile)\r\n      assetManager.loadBundle(this.bundle.name, (err, _bundle) => {\r\n        if (!err) {\r\n          _bundle.load(filePath, sourceType, (err, asset) => {\r\n            if (err) {\r\n              reject(err)\r\n            } else {\r\n              resolve({\r\n                bundlePkgName: this.bundle.name,\r\n                path: filePath,\r\n                sourceType,\r\n                source: asset,\r\n                isPreLoad: false\r\n              })\r\n            }\r\n          })\r\n        } else {\r\n          console.log(`bundle包<${filePath}>错误或未找到：${err}`);\r\n          reject(`bundle包<${filePath}>错误或未找到：${err}`)\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  public getFile(filePath: string): ISourceFile | undefined {\r\n    const result: ISourceFile | undefined = this.fileMap.find(file => file.path === filePath)\r\n    if (!result) {\r\n      // console.log(`No file found：${this.bundle.name}/${filePath}`)\r\n      return undefined\r\n    }\r\n    return result\r\n  }\r\n\r\n  public getSourceFile(filePath: string): any {\r\n    return this.bundle.get(filePath)\r\n  }\r\n}"]}
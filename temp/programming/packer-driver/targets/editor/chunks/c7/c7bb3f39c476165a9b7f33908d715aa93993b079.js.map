{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/fruit777/components/Fruit777_RollerIcon.ts"],"names":["_decorator","instantiate","Label","Node","sp","Sprite","UITransform","Vec3","BaseComponent","IconEffectType","sourceManageSeletor","ccclass","property","Fruit777_RollerIcon","propertyNode","props_iconWrap","props_iconId","props_index","props_focusBorder","props","iconData","iconEffect","NONE","events","iconNodeSkeleton_copy","start","initState","bindEvent","useProps","key","value","uiTrasform","node","getComponent","width","height","iconNodeSkeleton","getChildByName","iconNodeSprite","active","iconNode","spriteFrame","getFile","uiData","fileName","source","setScale","scale","LargeIcon","x","y","z","getPosition","setPosition","distance","string","iconId","queueIndex","isActive","cur","NORMAIL","destroy","parent","name","Skeleton","skeletonData","skeleton","animation","animationArr","bindUI","setAnimationCacheMode","AnimationCacheMode","REALTIME","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, debug, instantiate, Label, Node, Skeleton, sp, Sprite, UITransform, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nimport { IconEffectType, IconType } from '../type';\r\nimport { sourceManageSeletor } from '../index';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\ticonData?: IconType\r\n\t/**将这个属性单拎出来，节约性能，不然每次都要重新初始化icon的界面 */\r\n\ticonEffect?: IconEffectType\r\n}\r\nexport interface IEvent {\r\n\r\n}\r\n\r\n@ccclass('Fruit777_RollerIcon')\r\nexport class Fruit777_RollerIcon extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() { }\r\n\r\n\tprotected propertyNode = {\r\n\t\tprops_iconWrap: new Node(),\r\n\t\tprops_iconId: new Label(),\r\n\t\tprops_index: new Label(),\r\n\t\tprops_focusBorder: new Node()\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\t\ticonData: null,\r\n\t\ticonEffect: IconEffectType.NONE\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\r\n\t}\r\n\tprivate iconNodeSkeleton_copy: Node\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\t\tif (key === \"iconData\") {\r\n\t\t\tconst uiTrasform = this.node.getComponent(UITransform)\r\n\t\t\tuiTrasform.width = this.props.iconData.width\r\n\t\t\tuiTrasform.height = this.props.iconData.height\r\n\t\t\tconst iconNodeSkeleton = this.propertyNode.props_iconWrap.getChildByName(\"iconNode_skeleton\")\r\n\t\t\tconst iconNodeSprite = this.propertyNode.props_iconWrap.getChildByName(\"iconNode_sprite\")\r\n\t\t\ticonNodeSkeleton.active = false\r\n\t\t\ticonNodeSprite.active = false\r\n\r\n\t\t\tlet iconNode: Node\r\n\t\t\ticonNode = iconNodeSprite\r\n\t\t\ticonNodeSprite.active = true\r\n\t\t\ticonNodeSprite.getComponent(Sprite).spriteFrame = sourceManageSeletor().getFile(this.props.iconData.uiData.fileName).source\r\n\t\t\t// if (this.props.iconData.LargeIcon) {\r\n\t\t\t// \ticonNode = iconNodeSprite\r\n\t\t\t// \ticonNodeSprite.active = true\r\n\t\t\t// \ticonNodeSprite.getComponent(Sprite).spriteFrame = sourceManageSeletor().getFile(this.props.iconData.uiData.fileName).source\r\n\t\t\t// } else {\r\n\t\t\t// \ticonNode = iconNodeSkeleton\r\n\t\t\t// \ticonNodeSkeleton.active = true\r\n\t\t\t// \ticonNodeSkeleton.getComponent(sp.Skeleton).skeletonData = sourceManageSeletor().getFile(this.props.iconData.uiData.fileName).source\r\n\t\t\t// \ticonNodeSkeleton.getComponent(sp.Skeleton).animation = this.props.iconData.uiData.animationArr[0]\r\n\t\t\t// }\r\n\r\n\t\t\t// if (!this.props.iconData.LargeIcon) {\r\n\t\t\t// \ticonNodeSkeleton.getComponent(sp.Skeleton).skeletonData = sourceManageSeletor().getFile(this.props.iconData.uiData.skeleton).source\r\n\t\t\t// \ticonNodeSkeleton.getComponent(sp.Skeleton).animation = this.props.iconData.uiData.animationArr[0]\r\n\t\t\t// }\r\n\t\t\ticonNode.setScale(new Vec3(...this.props.iconData.uiData.scale))\r\n\t\t\tif (this.props.iconData.LargeIcon) {\r\n\t\t\t\tconst { x, y, z } = iconNode.getPosition()\r\n\t\t\t\ticonNode.setPosition(new Vec3(x + this.props.iconData.uiData.distance[0], y + this.props.iconData.uiData.distance[1], x))\r\n\t\t\t}\r\n\t\t\tthis.propertyNode.props_iconId.string = this.props.iconData.iconId + \"\"\r\n\t\t\tthis.propertyNode.props_index.string = this.props.iconData.queueIndex + \"\"\r\n\r\n\t\t}\r\n\t\tif (key === \"iconEffect\") {\r\n\t\t\t//闪动框\r\n\t\t\tconst iconNodeSkeleton = this.propertyNode.props_iconWrap.getChildByName(\"iconNode_skeleton\")\r\n\t\t\tconst iconNodeSprite = this.propertyNode.props_iconWrap.getChildByName(\"iconNode_sprite\")\r\n\t\t\tconst isActive = (value.cur === IconEffectType.NORMAIL && !this.props.iconData.LargeIcon)\r\n\t\t\tthis.propertyNode.props_focusBorder.active = isActive\r\n\r\n\t\t\tif (!this.props.iconData.LargeIcon) {\r\n\t\t\t\ticonNodeSprite.active = !isActive\r\n\t\t\t\t// iconNodeSkeleton.active = isActive\r\n\r\n\t\t\t\tif (this.props.iconEffect === IconEffectType.NONE) {\r\n\t\t\t\t\tif (this.iconNodeSkeleton_copy) {\r\n\t\t\t\t\t\tthis.iconNodeSkeleton_copy.destroy()\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.iconNodeSkeleton_copy = this.propertyNode.props_iconWrap.getChildByName(\"iconNode_skeleton_copy\")\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.iconNodeSkeleton_copy = instantiate(iconNodeSkeleton)\r\n\t\t\t\t\tthis.iconNodeSkeleton_copy.parent = this.node\r\n\t\t\t\t\tthis.iconNodeSkeleton_copy.active = true\r\n\t\t\t\t\tthis.iconNodeSkeleton_copy.name = \"iconNode_skeleton_copy\"\r\n\t\t\t\t\tthis.iconNodeSkeleton_copy.getComponent(sp.Skeleton).skeletonData = sourceManageSeletor().getFile(this.props.iconData.uiData.skeleton).source\r\n\t\t\t\t\tthis.iconNodeSkeleton_copy.getComponent(sp.Skeleton).animation = this.props.iconData.uiData.animationArr[1]\r\n\t\t\t\t\tconst { x, y, z } = this.iconNodeSkeleton_copy.getPosition()\r\n\t\t\t\t\tthis.iconNodeSkeleton_copy.setPosition(new Vec3(x + this.props.iconData.uiData.distance[0], y + this.props.iconData.uiData.distance[1], x))\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\t// iconNodeSkeleton.getComponent(sp.Skeleton).updateRenderer()\r\n\t\t\t// console.log(this.props.iconData.iconId, this.props.iconData.uiData.skeleton, this.props.iconData.uiData.animationArr)\r\n\t\t\t// iconNodeSkeleton.getComponent(sp.Skeleton).animation = this.props.iconData.uiData.animationArr[isActive ? 1 : 0]\r\n\r\n\r\n\t\t}\r\n\t\t// if (key === \"iconEffect\") {\r\n\t\t// \t//闪动框\r\n\t\t// \tconst iconNodeSkeleton = this.propertyNode.props_iconWrap.getChildByName(\"iconNode_skeleton\")\r\n\t\t// \tconst iconNodeSprite = this.propertyNode.props_iconWrap.getChildByName(\"iconNode_sprite\")\r\n\t\t// \tconst isActive = (value.cur === IconEffectType.NORMAIL && !this.props.iconData.LargeIcon)\r\n\t\t// \tif (!this.props.iconData.LargeIcon) {\r\n\t\t// \t\ticonNodeSprite.active = !isActive\r\n\t\t// \t\ticonNodeSkeleton.active = isActive\r\n\t\t// \t}\r\n\t\t// \tthis.propertyNode.props_focusBorder.active = isActive\r\n\t\t// \ticonNodeSkeleton.getComponent(sp.Skeleton).updateRenderer()\r\n\r\n\t\t// \tconsole.log(this.props.iconData.iconId, this.props.iconData.uiData.skeleton, this.props.iconData.uiData.animationArr)\r\n\t\t// \ticonNodeSkeleton.getComponent(sp.Skeleton).animation = this.props.iconData.uiData.animationArr[isActive ? 1 : 0]\r\n\t\t// \tconst { x, y, z } = iconNodeSkeleton.getPosition()\r\n\t\t// \ticonNodeSkeleton.setPosition(new Vec3(x + this.props.iconData.uiData.distance[0], y + this.props.iconData.uiData.distance[1], x))\r\n\t\t// }\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\t\tthis.propertyNode.props_iconWrap.getChildByName(\"iconNode_skeleton\").getComponent(sp.Skeleton).setAnimationCacheMode(sp.Skeleton.AnimationCacheMode.REALTIME)\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}
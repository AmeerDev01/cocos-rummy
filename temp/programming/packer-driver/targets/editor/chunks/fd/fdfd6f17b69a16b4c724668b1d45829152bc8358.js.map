{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/phoenix/Slot/Command/BaseCommand.ts"],"names":["BaseCommand","Command","listExecute","execute","notification","listenr","find","item","type","getType","payload","handler","bind","undefined","sendNotification","e","console","error"],"mappings":";;;uCAWaA,W;;;;;;;;;;;;;;;;;;AAVNC,MAAAA,O;;;;;;;6BAUMD,W,GAAN,MAAMA,WAAN;AAAA;AAAA,8BAAkC;AAAA;AAAA;AAAA,eAC3BE,WAD2B;AAAA;;AAG9BC,QAAAA,OAAO,CAACC,YAAD,EAAoC;AAC9C;AACA,gBAAMC,OAAO,GAAG,KAAKH,WAAL,CAAiBI,IAAjB,CAAsBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcJ,YAAY,CAACK,OAAb,EAA5C,CAAhB;AACA,cAAIC,OAAO,GAAG,IAAd;;AACA,cAAIL,OAAJ,EAAa;AACT,gBAAI;AACZK,cAAAA,OAAO,GAAGL,OAAO,CAACM,OAAR,CAAgBC,IAAhB,CAAqB,IAArB,EAA2BR,YAA3B,CAAV;;AACA,kBAAIM,OAAO,KAAKG,SAAhB,EAA2B;AAC1B,qBAAKC,gBAAL,CAAsBV,YAAY,CAACK,OAAb,EAAtB,EAA8CC,OAA9C;AACA;AACD,aALQ,CAMT,OAAOK,CAAP,EAAU;AACTC,cAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA;AACK;AACJ;;AAlBoC,O","sourcesContent":["import {INotification} from \"../../Framework/interfaces/INotification\";\r\nimport Command from \"../../Framework/patterns/command/Command\";\r\n\r\nexport interface IListExecute<O> {\r\n    type: string\r\n    isListen?: boolean\r\n\r\n    /**返回payload，会作为负载发送到mediator，唯独payload=undefined，即无return，在函数执行完之后不会自动发送至Mediator */\r\n    handler(this: O, notification: INotification): any\r\n}\r\n\r\nexport class BaseCommand extends Command {\r\n    protected listExecute: Array<IListExecute<BaseCommand>>\r\n\r\n    public execute(notification: INotification): void {\r\n        //处理完之后再将type转换为name为mediator发送通知\r\n        const listenr = this.listExecute.find(item => item.type === notification.getType())\r\n        let payload = null\r\n        if (listenr) {\r\n            try {\r\n\t\t\t\tpayload = listenr.handler.bind(this)(notification)\r\n\t\t\t\tif (payload !== undefined) {\r\n\t\t\t\t\tthis.sendNotification(notification.getType(), payload)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcatch (e) {\r\n\t\t\t\tconsole.error(e)\r\n\t\t\t}\r\n        }\r\n    }\r\n\r\n}\r\n"]}
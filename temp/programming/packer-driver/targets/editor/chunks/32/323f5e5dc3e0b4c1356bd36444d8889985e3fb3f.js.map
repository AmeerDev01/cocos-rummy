{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/thor/viewModel/GameBoardViewModel.ts"],"names":["Game","game","instantiate","sp","sys","ViewModel","StoreInject","SKT_MAG_TYPE","sktInstance","sktMsgListener","config","AutoLauncherType","GameType","RollerPanelViewModel","NORMAL_MAG_TYPE","thor_Audio","msgListener","sourceManageSeletor","PrefabPathDefine","changeAutoLauncherType","changeCurrGameType","changeGame","changeGameFreeGametotalMultiplier","changeProfit","changeViewGame","resetStore","setAutoLaunchedTimes","setSubGameTimes","updateBalance","updateSubGameTimes","getStore","dataTransfer","DataKeyType","setData","Task","TaskSchedulerDefault","EffectType","setRollRoundEnd","SoundPathDefine","global","lang","addToastAction","SkeletonAnimationPlayer","GameBoardViewModel","constructor","timer","currentGameViewModel","changeGameTypeTask","flyFruitNode","currGameType","NONE","begin","on","EVENT_HIDE","Date","getTime","EVENT_SHOW","differenceInSeconds","console","log","hallDispatch","content","write","k","WebSocketModule","socketConnectDisconnect","placeStr","closeSubGame","dispatch","addOnce","AUTH","data","gameType","coinsBeforeBetting","freeGameCount","freeGameCoins","BALANCE","SUBGAME_TIMES","lessGodFreeGameMultiple","dispath","CHANGE_GAME","MAIN","FREE_GAME_AMOUNT","localStorage","setItem","JSON","stringify","mountView","getFile","MAIN_GAME","source","appendTo","comp","getGameNode","effectType","EFFECT_FADE","effectDone","connect","sendSktMessage","token","getItem","gameId","add","BALANCE_UPDATE","VACATETHEROOM","confirmContent","UpdateModule","GameNotice","LAUNCHER_BET","error","NEXTGAME_TYPE","GAME_TYPE","setEvent","changeGameHandler","lastGameType","done","FLY_FRUITS","getChildByName","getComponent","Skeleton","playAnimation","playOneShot","FREE_TRANS","viewNode","addChild","subscribeDone","scheduleOnce","destroy","joinqQueue","unMountCallBack","removeById","inject","state"],"mappings":"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","sourcesContent":["import { Game, Node, game, instantiate, log, sp, sys } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { Thor_GameBoard, IProps, IEvent } from \"../components/Thor_GameBoard\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { SKT_MAG_TYPE, sktInstance, sktMsgListener } from \"../socketConnect\"\r\nimport config from \"../config\"\r\nimport { AutoLauncherType, GameType } from \"../type\"\r\nimport RollerPanelViewModel from \"./RollerPanelViewModel\"\r\nimport { NORMAL_MAG_TYPE, thor_Audio, msgListener, sourceManageSeletor, footerViewModel } from \"../index\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { changeAutoLauncherType, changeCurrGameType, changeGame, changeGameFreeGametotalMultiplier, changeMultipleTotal, changeProfit, changeViewGame, resetStore, setAutoLaunchedTimes, setSubGameTimes, updateBalance, updateJackpotAmount, updateSubGameTimes } from \"../store/actions/game\"\r\nimport { getStore } from \"../store\"\r\nimport LargeRollerPanelViewModel from \"./LargeRollerPanelViewModel\"\r\nimport dataTransfer, { DataKeyType, setData } from \"../dataTransfer\"\r\nimport TaskScheduler, { Task, TaskSchedulerDefault } from \"../../../utils/TaskScheduler\"\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\"\r\nimport { setRollRoundEnd } from \"../store/actions/roller\"\r\nimport { SoundPathDefine } from \"../sourceDefine/soundDefine\"\r\nimport { global, lang } from \"../../../hall\"\r\nimport { addToastAction } from \"../../../hall/store/actions/baseBoard\"\r\nimport SkeletonAnimationPlayer from \"../SkeletonPlay\"\r\n\r\ntype anthInfoType = {\r\n  coinsBeforeBetting: number\r\n  freeGameCoins: number\r\n  freeGameCount: number\r\n  gameType: number\r\n  lv: number\r\n  memberId: string\r\n  tableId: string\r\n  totalFreeGameCount: number\r\n  lessGodFreeGameMultiple: number\r\n}\r\n\r\n\r\n@StoreInject(getStore())\r\nclass GameBoardViewModel extends ViewModel<Thor_GameBoard, IProps, IEvent> {\r\n  private timer\r\n  constructor() {\r\n    super('Thor_GameBoard')\r\n  }\r\n  public currentGameViewModel: ViewModel<any, any, any> = null\r\n  public changeGameTypeTask: Task\r\n  public flyFruitNode: Node\r\n  private currGameType: GameType = GameType.NONE\r\n  protected begin() {\r\n    game.on(Game.EVENT_HIDE, () => {//游戏切入后台\r\n      this.timer=new Date().getTime()\r\n    })\r\n    game.on(Game.EVENT_SHOW, () => {//游戏进入\r\n      let differenceInSeconds =(new Date().getTime() - this.timer) / 1000;\r\n      if (differenceInSeconds > 30) {\r\n        console.log(\"时间超过30 秒↓↓↓↓\");\r\n        global.hallDispatch(addToastAction({ content: lang.write(k =>k.WebSocketModule.socketConnectDisconnect, {}, { placeStr: \"等待超长断开连接\" }) }))\r\n        global.closeSubGame()\r\n      } else {\r\n          console.log(\"时间差不超过 30 秒\");\r\n      }\r\n    })\r\n    this.dispatch(resetStore('')),\r\n    sktMsgListener.addOnce(SKT_MAG_TYPE.AUTH, \"board\", (data: anthInfoType) => {\r\n      this.dispatch(changeGame(data.gameType))\r\n      /**刚刚初始化游戏，需要带入必要的游戏状态 */\r\n      setData(\"balanceAfterSettlement\", data.coinsBeforeBetting)\r\n      setData(\"gameType\", data.gameType)\r\n      setData(\"freeCount\", data.freeGameCount)\r\n      setData(\"freeGameAmount\", data.freeGameCoins)\r\n      this.dispatch(updateBalance(dataTransfer(DataKeyType.BALANCE)))\r\n      this.dispatch(setSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n      this.dispatch(updateSubGameTimes(data.freeGameCount))\r\n      this.dispatch(changeViewGame(data.gameType))\r\n      this.dispatch(changeCurrGameType(data.gameType))\r\n      this.dispatch(changeGameFreeGametotalMultiplier(data.lessGodFreeGameMultiple))\r\n      this.dispatch(changeAutoLauncherType(AutoLauncherType.NONE))\r\n      this.dispatch(setAutoLaunchedTimes(0))\r\n      msgListener.dispath(NORMAL_MAG_TYPE.CHANGE_GAME, { currGameType: data.gameType })\r\n      if (data.gameType && data.gameType !== GameType.MAIN) {\r\n        //非小游戏需要读取盈利状态\r\n        this.dispatch(setRollRoundEnd(false))\r\n        this.dispatch(changeProfit(dataTransfer(DataKeyType.FREE_GAME_AMOUNT)))\r\n      } else {\r\n        this.dispatch(setRollRoundEnd(true))\r\n      }\r\n      sys.localStorage.setItem(\"thor\", JSON.stringify(data))\r\n      // this.dispatch(changeGame(GameType.MAIN))\r\n      this.currentGameViewModel = new RollerPanelViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.MAIN_GAME).source).appendTo(this.comp.getGameNode(), {\r\n        effectType: EffectType.EFFECT_FADE, effectDone: () => {\r\n          // this.dispatch(setRollRoundEnd(true))\r\n        }\r\n      }).connect()\r\n\r\n    })\r\n    sktInstance.sendSktMessage(SKT_MAG_TYPE.AUTH, {\r\n      token: sys.localStorage.getItem(\"token\"),\r\n      // token:\"eyJhbGciOiJIUzI1NiIsInppcCI6IkdaSVAifQ.H4sIAAAAAAAAAE3NQQqCIRAG0LvMWsEZJ_30Bq07geYEBsJPuAiiu0et2r7Ne9FsmyrnwCJghiN7Hl-IkpP-4L4nVYKdkqKIb7F0ryFnjwb243obRVIfqkKOlq1uj_OgihCQwVEc7bnssts6_qcEfX8A47WcnH8AAAA.BMHg1CM1e3sq7gf85rA8oSGxAZ89yxc79UytEiLyEXc\",\r\n      gameId: config.gameId\r\n    })\r\n    // sktMsgListener.add(SKT_MAG_TYPE.JACKPOT, \"board\", (data)currGameType => {\r\n    //   this.dispatch(updateJackpotAmount(data))\r\n    // })\r\n    sktMsgListener.add(SKT_MAG_TYPE.BALANCE_UPDATE, \"board\", (data) => {\r\n      this.dispatch(updateBalance(data))\r\n    })\r\n\r\n    sktMsgListener.add(SKT_MAG_TYPE.VACATETHEROOM, \"board\", (data) => {\r\n      global.closeSubGame({ confirmContent: lang.write(k => k.UpdateModule.GameNotice, {}, { placeStr: \"对不起，系统维护中，请稍后再尝试登录\" }) })\r\n    })\r\n    sktMsgListener.add(SKT_MAG_TYPE.LAUNCHER_BET, \"board\", (data, error) => {\r\n      //console.error(this.currGameType !== dataTransfer(DataKeyType.NEXTGAME_TYPE));\r\n      if (this.currGameType !== dataTransfer(DataKeyType.NEXTGAME_TYPE)) {\r\n        this.currGameType = dataTransfer(DataKeyType.NEXTGAME_TYPE)\r\n        this.dispatch(changeViewGame(dataTransfer(DataKeyType.GAME_TYPE)))\r\n        this.dispatch(changeCurrGameType(dataTransfer(DataKeyType.NEXTGAME_TYPE)))\r\n        this.dispatch(changeGameFreeGametotalMultiplier(0))\r\n        if (dataTransfer(DataKeyType.GAME_TYPE) === GameType.MAIN) {\r\n          this.dispatch(changeProfit(0))\r\n        }\r\n      }\r\n    }, 100)\r\n\r\n    this.setEvent({\r\n      changeGameHandler: (lastGameType, currGameType) => {\r\n        this.changeGameTypeTask = new Task((done) => {\r\n          if (this.currentGameViewModel) {\r\n            // this.dispatch(setRollRoundEnd(true))\r\n            this.flyFruitNode = instantiate(sourceManageSeletor().getFile(PrefabPathDefine.FLY_FRUITS).source)\r\n            new SkeletonAnimationPlayer( this.flyFruitNode.getChildByName('props_sklekton_lightning').getComponent(sp.Skeleton), \"animation\", false, () => {\r\n              done()\r\n            }).playAnimation();\r\n            thor_Audio.playOneShot(SoundPathDefine.FREE_TRANS)\r\n            this.viewNode.addChild(this.flyFruitNode)\r\n          } else {\r\n            done()\r\n          }\r\n        }).subscribeDone('change', () => {\r\n          this.comp.scheduleOnce(()=>{\r\n            this.flyFruitNode && this.flyFruitNode.destroy()\r\n            msgListener.dispath(NORMAL_MAG_TYPE.CHANGE_GAME, { currGameType })\r\n          },1.5)\r\n        })\r\n        // this.changeGameTypeTask.name = \"changeGameTypeTask\"\r\n        if (!this.currentGameViewModel) {\r\n          //初始化的时候才直接执行\r\n          TaskSchedulerDefault().joinqQueue(this.changeGameTypeTask, true)\r\n          // console.log('changeGameTypeTask init')\r\n        }\r\n        msgListener.dispath(NORMAL_MAG_TYPE.CHANGE_GAME, { currGameType })\r\n      }\r\n    })\r\n  }\r\n  protected unMountCallBack(): void {\r\n    sktMsgListener.removeById(\"board\")\r\n  }\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      return {\r\n        gameType: state.game.currGameType,\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default GameBoardViewModel\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/phoenix/Slot/Proxy/LocalCacheDataProxy.ts"],"names":["LocalCacheDataProxy","sys","Proxy","constructor","proxyName","data","localStorage","cache","Map","setLoginData","loginData","setItem","LOGIN_DATA","JSON","stringify","getUserToken","getCache","TOKEN","setUserToken","userToken","setCache","key","get","value","set","INVITE_CODE"],"mappings":";;;2FAGaA,mB;;;;;;;;;;;;;;;AAFLC,MAAAA,G,OAAAA,G;;AADDC,MAAAA,K;;;;;;;;;qCAGMF,mB,GAAN,MAAMA,mBAAN;AAAA;AAAA,0BAAwC;AAQpCG,QAAAA,WAAW,CAACC,SAAiB,GAAG,IAArB,EAA2BC,IAAS,GAAG,IAAvC,EAA6C;AAC3D,gBAAMD,SAAN,EAAiBC,IAAjB;AAD2D,eAHvDC,YAGuD,GAHnC,IAGmC;AAAA,eAFvDC,KAEuD,GAF7B,IAE6B;AAE3D,eAAKD,YAAL,GAAoBL,GAAG,CAACK,YAAxB;AACA,eAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACH;AAED;AACJ;AACA;AACI;AACA;AACA;;AAEA;AACJ;AACA;AACA;;;AACIC,QAAAA,YAAY,CAACC,SAAD,EAAiB;AACzB,eAAKJ,YAAL,CAAkBK,OAAlB,CAA0BX,mBAAmB,CAACY,UAA9C,EAA0DC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAA1D;AACH;AAED;AACJ;AACA;;;AACIK,QAAAA,YAAY,GAAW;AACnB,iBAAO,KAAKC,QAAL,CAAchB,mBAAmB,CAACiB,KAAlC,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIC,QAAAA,YAAY,CAACC,SAAD,EAAY;AACpB,eAAKC,QAAL,CAAcpB,mBAAmB,CAACiB,KAAlC,EAAyCE,SAAzC;AACH;;AAGDH,QAAAA,QAAQ,CAACK,GAAD,EAAmB;AACvB,iBAAO,KAAKd,KAAL,CAAWe,GAAX,CAAeD,GAAf,CAAP;AACH;;AAEDD,QAAAA,QAAQ,CAACC,GAAD,EAAcE,KAAd,EAA0B;AAC9B,eAAKhB,KAAL,CAAWiB,GAAX,CAAeH,GAAf,EAAoBE,KAApB;AACH;;AAnD0C,O;;AAAlCvB,MAAAA,mB,CACFY,U,GAAqB,Y;AADnBZ,MAAAA,mB,CAEFiB,K,GAAgB,O;AAFdjB,MAAAA,mB,CAGFyB,W,GAAsB,a","sourcesContent":["import Proxy from '../../Framework/patterns/proxy/Proxy';\r\nimport {sys} from 'cc';\r\n\r\nexport class LocalCacheDataProxy extends Proxy {\r\n    static LOGIN_DATA: string = \"LOGIN_DATA\";\r\n    static TOKEN: string = \"TOKEN\";\r\n    static INVITE_CODE: string = \"INVITE_CODE\";\r\n\r\n    private localStorage: any = null;\r\n    private cache: Map<string, any> = null;\r\n\r\n    public constructor(proxyName: string = null, data: any = null) {\r\n        super(proxyName, data)\r\n        this.localStorage = sys.localStorage\r\n        this.cache = new Map()\r\n    }\r\n\r\n    /**\r\n     * 获得登录缓存数据\r\n     */\r\n    // getLoginData(): LoginData {\r\n    //     return <LoginData>JSON.parse(this.localStorage.getItem(LocalCacheDataProxy.LOGIN_DATA));\r\n    // }\r\n\r\n    /**\r\n     * 保存登录缓存数据\r\n     * @param {*} loginData\r\n     */\r\n    setLoginData(loginData: any) {\r\n        this.localStorage.setItem(LocalCacheDataProxy.LOGIN_DATA, JSON.stringify(loginData));\r\n    }\r\n\r\n    /**\r\n     * 获得用户TOKEN\r\n     */\r\n    getUserToken(): string {\r\n        return this.getCache(LocalCacheDataProxy.TOKEN);\r\n    }\r\n\r\n    /**\r\n     * 保存用户token\r\n     * @param {*} userToken\r\n     */\r\n    setUserToken(userToken) {\r\n        this.setCache(LocalCacheDataProxy.TOKEN, userToken);\r\n    }\r\n\r\n\r\n    getCache(key: string): any {\r\n        return this.cache.get(key);\r\n    }\r\n\r\n    setCache(key: string, value: any) {\r\n        this.cache.set(key, value);\r\n    }\r\n}\r\n"]}
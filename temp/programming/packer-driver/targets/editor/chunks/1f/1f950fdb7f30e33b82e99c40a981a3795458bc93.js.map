{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/components/Hall_PC_SubComp/Hall_PC_share_help.ts"],"names":["_decorator","Node","BaseComponent","ccclass","property","share_help","propertyNode","props_btn_spr_shareHelp_close","props","isShow","events","onClosePanel","start","initState","bindEvent","on","EventType","TOUCH_END","useProps","key","value","node","active","cur","bindUI","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAA6DC,MAAAA,I,OAAAA,I;;AAC7DC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;4BAajBK,U,WADZF,OAAO,CAAC,YAAD,C,gBAAR,MACaE,UADb;AAAA;AAAA,0CACsE;AAAA;AAAA;AAAA,eAKxDC,YALwD,GAKzC;AACrBC,YAAAA,6BAA6B,EAAC,IAAIN,IAAJ;AADT,WALyC;AAAA,eAS3DO,KAT2D,GAS3C;AACnBC,YAAAA,MAAM,EAAE;AADW,WAT2C;AAAA,eAa3DC,MAb2D,GAa1C;AACpBC,YAAAA,YAAY,EAAE,MAAM,CAAG;AADH,WAb0C;AAAA;;AAClEC,QAAAA,KAAK,GAAG,CAEP;;AAcSC,QAAAA,SAAS,GAAG;AAClB,iBAAO,EAAP;AAGH;;AAESC,QAAAA,SAAS,GAAS;AACzB,eAAKR,YAAL,CAAkBC,6BAAlB,CAAgDQ,EAAhD,CAAmDd,IAAI,CAACe,SAAL,CAAeC,SAAlE,EAA6E,MAAM;AAClF,iBAAKP,MAAL,CAAYC,YAAZ;AACF,WAFC;AAGF;;AAESO,QAAAA,QAAQ,CAACC,GAAD,EAAoBC,KAApB,EAAmD;AACjE,cAAID,GAAG,KAAK,QAAZ,EAAsB;AAClB,iBAAKE,IAAL,CAAUC,MAAV,GAAmBF,KAAK,CAACG,GAAzB;AACH;AACJ;;AACSC,QAAAA,MAAM,GAAS,CAExB;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAxCiE,O","sourcesContent":["import { _decorator, Component, ImageAsset, instantiate, log, native, Node, ScrollView, Sprite, SpriteFrame, sys, systemEvent, Texture2D, tween, UIOpacity, UITransform, Vec2, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nconst { ccclass, property } = _decorator;\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n    isShow: boolean,\r\n}\r\nexport interface IEvent {\r\n    onClosePanel: () => void\r\n}\r\n\r\n@ccclass('share_help')\r\nexport class share_help extends BaseComponent<IState, IProps, IEvent> {\r\n    start() {\r\n\r\n    }\r\n\r\n    protected propertyNode = {\r\n        props_btn_spr_shareHelp_close:new Node()\r\n    }\r\n\r\n    public props: IProps = {\r\n        isShow: true\r\n    }\r\n\r\n    public events: IEvent = {\r\n        onClosePanel: () => { },\r\n    }\r\n\r\n    protected initState() {\r\n        return {\r\n\r\n        }\r\n    }\r\n\r\n    protected bindEvent(): void {\r\n       this.propertyNode.props_btn_spr_shareHelp_close.on(Node.EventType.TOUCH_END, () => {\r\n        this.events.onClosePanel()\r\n     })\r\n    }\r\n\r\n    protected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n        if (key === 'isShow') {\r\n            this.node.active = value.cur\r\n        }\r\n    }\r\n    protected bindUI(): void {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n}\r\n\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/dfdc/components/BlessedWealthy_rollerPanel.ts"],"names":["_decorator","Node","BaseComponent","IconEffectType","RollerViewModel","blessedWealthy_Audio","sourceManageSeletor","PrefabPathDefine","dataTransfer","DataKeyType","TaskScheduler","ccclass","property","BlessedWealthy_rollerPanel","rollerViewModelMap","taskScheduler","stepNumber","propertyNode","props_spr_roller_list","props","rollerMap","iconEffectData","iconEffect","NONE","coord","iconYuanBaoEffectData","iconFreeGameEffectData","jackpotAmount","isSortStop","stopMode","freeGameRate","events","allRollStop","panelRollEnd","rollerIndex","start","initState","bindEvent","useProps","key","value","length","initRollerList","forEach","roller","index","iconEffectArr","filter","i","map","setProps","dataItem","rollerViewModel","mountView","getFile","ROLLER","source","appendTo","rollerType","setEvent","rollEnd","isAllStop","some","item","comp","getRoundEnd","connect","push","gameType","GAME_TYPE","stop","destroyCallBack","destoryQueue","bindUI","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Component, Label, Layout, Node } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nconst { ccclass, property } = _decorator;\r\nimport { DirectionType, GameType, IconEffectType, RollerType } from '../type';\r\nimport RollerViewModel from '../viewModel/RollerViewModel';\r\nimport { blessedWealthy_Audio,  sourceManageSeletor } from '../index';\r\nimport { PrefabPathDefine } from '../sourceDefine/prefabDefine';\r\nimport { setRollRoundEnd } from '../store/actions/roller';\r\nimport { sktInstance } from '../socketConnect';\r\nimport dataTransfer, { DataKeyType } from '../dataTransfer';\r\nimport { SoundPathDefine } from '../sourceDefine/soundDefine';\r\nimport TaskScheduler, { Task } from '../../../utils/TaskScheduler';\r\nimport StepNumber from '../../../utils/StepNumber';\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\trollerMap: RollerType[]\r\n\ticonEffectData?: {\r\n\t\ticonEffect: IconEffectType,\r\n\t\tcoord: number[][]\r\n\t},\r\n\ticonYuanBaoEffectData?: {\r\n\t\ticonEffect: IconEffectType,\r\n\t\tcoord: number[][]\r\n\t},\r\n\ticonFreeGameEffectData: {\r\n\t\ticonEffect: IconEffectType,\r\n\t\tcoord: number[][]\r\n\t}\r\n\tjackpotAmount?: number,\r\n\tstopMode: 'index' | 'jump',\r\n\t/**是否步停（顺序停止） */\r\n\tisSortStop: boolean,\r\n\tfreeGameRate:number,\r\n}\r\nexport interface IEvent {\r\n\t/**全部滚动已经停止 */\r\n\tallRollStop: () => void,\r\n\tpanelRollEnd: (rollerIndex: number) => void\r\n}\r\n\r\n@ccclass('BlessedWealthy_rollerPanel')\r\nexport class BlessedWealthy_rollerPanel extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() { }\r\n\r\n\tpublic rollerViewModelMap: RollerViewModel[] = []\r\n\tprivate taskScheduler: TaskScheduler = new TaskScheduler()\r\n\tprivate stepNumber: StepNumber\r\n\tprotected propertyNode = {\r\n\t\t/**滑槽主板 */\r\n\t\tprops_spr_roller_list: new Node(),\r\n\t\t\t\t\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\t\trollerMap: [],\r\n\t\ticonEffectData: {\r\n\t\t\ticonEffect: IconEffectType.NONE,\r\n\t\t\tcoord: []\r\n\t\t},\r\n\t\ticonYuanBaoEffectData: {\r\n\t\t\ticonEffect: IconEffectType.NONE,\r\n\t\t\tcoord: []\r\n\t\t},\r\n\t\ticonFreeGameEffectData: {\r\n\t\t\ticonEffect: IconEffectType.NONE,\r\n\t\t\tcoord: []\r\n\t\t},\r\n\t\tjackpotAmount: 0,\r\n\t\tisSortStop: false,\r\n\t\tstopMode: 'index',\r\n\t\tfreeGameRate:0,\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\tallRollStop: () => { },\r\n\t\tpanelRollEnd: (rollerIndex: number) => { }\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {\r\n\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\r\n\t}\r\n\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\t\tif (key === \"rollerMap\") {\r\n\t\t\tif (!this.rollerViewModelMap.length) {\r\n\t\t\t\tthis.initRollerList()\r\n\t\t\t} else {\r\n\t\t\t\t// roller组件自己去订阅store的数据，就不从这里更新了\r\n\t\t\t\t// this.rollerViewModelMap.forEach((roller, index) => {\r\n\t\t\t\t// \troller.setProps({ rollerType: this.props.rollerMap[index] })\r\n\t\t\t\t// })\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (key === \"iconEffectData\") {\r\n\t\t\tthis.rollerViewModelMap.forEach((roller, index) => {\r\n\t\t\t\t//index=0情况下=>[0,0][0,2],...=> 获取到一个这种数组:[0,2],描述第几条数组要闪动的图标序号\r\n\t\t\t\tconst iconEffectArr = this.props.iconEffectData.coord.filter(i => i[0] === index).map(i => i[1])\r\n\t\t\t\tif (iconEffectArr.length) {\r\n\t\t\t\t\t//分配到各个滑槽\r\n\t\t\t\t\troller.setProps({\r\n\t\t\t\t\t\ticonEffectData: {\r\n\t\t\t\t\t\t\ticonEffectArr,\r\n\t\t\t\t\t\t\ticonEffect: this.props.iconEffectData.iconEffect\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\troller.setProps({\r\n\t\t\t\t\t\ticonEffectData: {\r\n\t\t\t\t\t\t\ticonEffectArr: [],\r\n\t\t\t\t\t\t\ticonEffect: IconEffectType.NONE\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\tif (key === \"iconYuanBaoEffectData\") {\r\n\t\t\tthis.rollerViewModelMap.forEach((roller, index) => {\r\n\t\t\t\t//index=0情况下=>[0,0][0,2],...=> 获取到一个这种数组:[0,2],描述第几条数组要闪动的图标序号\r\n\t\t\t\tconst iconEffectArr = this.props.iconYuanBaoEffectData.coord.filter(i => i[0] === index).map(i => i[1])\r\n\t\t\t\tif (iconEffectArr.length) {\r\n\t\t\t\t\t//分配到各个滑槽\r\n\t\t\t\t\troller.setProps({\r\n\t\t\t\t\t\ticonYuanBaoEffectData: {\r\n\t\t\t\t\t\t\ticonEffectArr,\r\n\t\t\t\t\t\t\ticonEffect: this.props.iconYuanBaoEffectData.iconEffect\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\troller.setProps({\r\n\t\t\t\t\t\ticonYuanBaoEffectData: {\r\n\t\t\t\t\t\t\ticonEffectArr: [],\r\n\t\t\t\t\t\t\ticonEffect: IconEffectType.NONE\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\tif (key === \"iconFreeGameEffectData\") {\r\n\t\t\tthis.rollerViewModelMap.forEach((roller, index) => {\r\n\t\t\t\t//index=0情况下=>[0,0][0,2],...=> 获取到一个这种数组:[0,2],描述第几条数组要闪动的图标序号\r\n\t\t\t\tconst iconEffectArr = this.props.iconFreeGameEffectData.coord.filter(i => i[0] === index).map(i => i[1])\r\n\t\t\t\t\r\n\t\t\t\tif (iconEffectArr.length) {\r\n\t\t\t\t\t//分配到各个滑槽\r\n\t\t\t\t\troller.setProps({\r\n\t\t\t\t\t\ticonFreeGameEffectData: {\r\n\t\t\t\t\t\t\ticonEffectArr,\r\n\t\t\t\t\t\t\ticonEffect: this.props.iconFreeGameEffectData.iconEffect\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t} else {\r\n\t\t\t\t\troller.setProps({\r\n\t\t\t\t\t\ticonFreeGameEffectData: {\r\n\t\t\t\t\t\t\ticonEffectArr: [],\r\n\t\t\t\t\t\t\ticonEffect: IconEffectType.NONE\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\tif (key === \"jackpotAmount\") {\r\n\t\t\t// this.taskScheduler.joinqQueue(new Task((done) => {\r\n\t\t\t// \tthis.stepNumber && this.stepNumber.stop()\r\n\t\t\t// \tthis.stepNumber = new StepNumber(value.pre, value.cur, (num) => {\r\n\t\t\t// \t\t// this.propertyNode && this.propertyNode.props_Label_up_goldNum && (this.propertyNode.props_Label_up_goldNum.string = (+num.toFixed(0)).formatAmountWithCommas())\r\n\t\t\t// \t\tthis.propertyNode && this.propertyNode.props_Label_jackpot_num && (this.propertyNode.props_Label_jackpot_num.string = num.formatAmountWithCommas())\r\n\t\t\t// \t}, () => done())\r\n\t\t\t// \tthis.stepNumber.start()\r\n\t\t\t// }))\r\n\r\n\t\t\r\n\t\t}\r\n\t\tif (key === \"freeGameRate\") {\r\n\t\t\t// if (value.cur > 0) {\r\n\t\t\t// \t// playAddNum()\r\n\t\t\t// \tthis.propertyNode.props_Label_smallGame_multiple.getComponent(Label).string = \"X\" + value.cur;\r\n\t\t\t// } else {\r\n\t\t\t// \tthis.propertyNode.props_Label_smallGame_multiple.getComponent(Label).string = \"\";\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\r\n\tprivate initRollerList() {\r\n\t\tthis.props.rollerMap.forEach((dataItem) => {\r\n\t\t\tconst rollerViewModel = new RollerViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.ROLLER).source).appendTo(this.propertyNode.props_spr_roller_list).setProps({\r\n\t\t\t\trollerType: dataItem\r\n\t\t\t}).setEvent({\r\n\t\t\t\trollEnd: (rollerIndex) => {\r\n\t\t\t\t\tthis.events.panelRollEnd(rollerIndex)\r\n\t\t\t\t\tlet isAllStop = !this.rollerViewModelMap.some(item => !item.comp.getRoundEnd())\r\n\t\t\t\t\tisAllStop && this.events.allRollStop()\r\n\t\t\t\t},\r\n\t\t\t}).connect()\r\n\t\t\tthis.rollerViewModelMap.push(rollerViewModel)\r\n\t\t})\r\n\t\tconst gameType = dataTransfer(DataKeyType.GAME_TYPE)\r\n\t\tblessedWealthy_Audio.stop()\r\n\t\t// blessedWealthy_Audio.play(gameType === GameType.MAIN ? SoundPathDefine.MAIN_BG: SoundPathDefine.GAME2_BG, true)\r\n\t}\r\n\r\n\tprotected destroyCallBack(): void {\r\n\t\tthis.taskScheduler.destoryQueue()\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n"]}
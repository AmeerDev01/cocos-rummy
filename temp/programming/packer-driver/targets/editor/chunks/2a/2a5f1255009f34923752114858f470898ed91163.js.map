{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/starlight/store/reducer/roller.ts"],"names":["ActionTypes","initState","reduxAct","default","config","copy","createReducer","STARLIGHT_BEGIN_ROLL","state","payload","rollerMap","rollerIndex","rollData","rolling","direction","LargeRoller","largeRollOption","normalRollOption","speed","stopIconIndex","forEach","item","roundAllEnd","STARLIGHT_INIT_ROLL","STARLIGHT_SET_STOP_ROLL","STARLIGHT_END_ROLLING","STARLIGHT_SET_FLICKER","iconEffectData","iconEffect","coord","flickerCoord","STARLIGHT_SET_ROUNT_END","STARLIGHT_SET_ROLL_SMALLBOX","smallBox","STARLIGHT_SET_ROLL_SPEED","speedBackUp","speedMultiple","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,W,iBAAAA,W;AAA2CC,MAAAA,S,iBAAAA,S;;AAChCC,MAAAA,Q,aAAXC,O;;AACFC,MAAAA,M;;AACEC,MAAAA,I,iBAAAA,I;;;;;;;;;yBAGM;AAAA;AAAA,gCAASC,aAAT,CAAsC;AACnD,SAAC;AAAA;AAAA,wCAAYC,oBAAb,GAAoC,CAACC,KAAD,EAAQC,OAAR,KAAoF;AACtH,gBAAMC,SAAS,GAAG;AAAA;AAAA,4BAAKF,KAAK,CAACE,SAAX,CAAlB;;AACA,cAAID,OAAO,CAACE,WAAR,KAAwB,CAAC,CAA7B,EAAgC;AAC9B,kBAAMC,QAAQ,GAAEF,SAAS,CAACD,OAAO,CAACE,WAAT,CAAzB;AACAD,YAAAA,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BE,OAA/B,GAAyC,IAAzC;AACAH,YAAAA,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BG,SAA/B,GAA2CL,OAAO,CAACK,SAAR,KAAsBF,QAAQ,CAACG,WAAT,GAAuB;AAAA;AAAA,kCAAOC,eAAP,CAAuBF,SAA9C,GAA0D;AAAA;AAAA,kCAAOG,gBAAP,CAAwBH,SAAxG,CAA3C;AACAL,YAAAA,OAAO,CAACS,KAAR,KAAkBR,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BO,KAA/B,GAAuCT,OAAO,CAACS,KAAjE,EAJ8B,CAK9B;AACA;;AACAR,YAAAA,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BQ,aAA/B,GAA+C,CAAC,CAAhD;AACD,WARD,MAQO;AACLT,YAAAA,SAAS,CAACU,OAAV,CAAkBC,IAAI,IAAI;AACxBA,cAAAA,IAAI,CAACR,OAAL,GAAe,IAAf;AACAQ,cAAAA,IAAI,CAACP,SAAL,GAAiBL,OAAO,CAACK,SAAR,KAAsBO,IAAI,CAACN,WAAL,GAAmB;AAAA;AAAA,oCAAOC,eAAP,CAAuBF,SAA1C,GAAsD;AAAA;AAAA,oCAAOG,gBAAP,CAAwBH,SAApG,CAAjB;AACAL,cAAAA,OAAO,CAACS,KAAR,KAAkBG,IAAI,CAACH,KAAL,GAAaT,OAAO,CAACS,KAAvC,EAHwB,CAIxB;AACA;;AACAG,cAAAA,IAAI,CAACF,aAAL,GAAqB,CAAC,CAAtB;AACD,aAPD;AAQD;;AACD,iBAAO,EACL,GAAGX,KADE;AAELE,YAAAA,SAFK;AAGLY,YAAAA,WAAW,EAAC;AAHP,WAAP;AAKD,SA1BkD;AA2BnD,SAAC;AAAA;AAAA,wCAAYC,mBAAb,GAAmC,CAACf,KAAD,EAAQC,OAAR,KAAmF;AACpH,iBAAO,EACL,GAAGD,KADE;AAELE,YAAAA,SAAS,EAAED,OAAO,CAACC;AAFd,WAAP;AAID,SAhCkD;AAiCnD,SAAC;AAAA;AAAA,wCAAYc,uBAAb,GAAuC,CAAChB,KAAD,EAAQC,OAAR,KAAuF;AAC5H,gBAAMC,SAAS,GAAG;AAAA;AAAA,4BAAKF,KAAK,CAACE,SAAX,CAAlB;AACAA,UAAAA,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BQ,aAA/B,GAA+CV,OAAO,CAACU,aAAvD;AACA,iBAAO,EACL,GAAGX,KADE;AAELE,YAAAA;AAFK,WAAP;AAID,SAxCkD;AAyCnD,SAAC;AAAA;AAAA,wCAAYe,qBAAb,GAAqC,CAACjB,KAAD,EAAQC,OAAR,KAAqF;AACxH,gBAAMC,SAAS,GAAG;AAAA;AAAA,4BAAKF,KAAK,CAACE,SAAX,CAAlB;AACAA,UAAAA,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BE,OAA/B,GAAyCJ,OAAO,CAACI,OAAjD;AACA,iBAAO,EACL,GAAGL,KADE;AAELE,YAAAA;AAFK,WAAP;AAID,SAhDkD;AAiDnD,SAAC;AAAA;AAAA,wCAAYgB,qBAAb,GAAqC,CAAClB,KAAD,EAAQC,OAAR,KAAqF;AACxH,iBAAO,EACL,GAAGD,KADE;AAELmB,YAAAA,cAAc,EAAE;AACdC,cAAAA,UAAU,EAAEnB,OAAO,CAACmB,UADN;AAEdC,cAAAA,KAAK,EAAEpB,OAAO,CAACqB;AAFD;AAFX,WAAP;AAOD,SAzDkD;AA0DnD,SAAC;AAAA;AAAA,wCAAYC,uBAAb,GAAuC,CAACvB,KAAD,EAAQC,OAAR,KAAuF;AAC5H,iBAAO,EACL,GAAGD,KADE;AAELc,YAAAA,WAAW,EAAEb,OAAO,CAACa;AAFhB,WAAP;AAID,SA/DkD;AAgEnD,SAAC;AAAA;AAAA,wCAAYU,2BAAb,GAA2C,CAACxB,KAAD,EAAQC,OAAR,KAA2F;AACpI;AACA,iBAAO,EACL,GAAGD,KADE;AAELyB,YAAAA,QAAQ,EAAExB,OAAO,CAACwB;AAFb,WAAP;AAID,SAtEkD;AAuEnD,SAAC;AAAA;AAAA,wCAAYC,wBAAb,GAAwC,CAAC1B,KAAD,EAAQC,OAAR,KAAwF;AAC9H,gBAAMC,SAAS,GAAG;AAAA;AAAA,4BAAKF,KAAK,CAACE,SAAX,CAAlB;;AACA,cAAID,OAAO,CAACE,WAAZ,EAAyB;AACvBD,YAAAA,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BO,KAA/B,GAAsCR,SAAS,CAACD,OAAO,CAACE,WAAT,CAAT,CAA+BwB,WAA/B,GAA6C1B,OAAO,CAAC2B,aAA3F;AACD,WAFD,MAEO;AACL1B,YAAAA,SAAS,CAACU,OAAV,CAAkBiB,CAAC,IAAIA,CAAC,CAACnB,KAAF,GAAUmB,CAAC,CAACF,WAAF,GAAgB1B,OAAO,CAAC2B,aAAzD;AACD;;AACD,iBAAO,EACL,GAAG5B,KADE;AAELE,YAAAA;AAFK,WAAP;AAID;AAlFkD,OAAtC;AAAA;AAAA,iC","sourcesContent":["import { instantiate } from \"cc\";\r\nimport { ActionTypes, ActionPayLoad, InitStateType, initState } from \"../actions/roller\";\r\nimport { default as reduxAct } from 'redux-act'\r\nimport config from \"../../config\";\r\nimport { copy } from \"../../../../utils/tool\";\r\nimport { RollerType } from \"../../type\";\r\n\r\nexport default reduxAct.createReducer<InitStateType>({\r\n  [ActionTypes.STARLIGHT_BEGIN_ROLL]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_BEGIN_ROLL>): InitStateType => {\r\n    const rollerMap = copy(state.rollerMap)\r\n    if (payload.rollerIndex !== -1) {\r\n      const rollData =rollerMap[payload.rollerIndex]\r\n      rollerMap[payload.rollerIndex].rolling = true\r\n      rollerMap[payload.rollerIndex].direction = payload.direction || (rollData.LargeRoller ? config.largeRollOption.direction : config.normalRollOption.direction)\r\n      payload.speed && (rollerMap[payload.rollerIndex].speed = payload.speed)\r\n      // _state.rollerMap[payload.rollerIndex].speed = payload.speed || (rollData.LargeRoller ? config.largeRollOption.rollerSpeed : config.normalRollOption.rollerSpeed)\r\n      // _state.rollerMap[payload.rollerIndex].speedBackUp = payload.speed || (rollData.LargeRoller ? config.largeRollOption.rollerSpeed : config.normalRollOption.rollerSpeed)\r\n      rollerMap[payload.rollerIndex].stopIconIndex = -1\r\n    } else {\r\n      rollerMap.forEach(item => {\r\n        item.rolling = true\r\n        item.direction = payload.direction || (item.LargeRoller ? config.largeRollOption.direction : config.normalRollOption.direction)\r\n        payload.speed && (item.speed = payload.speed)\r\n        // item.speed = payload.speed || (item.LargeRoller ? config.largeRollOption.rollerSpeed : config.normalRollOption.rollerSpeed)\r\n        // item.speedBackUp = payload.speed || (item.LargeRoller ? config.largeRollOption.rollerSpeed : config.normalRollOption.rollerSpeed)\r\n        item.stopIconIndex = -1\r\n      })\r\n    }\r\n    return {\r\n      ...state,\r\n      rollerMap,\r\n      roundAllEnd:false\r\n    }\r\n  },\r\n  [ActionTypes.STARLIGHT_INIT_ROLL]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_INIT_ROLL>): InitStateType => {\r\n    return {\r\n      ...state,\r\n      rollerMap: payload.rollerMap\r\n    }\r\n  },\r\n  [ActionTypes.STARLIGHT_SET_STOP_ROLL]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_SET_STOP_ROLL>): InitStateType => {\r\n    const rollerMap = copy(state.rollerMap)\r\n    rollerMap[payload.rollerIndex].stopIconIndex = payload.stopIconIndex\r\n    return {\r\n      ...state,\r\n      rollerMap\r\n    }\r\n  },\r\n  [ActionTypes.STARLIGHT_END_ROLLING]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_END_ROLLING>): InitStateType => {\r\n    const rollerMap = copy(state.rollerMap)\r\n    rollerMap[payload.rollerIndex].rolling = payload.rolling\r\n    return {\r\n      ...state,\r\n      rollerMap\r\n    }\r\n  },\r\n  [ActionTypes.STARLIGHT_SET_FLICKER]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_SET_FLICKER>): InitStateType => {\r\n    return {\r\n      ...state,\r\n      iconEffectData: {\r\n        iconEffect: payload.iconEffect,\r\n        coord: payload.flickerCoord\r\n      }\r\n    }\r\n  },\r\n  [ActionTypes.STARLIGHT_SET_ROUNT_END]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_SET_ROUNT_END>): InitStateType => {\r\n    return {\r\n      ...state,\r\n      roundAllEnd: payload.roundAllEnd\r\n    }\r\n  },\r\n  [ActionTypes.STARLIGHT_SET_ROLL_SMALLBOX]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_SET_ROLL_SMALLBOX>): InitStateType => {\r\n    // console.log('STARLIGHT_SET_ROLL_SMALLBOX -- ', payload.smallBox);\r\n    return {\r\n      ...state,\r\n      smallBox: payload.smallBox\r\n    }\r\n  },\r\n  [ActionTypes.STARLIGHT_SET_ROLL_SPEED]: (state, payload: ActionPayLoad<ActionTypes.STARLIGHT_SET_ROLL_SPEED>): InitStateType => {\r\n    const rollerMap = copy(state.rollerMap) as RollerType[]\r\n    if (payload.rollerIndex) {\r\n      rollerMap[payload.rollerIndex].speed =rollerMap[payload.rollerIndex].speedBackUp * payload.speedMultiple\r\n    } else {\r\n      rollerMap.forEach(i => i.speed = i.speedBackUp * payload.speedMultiple)\r\n    }\r\n    return {\r\n      ...state,\r\n      rollerMap\r\n    }\r\n  }\r\n}, initState);"]}
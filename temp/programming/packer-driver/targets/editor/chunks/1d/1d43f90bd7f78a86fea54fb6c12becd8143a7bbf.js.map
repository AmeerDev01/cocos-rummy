{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/components/Hall_Turntable/TurntableHelp.ts"],"names":["_decorator","Node","BaseComponent","ccclass","property","TurntableHelp","propertyNode","props_btn_off","props","events","onClosePanel","start","initState","bindEvent","node","on","EventType","TOUCH_END","useProps","key","value","bindUI","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAqEC,MAAAA,I,OAAAA,I;;AACrEC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBJ,U;;+BAajBK,a,WADZF,OAAO,CAAC,eAAD,C,gBAAR,MACaE,aADb;AAAA;AAAA,0CACyE;AAAA;AAAA;AAAA,eAK3DC,YAL2D,GAK5C;AACrBC,YAAAA,aAAa,EAAC,IAAIN,IAAJ;AADO,WAL4C;AAAA,eAS9DO,KAT8D,GAS9C,EAT8C;AAAA,eAa9DC,MAb8D,GAa7C;AACpBC,YAAAA,YAAY,EAAC,MAAI,CAAE;AADC,WAb6C;AAAA;;AACrEC,QAAAA,KAAK,GAAG,CAEP;;AAcSC,QAAAA,SAAS,GAAG;AAClB,iBAAO,EAAP;AAGH;;AAESC,QAAAA,SAAS,GAAS;AACxB,eAAKC,IAAL,CAAUC,EAAV,CAAad,IAAI,CAACe,SAAL,CAAeC,SAA5B,EAAuC,MAAM;AACzC,iBAAKR,MAAL,CAAYC,YAAZ;AACT,WAFK;AAGA,eAAKJ,YAAL,CAAkBC,aAAlB,CAAgCQ,EAAhC,CAAmCd,IAAI,CAACe,SAAL,CAAeC,SAAlD,EAA6D,MAAM;AAC/D,iBAAKR,MAAL,CAAYC,YAAZ;AACT,WAFK;AAGH;;AAESQ,QAAAA,QAAQ,CAACC,GAAD,EAAoBC,KAApB,EAAmD,CAEpE;;AACSC,QAAAA,MAAM,GAAS,CAExB;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAzCoE,O","sourcesContent":["import { _decorator, Button, Component, ImageAsset, instantiate, log, native, Node, ScrollView, Sprite, SpriteFrame, sys, systemEvent, Texture2D, tween, UIOpacity, UITransform, Vec2, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nconst { ccclass, property } = _decorator;\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n  \r\n}\r\nexport interface IEvent {\r\n    onClosePanel:()=>void\r\n}\r\n\r\n@ccclass('TurntableHelp')\r\nexport class TurntableHelp extends BaseComponent<IState, IProps, IEvent> {\r\n    start() {\r\n\r\n    }\r\n\r\n    protected propertyNode = {\r\n        props_btn_off:new Node()\r\n    }\r\n\r\n    public props: IProps = {\r\n      \r\n    }\r\n\r\n    public events: IEvent = {\r\n        onClosePanel:()=>{}\r\n    }\r\n\r\n    protected initState() {\r\n        return {\r\n\r\n        }\r\n    }\r\n\r\n    protected bindEvent(): void {\r\n        this.node.on(Node.EventType.TOUCH_END, () => {\r\n            this.events.onClosePanel()            \r\n\t\t})\r\n        this.propertyNode.props_btn_off.on(Node.EventType.TOUCH_END, () => {\r\n            this.events.onClosePanel()            \r\n\t\t})\r\n    }\r\n\r\n    protected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n       \r\n    }\r\n    protected bindUI(): void {\r\n\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n\r\n    }\r\n}\r\n\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/phoenix/Slot/Command/LoaderCommand.ts"],"names":["LoaderCommand","global","lang","CommandDefine","MediatorDefine","ProxyDefine","BgMediatorConst","LoaderViewType","SocketProxy","BaseCommand","BgCommandConst","listExecute","type","INIT_LOADER_PANEL","handler","notification","sourceList","facade","retrieveMediator","BG","sourceMap","ROLLER_PANEL","data","done","retrieveProxy","WEBSOCKET","initSocket","sendNotification","INIT_MAIN_PANEL","AUTH","closeSubGame","confirmContent","write","k","WebSocketModule","ConfigGameFaild","console","error","execute","registerProxy"],"mappings":";;;mKAYaA,a;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAZJC,MAAAA,M,iBAAAA,M;AAAQC,MAAAA,I,iBAAAA,I;;AAETC,MAAAA,a,iBAAAA,a;;AACAC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,W,iBAAAA,W;;AAEAC,MAAAA,e,iBAAAA,e;;AACAC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,W,iBAAAA,W;;AACAC,MAAAA,c,kBAAAA,c;;;;;;;+BAEKV,a,GAAN,MAAMA,aAAN;AAAA;AAAA,sCAAwC;AAAA;AAAA;AAAA,eACjCW,WADiC,GACiB,CACxD;AACIC,YAAAA,IAAI,EAAE;AAAA;AAAA,kDAAeC,iBADzB;;AAEIC,YAAAA,OAAO,CAACC,YAAD,EAA8B;AACjC;AACA,oBAAMC,UAAU,GAAG,CACf,GAAkB,KAAKC,MAAL,CAAYC,gBAAZ,CAA6B;AAAA;AAAA,oDAAeC,EAA5C,CAAf,CAAgEC,SADpD,EAEf,GAAkB,KAAKH,MAAL,CAAYC,gBAAZ,CAA6B;AAAA;AAAA,oDAAeG,YAA5C,CAAf,CAA0ED,SAF9D,CAAnB;AAIA,qBAAO;AACHE,gBAAAA,IAAI,EAAEN,UADH;AAEHO,gBAAAA,IAAI,EAAE,MAAM;AACM,uBAAKN,MAAL,CAAYO,aAAZ,CAA0B;AAAA;AAAA,kDAAYC,SAAtC,CAAd,CAAgEC,UAAhE,CAA2E,MAAM;AAC7E,yBAAKC,gBAAL,CAAsB;AAAA;AAAA,wDAAcR,EAApC,EAAwC,EAAxC,EAA4C;AAAA;AAAA,4DAAgBS,eAA5D;AACA,yBAAKD,gBAAL,CAAsB;AAAA;AAAA,wDAAcR,EAApC,EAAwC,EAAxC,EAA4C;AAAA;AAAA,0DAAeU,IAA3D,EAF6E,CAG7E;AACA;AACA;AACH,mBAND,EAMG,MAAM;AACL;AAAA;AAAA,0CAAOC,YAAP,CAAoB;AAACC,sBAAAA,cAAc,EAAE;AAAA;AAAA,wCAAKC,KAAL,CAAWC,CAAC,IAAKA,CAAC,CAACC,eAAF,CAAkBC,eAAnC;AAAjB,qBAApB;AACAC,oBAAAA,OAAO,CAACC,KAAR,CAAc,YAAd;AACH,mBATD;AAUH;AAbE,eAAP;AAeH;;AAvBL,WADwD,CADjB;AAAA;;AA6BpCC,QAAAA,OAAO,CAACvB,YAAD,EAAoC;AAC9C,eAAKE,MAAL,CAAYsB,aAAZ,CAA0B;AAAA;AAAA,0CAAgB;AAAA;AAAA,0CAAYd,SAA5B,CAA1B;AACA,gBAAMa,OAAN,CAAcvB,YAAd;AACH;;AAhC0C,O","sourcesContent":["import { global, lang } from \"../../../../hall\";\r\nimport {INotification} from \"../../Framework/interfaces/INotification\"\r\nimport {CommandDefine} from \"../Const/CommandDefine\";\r\nimport {MediatorDefine} from \"../Const/MediatorDefine\";\r\nimport {ProxyDefine} from \"../Const/ProxyDefine\";\r\nimport BaseMediator from \"../Mediator/BaseMediator\";\r\nimport {BgMediatorConst} from \"../Mediator/BgMediator\";\r\nimport {LoaderViewType} from \"../Mediator/LoaderMediator\";\r\nimport {SocketProxy} from \"../Proxy/SocketProxy\";\r\nimport {BaseCommand, IListExecute} from './BaseCommand'\r\nimport {BgCommandConst} from \"./BgCommand\";\r\n\r\nexport class LoaderCommand extends BaseCommand {\r\n    protected listExecute: Array<IListExecute<LoaderCommand>> = [\r\n        {\r\n            type: LoaderViewType.INIT_LOADER_PANEL,\r\n            handler(notification: INotification) {\r\n                //获取所有的mediator的资源传过去\r\n                const sourceList = [\r\n                    ...(<BaseMediator>this.facade.retrieveMediator(MediatorDefine.BG)).sourceMap,\r\n                    ...(<BaseMediator>this.facade.retrieveMediator(MediatorDefine.ROLLER_PANEL)).sourceMap,\r\n                ]\r\n                return {\r\n                    data: sourceList,\r\n                    done: () => {\r\n                        (<SocketProxy>this.facade.retrieveProxy(ProxyDefine.WEBSOCKET)).initSocket(() => {\r\n                            this.sendNotification(CommandDefine.BG, {}, BgMediatorConst.INIT_MAIN_PANEL)\r\n                            this.sendNotification(CommandDefine.BG, {}, BgCommandConst.AUTH)\r\n                            ///this.sendNotification(CommandDefine.BG, {}, BgCommandConst.AUTH)\r\n                            // this.sendNotification(CommandDefine.ROLLER, { gameType: SubGameType.MAIN }, RollerMediatorConst.INIT_ROLLER_PANEL)\r\n                            // this.sendNotification(CommandDefine.SUB_GAME, {}, SubGameMediatorConst.INIT_SUB_GAME_PANEL)\r\n                        }, () => {\r\n                            global.closeSubGame({confirmContent: lang.write(k =>  k.WebSocketModule.ConfigGameFaild)})\r\n                            console.error(\"socket连接错误\")\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    public execute(notification: INotification): void {\r\n        this.facade.registerProxy(new SocketProxy(ProxyDefine.WEBSOCKET))\r\n        super.execute(notification)\r\n    }\r\n}\r\n"]}
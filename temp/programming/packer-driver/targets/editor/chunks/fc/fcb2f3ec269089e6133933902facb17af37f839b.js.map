{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/phoenix/Slot/Command/BgCommand.ts"],"names":["BgCommand","DialogType","BgMediatorConst","SubGameType","config","getBgProxy","getSocketProxy","BaseCommand","AudioManager","SceneBgMusic","RollerMediatorConst","UseSetOption","BgCommandConst","listExecute","type","INIT_MAIN_PANEL","handler","notification","AUTH","sendAnth","GAME_TYPE_CHANGE","fbp","nextGame","getIsChangeGameRunning","gameTypePre","getLastGame","gameTypeNew","MAIN","SUB_GAME2","SUB_GAME1","setCurrentGame","getInstance","playMusic","mainBg","sendNotification","CHANGE_BG","gameType","REPLACETHESLOTBACKGROUND","state","setDisable","gameBg","THESLOTISHIDDEN","subGameType","isSlow","done","PHOENIX_SGCHOOSE","gameBgT","UPDATE_BET_AMOUNT","order","getBody","updateBetAmount","AUTO_LAUNCH","checkAutoLaunch","sendLaunch","getNextGame","subtractAutoLaunchTimes","SHOW_DIALOG_WIN","dialogType","amount","keepTime","_amount","getTransferGameInfo","getCurrentScore","_keepTime","magnification","getMagnification","win","winning","find","item","minRate","maxRate","BIG_WIN","name","MEGA_WIN","SUPER_WIN","JACKPOT","str","getShiftAmount","baseBetAmount","value","Instance","setGameOption","betTarget","lineCount","linesQueue","length","execute"],"mappings":"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","sourcesContent":["import { INotification } from \"../../Framework/interfaces/INotification\"\r\nimport { DialogType } from \"../Component/phoenix_DialogWin\";\r\nimport { BgMediatorConst } from \"../Mediator/BgMediator\";\r\nimport { SubGameType } from \"../Proxy/SocketProxy\";\r\nimport config from \"../phoenix_config\";\r\nimport { getBgProxy, getSocketProxy } from \"../phoenix_utils\";\r\nimport { BaseCommand, IListExecute } from './BaseCommand'\r\nimport { AudioManager, SceneBgMusic } from \"../Managr/AudioManager\";\r\nimport { RollerMediatorConst } from \"db://assets/script/subGame/phoenix/Slot/Mediator/RollerMediator\";\r\nimport UseSetOption from \"db://assets/script/utils/UseSetOption\";\r\n\r\nexport enum BgCommandConst {\r\n    AUTH = \"authentication\",\r\n    /**切换游戏界面 */\r\n    GAME_TYPE_CHANGE = \"gameTypeChange\",\r\n    /**检查自动启动启动，如果是就进行下一局 */\r\n    AUTO_LAUNCH = \"autoLaunch\"\r\n}\r\n\r\n// const listNotificationConst: Array<IlistNotificationer<FruitsSlotCommand>> = [\r\n// \t{\r\n// \t\ttype: MainSlotViewType.INIT_MAIN_PANEL,\r\n// \t\thandler(notification: INotification) {\r\n\r\n// \t\t\treturn false\r\n// \t\t}\r\n// \t}\r\n// ]\r\n\r\nexport class BgCommand extends BaseCommand {\r\n    protected listExecute: Array<IListExecute<BgCommand>> = [\r\n        {\r\n            type: BgMediatorConst.INIT_MAIN_PANEL,\r\n            handler(notification: INotification) {\r\n                // this.updateBetAmount(\"curr\")\r\n                return true\r\n            }\r\n        },\r\n        {\r\n            type: BgCommandConst.AUTH,\r\n            handler(notification: INotification) {\r\n                getSocketProxy().sendAnth()\r\n            }\r\n        },\r\n        {\r\n            type: BgCommandConst.GAME_TYPE_CHANGE,\r\n            handler(notification: INotification) {\r\n                const fbp = getBgProxy();\r\n                const nextGame = fbp.getIsChangeGameRunning()\r\n                if (nextGame !== -1) {\r\n                    // //开始切换屏幕\r\n                    // this.sendNotification(CommandDefine.BG, { gameTypePre: fbp.getLastGame(), gameTypeNew: nextGame }, FruitsBgCommandConst.GAME_TYPE_CHANGE)\r\n                    // const { gameTypePre, gameTypeNew } = notification.getBody()\r\n                    const gameTypePre = fbp.getLastGame()\r\n                    const gameTypeNew = nextGame\r\n                    // this.sendNotification(BgMediatorConst.START_FLY_BG)\r\n                    // window.setTimeout(() => {\r\n                    // 先卸载之前的游戏，由于是渐出，所以给一个时间\r\n                    if (gameTypePre === SubGameType.MAIN || gameTypePre === SubGameType.SUB_GAME2) {\r\n                        // this.sendNotification(CommandDefine.ROLLER, {}, RollerMediatorConst.UNINSTALL_ROLLER_PANEL)\r\n                    } else if (gameTypePre === SubGameType.SUB_GAME1) {\r\n\r\n                    }\r\n                    // window.setTimeout(() => {\r\n                    getBgProxy().setCurrentGame(gameTypeNew);\r\n                    if (gameTypeNew === SubGameType.MAIN) {\r\n                        AudioManager.getInstance().playMusic(SceneBgMusic.mainBg, true)\r\n                        this.sendNotification(BgMediatorConst.CHANGE_BG, { gameType: gameTypeNew })\r\n                        this.sendNotification(RollerMediatorConst.REPLACETHESLOTBACKGROUND, { state: true })\r\n                    } else if (gameTypeNew === SubGameType.SUB_GAME1) {\r\n                        getBgProxy().setDisable(true)\r\n                        AudioManager.getInstance().playMusic(SceneBgMusic.gameBg, true)\r\n                        // 隐藏插槽 选择后显示\r\n                        // this.sendNotification(RollerMediatorConst.THESLOTISHIDDEN, {state: false})\r\n                        // this.sendNotification(RollerMediatorConst.REPLACETHESLOTBACKGROUND, {state: false})\r\n                        this.sendNotification(RollerMediatorConst.THESLOTISHIDDEN, {\r\n                            subGameType: SubGameType.MAIN,\r\n                            state: true,\r\n                            isSlow: true,\r\n                            done: () => {\r\n                                this.sendNotification(BgMediatorConst.PHOENIX_SGCHOOSE)\r\n                            }\r\n                        })\r\n                        // this.sendNotification(BgMediatorConst.CHANGE_BG, {gameType: 1})\r\n                    } else if (gameTypeNew === SubGameType.SUB_GAME2) {\r\n                        //大滑槽\r\n                        AudioManager.getInstance().playMusic(SceneBgMusic.gameBgT, true)\r\n                        // this.sendNotification(CommandDefine.ROLLER, { gameType: 2 }, RollerMediatorConst.INIT_ROLLER_PANEL)\r\n                    }\r\n                    // }, 300)\r\n                    // }, 1000)\r\n                } else {\r\n                }\r\n            }\r\n        },\r\n        // {\r\n        // \ttype: BgMediatorConst.UPDATE_NUMBER,\r\n        // \thandler(notification: INotification) {\r\n        // \t\tconst betAmount = this.getSocketProxy().getRepository().userServerData\r\n        // \t\treturn {\r\n        // \t\t\tbetAmount: betAmount,\r\n        // \t\t\tscore: 0\r\n        // \t\t}\r\n        // \t}\r\n        // },\r\n        {\r\n            type: BgMediatorConst.UPDATE_BET_AMOUNT,\r\n            handler(notification: INotification) {\r\n                const { order } = notification.getBody()\r\n                return this.updateBetAmount(order)\r\n            }\r\n        },\r\n        {\r\n            type: BgCommandConst.AUTO_LAUNCH,\r\n            handler(notification: INotification) {\r\n                if (getBgProxy().checkAutoLaunch()) {\r\n                    getSocketProxy().sendLaunch()\r\n                    const fbp = getBgProxy();\r\n                    if (fbp.getNextGame() === SubGameType.MAIN) {\r\n                        getBgProxy().subtractAutoLaunchTimes()\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        {\r\n            type: BgMediatorConst.SHOW_DIALOG_WIN,\r\n            handler(notification: INotification) {\r\n                const { dialogType, amount, keepTime, order, done } = notification.getBody()\r\n                const _amount = amount || getSocketProxy().getTransferGameInfo().getCurrentScore(order)\r\n                const _keepTime = keepTime || 2500\r\n                //获取奖励类型\r\n                const magnification = getSocketProxy().getTransferGameInfo().getMagnification()\r\n                const win = config.winning.find(item => item.minRate <= magnification && magnification < item.maxRate)\r\n                if (win && !dialogType) {\r\n                    let dialogType: DialogType = DialogType.BIG_WIN;\r\n                    switch (win.name) {\r\n                        case \"bigwin\":\r\n                            dialogType = DialogType.BIG_WIN;\r\n                            break;\r\n                        case \"megawin\":\r\n                            dialogType = DialogType.MEGA_WIN;\r\n                            break;\r\n                        case \"superwin\":\r\n                            dialogType = DialogType.SUPER_WIN;\r\n                            break;\r\n                        case \"jackpot\":\r\n                            dialogType = DialogType.JACKPOT;\r\n                            break;\r\n                    }\r\n                    return { dialogType, amount: _amount, keepTime: _keepTime, done }\r\n                } else if (dialogType) {\r\n                    //如果dialogType被强制赋值，那么就会强制显示\r\n                    return { dialogType, amount: _amount, keepTime: _keepTime, done }\r\n                } else {\r\n                    done()\r\n                }\r\n            }\r\n        }\r\n    ]\r\n\r\n    private updateBetAmount(order: 'add' | 'subtract' | \"max\" | \"curr\") {\r\n        let  str=getSocketProxy().getShiftAmount(order)\r\n        const baseBetAmount = str.value\r\n        UseSetOption.Instance().setGameOption(\"phoenix\", { betTarget:str})\r\n        const lineCount = config.linesQueue.length\r\n        return { baseBetAmount, lineCount }\r\n    }\r\n\r\n    public execute(notification: INotification): void {\r\n        super.execute(notification)\r\n    }\r\n}\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/dragon/Slot/Proxy/LocalCacheDataProxy.ts"],"names":["LocalCacheDataProxy","sys","Proxy","constructor","proxyName","data","localStorage","cache","Map","setLoginData","loginData","setItem","LOGIN_DATA","JSON","stringify","getUserToken","getCache","TOKEN","setUserToken","userToken","setCache","key","get","value","set","INVITE_CODE"],"mappings":";;;2FAGaA,mB;;;;;;;;;;;;;;;AAFJC,MAAAA,G,OAAAA,G;;AADFC,MAAAA,K;;;;;;;;;qCAGMF,mB,GAAN,MAAMA,mBAAN;AAAA;AAAA,0BAAwC;AAQvCG,QAAAA,WAAW,CAACC,SAAiB,GAAG,IAArB,EAA2BC,IAAS,GAAG,IAAvC,EAA6C;AAC9D,gBAAMD,SAAN,EAAiBC,IAAjB;AAD8D,eAHvDC,YAGuD,GAHnC,IAGmC;AAAA,eAFvDC,KAEuD,GAF7B,IAE6B;AAE9D,eAAKD,YAAL,GAAoBL,GAAG,CAACK,YAAxB;AACA,eAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACA;AAED;AACD;AACA;AACC;AACA;AACA;;AAEA;AACD;AACA;AACA;;;AACCC,QAAAA,YAAY,CAACC,SAAD,EAAiB;AAC5B,eAAKJ,YAAL,CAAkBK,OAAlB,CAA0BX,mBAAmB,CAACY,UAA9C,EAA0DC,IAAI,CAACC,SAAL,CAAeJ,SAAf,CAA1D;AACA;AACD;AACD;AACA;;;AACCK,QAAAA,YAAY,GAAW;AACtB,iBAAO,KAAKC,QAAL,CAAchB,mBAAmB,CAACiB,KAAlC,CAAP;AACA;AAED;AACD;AACA;AACA;;;AACCC,QAAAA,YAAY,CAACC,SAAD,EAAY;AACvB,eAAKC,QAAL,CAAcpB,mBAAmB,CAACiB,KAAlC,EAAyCE,SAAzC;AACA;;AAGDH,QAAAA,QAAQ,CAACK,GAAD,EAAmB;AAC1B,iBAAO,KAAKd,KAAL,CAAWe,GAAX,CAAeD,GAAf,CAAP;AACA;;AAEDD,QAAAA,QAAQ,CAACC,GAAD,EAAcE,KAAd,EAA0B;AACjC,eAAKhB,KAAL,CAAWiB,GAAX,CAAeH,GAAf,EAAoBE,KAApB;AACA;;AAlD6C,O;;AAAlCvB,MAAAA,mB,CACLY,U,GAAqB,Y;AADhBZ,MAAAA,mB,CAELiB,K,GAAgB,O;AAFXjB,MAAAA,mB,CAGLyB,W,GAAsB,a","sourcesContent":["import Proxy from '../../Framework/patterns/proxy/Proxy';\r\nimport { sys } from 'cc';\r\n\r\nexport class LocalCacheDataProxy extends Proxy {\r\n\tstatic LOGIN_DATA: string = \"LOGIN_DATA\";\r\n\tstatic TOKEN: string = \"TOKEN\";\r\n\tstatic INVITE_CODE: string = \"INVITE_CODE\";\r\n\r\n\tprivate localStorage: any = null;\r\n\tprivate cache: Map<string, any> = null;\r\n\r\n\tpublic constructor(proxyName: string = null, data: any = null) {\r\n\t\tsuper(proxyName, data)\r\n\t\tthis.localStorage = sys.localStorage\r\n\t\tthis.cache = new Map()\r\n\t}\r\n\r\n\t/**\r\n\t\t\t* 获得登录缓存数据\r\n\t\t\t*/\r\n\t// getLoginData(): LoginData {\r\n\t//     return <LoginData>JSON.parse(this.localStorage.getItem(LocalCacheDataProxy.LOGIN_DATA));\r\n\t// }\r\n\r\n\t/**\r\n\t * 保存登录缓存数据\r\n\t * @param {*} loginData \r\n\t */\r\n\tsetLoginData(loginData: any) {\r\n\t\tthis.localStorage.setItem(LocalCacheDataProxy.LOGIN_DATA, JSON.stringify(loginData));\r\n\t}\r\n\t/**\r\n\t * 获得用户TOKEN\r\n\t */\r\n\tgetUserToken(): string {\r\n\t\treturn this.getCache(LocalCacheDataProxy.TOKEN);\r\n\t}\r\n\r\n\t/**\r\n\t * 保存用户token\r\n\t * @param {*} userToken \r\n\t */\r\n\tsetUserToken(userToken) {\r\n\t\tthis.setCache(LocalCacheDataProxy.TOKEN, userToken);\r\n\t}\r\n\r\n\r\n\tgetCache(key: string): any {\r\n\t\treturn this.cache.get(key);\r\n\t}\r\n\r\n\tsetCache(key: string, value: any) {\r\n\t\tthis.cache.set(key, value);\r\n\t}\r\n}"]}
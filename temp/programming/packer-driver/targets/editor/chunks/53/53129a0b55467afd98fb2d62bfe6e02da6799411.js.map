{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/Crash/net/Crash_WsManager.ts"],"names":["Crash_WsManager","sys","Crash_GameManager","Crash_NetMsgDispatcher","ProtocolCode","WsProtocol","global","lang","addToastAction","WebSocketState","url","ws","wsState","Normal","sendedMsgs","Map","queueId","isReConnect","reConnectCnt","isForceClose","lastSendTm","heartbeatCount","heartbeatTimer","secondTm","getInstance","instance","connect","clear","createConnect","reConnect","close","logout","setTimeout","closeConnect","console","log","String","isNative","WebSocket","onopen","ev","onOpen","onclose","onClosed","onerror","onError","onmessage","onMessage","Connecting","Connected","Closed","hallDispatch","content","write","k","WebSocketModule","socketConnectDateFail","placeStr","dealMessge","JSON","parse","data","resetHeartbeatTimer","clearTimeout","send","protocol","set","tm","getServerTime","sendTm","toString","code","success","args","palyingModule","CrashBottomFailed","reason","doMsgCallBack","getLastSendTm","update","ft","getIsLogin","sendHeartPkgReq","REQ_HEART_BEAT"],"mappings":"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","sourcesContent":["import { assetManager, sys } from \"cc\";\r\nimport Crash_GameManager from \"../manager/Crash_GameManager\";\r\nimport Crash_NetMsgDispatcher from \"./Crash_NetMsgDispatcher\";\r\nimport { ProtocolCode } from \"./protocol/ProtocolDef\";\r\nimport { WsProtocol } from \"./protocol/WsProtocol\";\r\nimport {global, lang} from \"db://assets/script/hall\";\r\nimport { addToastAction } from \"../../../hall/store/actions/baseBoard\";\r\n\r\nenum WebSocketState {\r\n    Normal = 0,\r\n    Connecting = 1,\r\n    Connected = 2,\r\n    Closed = 3\r\n}\r\n\r\nexport default class Crash_WsManager {\r\n\r\n    private static instance: Crash_WsManager = null;\r\n    public static getInstance() {\r\n        if(this.instance == null) {\r\n            this.instance = new Crash_WsManager();\r\n        }\r\n        return this.instance;\r\n    }\r\n\r\n    private url = null;\r\n    private ws: WebSocket = null;\r\n    public wsState: WebSocketState = WebSocketState.Normal;\r\n\r\n    private sendedMsgs: Map<number,WsProtocol> = new Map();\r\n    private queueId: number = 0;\r\n\r\n    private isReConnect: boolean = false;\r\n    private reConnectCnt: number = 0;\r\n\r\n    private isForceClose: boolean = false;\r\n\r\n    private lastSendTm: number = 1;\r\n    private heartbeatCount = 0;\r\n    private heartbeatTimer = null;\r\n    public connect( url ) {\r\n        // let queryString=''\r\n        // for (const key in data) {\r\n        //     if (queryString) {\r\n        //         queryString += '&';\r\n        //     }\r\n        //     queryString += `${encodeURIComponent(key)}=${encodeURIComponent(data[key])}`;\r\n        // }\r\n        // this.url = `${url}?${queryString}`;\r\n         this.url = url;\r\n        this.isReConnect = false;\r\n        this.reConnectCnt = 0;\r\n        this.isForceClose = false;\r\n        this.sendedMsgs.clear();\r\n        this.createConnect();\r\n    }\r\n\r\n    public reConnect() {\r\n        if(this.ws) {\r\n            this.ws.close();\r\n        }\r\n\r\n        if(this.reConnectCnt > 5) {\r\n            Crash_GameManager.getInstance().logout();\r\n            return;\r\n        }\r\n\r\n        this.isReConnect = true;\r\n        ++ this.reConnectCnt;\r\n        setTimeout(() => {\r\n            this.createConnect();\r\n        }, 1000);\r\n    }\r\n\r\n    public closeConnect() {\r\n        this.isForceClose = true;\r\n        if(this.ws) {\r\n            this.ws.close();\r\n        }\r\n    }\r\n\r\n    private createConnect() {\r\n        console.log(\"Create connect:\", String(this.url));\r\n        //data\r\n        if(sys.isNative){\r\n            this.ws = new WebSocket(this.url);\r\n        }else{\r\n            this.ws = new WebSocket(this.url);\r\n        }\r\n        this.ws.onopen = (ev: Event) => {\r\n            Crash_WsManager.getInstance().onOpen(ev);\r\n        };\r\n        this.ws.onclose = (ev: CloseEvent) => {\r\n            Crash_WsManager.getInstance().onClosed(ev);\r\n        };\r\n        this.ws.onerror = (ev: Event) => {\r\n            Crash_WsManager.getInstance().onError(ev);\r\n        };\r\n        this.ws.onmessage = (ev: MessageEvent)=> {\r\n            Crash_WsManager.getInstance().onMessage(ev);\r\n        };\r\n\r\n        this.wsState = WebSocketState.Connecting;\r\n    }\r\n\r\n    private onOpen(ev: Event) {\r\n        this.wsState = WebSocketState.Connected;\r\n        console.log(\"[onOpen]:\", ev);\r\n        if(this.isReConnect) {\r\n            this.isReConnect = false;\r\n            this.reConnectCnt = 0;\r\n            this.sendedMsgs.clear();\r\n        }\r\n    }\r\n\r\n    private onClosed(ev: CloseEvent) {\r\n        this.wsState = WebSocketState.Closed;\r\n        console.log(\"[onClosed]:\", ev);\r\n        if(!this.isForceClose){\r\n            setTimeout(() => {\r\n                this.reConnect();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    private onError(ev: Event) {\r\n        console.log(\"[onError]:\", ev);\r\n        global.hallDispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDateFail, {}, { placeStr: \"连接失败\" }) }))\r\n    }\r\n\r\n    private onMessage(ev: MessageEvent) {\r\n       // console.log(\"[onMessage]:\", JSON.parse(ev.data));\r\n       this.dealMessge(JSON.parse(ev.data));\r\n    //    if(JSON.parse(ev.data).code===ProtocolCode.RES_HEART_BEAT){\r\n    //         // this.heartbeatCount++;\r\n    //         // this.resetHeartbeatTimer();\r\n    //    }else{\r\n    //     this.dealMessge(JSON.parse(ev.data));\r\n    //    }\r\n    }\r\n    resetHeartbeatTimer() {\r\n        clearTimeout(this.heartbeatTimer);\r\n        this.heartbeatTimer = setTimeout(() => {\r\n            if (this.heartbeatCount < 3) {\r\n                console.log(\"Heartbeat check failed, closing WebSocket.\");\r\n                this.ws.close();\r\n            } else {\r\n                this.heartbeatCount = 0; // 重置计数器\r\n                this.resetHeartbeatTimer(); // 重启计时器\r\n            }\r\n        }, 5000); // 5秒计时器\r\n    }\r\n    public send(protocol: WsProtocol) {\r\n        if(this.wsState != WebSocketState.Connected) {\r\n            return;\r\n        }\r\n        protocol.queueId = ++this.queueId;\r\n        this.sendedMsgs.set(protocol.queueId, protocol);\r\n        let tm = Crash_GameManager.getInstance().getServerTime();\r\n        protocol.sendTm = tm;\r\n        this.ws.send(protocol.toString());\r\n\r\n        this.lastSendTm = tm;\r\n    }\r\n\r\n    private dealMessge( data: any ) {\r\n        let code = data.code;\r\n        let queueId = data.queueId;\r\n        let success=data.success\r\n        let args = null;\r\n        // if(queueId > 0) {\r\n        //     let protocol: WsProtocol = this.sendedMsgs.get(queueId);\r\n        //     args = protocol.args;\r\n        //     this.sendedMsgs.delete(queueId);\r\n        // }\r\n        if(data.success &&data.success===false){\r\n            global.hallDispatch(addToastAction({ content: lang.write(k => k.palyingModule.CrashBottomFailed, {}, { placeStr: data.reason }) }))\r\n        }\r\n        Crash_NetMsgDispatcher.getInstance().doMsgCallBack(success, code, data, args);\r\n        if(code == \"NOT_AUTH\"){\r\n            this.closeConnect();\r\n            Crash_GameManager.getInstance().logout();\r\n        }else if(code == \"NOTIFY_REPEATED_LOGIN\"){\r\n            this.closeConnect();\r\n            Crash_GameManager.getInstance().logout();\r\n        }\r\n    }\r\n\r\n    public getLastSendTm() { return this.lastSendTm; }\r\n\r\n    private secondTm = 0;\r\n    public update(ft) {\r\n        // let tm = Crash_GameManager.getInstance().getServerTime();\r\n        this.secondTm += ft;\r\n        if(this.secondTm >= 1) {\r\n            this.secondTm = 0;\r\n            if(Crash_GameManager.getInstance().getIsLogin()) {\r\n                this.sendHeartPkgReq();\r\n                // if(this.lastSendTm > 1){\r\n                //     this.sendHeartPkgReq();\r\n                // }\r\n            }\r\n        }\r\n\r\n        // for(let key of this.sendedMsgs.keys()) {\r\n        //     let info = this.sendedMsgs.get(key);\r\n        //     if(info.sendTm + 300 <= tm) {\r\n        //         if(info.sendTm + 10000 <= tm){\r\n        //             this.closeConnect();\r\n        //             this.sendedMsgs.clear();\r\n        //                 Crash_GameManager.getInstance().logout();\r\n        //         }\r\n        //         break;\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    private sendHeartPkgReq(){\r\n        new WsProtocol(ProtocolCode.REQ_HEART_BEAT).send();\r\n    }\r\n}\r\n"]}
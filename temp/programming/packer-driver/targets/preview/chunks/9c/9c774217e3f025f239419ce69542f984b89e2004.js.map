{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/phoenix/Framework/interfaces/IMediator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { INotification } from \"./INotification\";\r\n/**\r\n * PureMVC Mediator 接口定义。\r\n * \r\n * Mediator实例：\r\n * 实现一个通用方法，该方法返回IMediator实例所有注册的INotification列表\r\n * 实现INotification回调方法\r\n * 注册或删除时的钩子方法\r\n * 充当一个或多个视图组件（例如文本框或文本框）之间的中介控件，维护引用并协调其行为\r\n * 在PureMVC应用程序中，这是添加事件侦听器及其实现的处理程序，响应并生成INotifications\r\n * \r\n * 当IMediator在 IView 中注册时，IView 将调用IMediator的listNotificationInterests方法，IMediator将返回 INotification 名称列表\r\n * IView将创建一个 Observer 对象以获得通知。\r\n * 封装该IMediator的handleNotification方法，用于处理INotification发送的通知\r\n */\r\nexport interface IMediator {\r\n    /**\r\n     * @description 获取Mediator名称\r\n     * @return {string} Mediator名称\r\n     */\r\n    getMediatorName(): string;\r\n\r\n    /**\r\n     * @description 获取视图组件（getter）\r\n     * @returns {any} 视图组件\r\n     */\r\n    getViewComponent(): any;\r\n\r\n    /**\r\n     * @description 设置视图组件（setter）\r\n     * @param {any} viewComponent 视图组件\r\n     */\r\n    setViewComponent(viewComponent: any): void;\r\n\r\n    /**\r\n     * @description 获取INotification名称列表\r\n     * @returns {string[]} INotification名称列表\r\n     */\r\n    listNotificationInterests(): string[];\r\n\r\n    /**\r\n     * @description 用于处理notification通知\r\n     * @param {INotification} notification 通知实例\r\n     */\r\n    handleNotification(notification: INotification): void;\r\n\r\n    /**\r\n     * @description 注册钩子函数（被子类重写,以了解何时注册实例。）\r\n     */\r\n    onRegister(): void;\r\n    /**\r\n     * @description 移除钩子函数 (由子类重写,以了解何时删除实例)\r\n     */\r\n    onRemove(): void;\r\n}"]}
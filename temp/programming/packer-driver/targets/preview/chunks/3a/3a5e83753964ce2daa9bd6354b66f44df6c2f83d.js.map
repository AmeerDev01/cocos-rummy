{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/thor/components/Thor_BoxPanel.ts"],"names":["_decorator","Label","Node","BaseComponent","ccclass","property","Thor_BoxPanel","awardBoxMap","propertyNode","props_Layout_box_wrap","props_Layout_times","props_Label_sgTimes","props","openDoBoxData","remainGameTimes","BONUS","events","onOpenHandler","boxId","onFreeGameAmoundChange","amount","allDoneHandler","updateTimesHandler","times","jactpotType","flyTimer","targetViewModel","start","initState","bindEvent","useProps","key","value","cur","find","item","comp","setProps","string","bindUI","getTimesNode","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAoCC,MAAAA,K,OAAAA,K;AAAOC,MAAAA,I,OAAAA,I;;AAC3CC,MAAAA,a,iBAAAA,a;;;;;;;;;OACH;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBL,U;;+BA+BjBM,a,WADZF,OAAO,CAAC,eAAD,C,gBAAR,MACaE,aADb;AAAA;AAAA,0CACyE;AAAA;AAAA;AAAA,eAEjEC,WAFiE,GAEU,EAFV;AAAA,eAG9DC,YAH8D,GAG/C;AACxB;AACAC,YAAAA,qBAAqB,EAAE,IAAIP,IAAJ,EAFC;;AAGxB;AACAQ,YAAAA,kBAAkB,EAAE,IAAIR,IAAJ,EAJI;;AAKxB;AACAS,YAAAA,mBAAmB,EAAE,IAAIV,KAAJ;AANG,WAH+C;AAAA,eAYjEW,KAZiE,GAYjD;AACtBC,YAAAA,aAAa,EAAE,IADO;AAEtBC,YAAAA,eAAe,EAAE,CAFK;AAGtBC,YAAAA,KAAK,EAAE;AAHe,WAZiD;AAAA,eAkBjEC,MAlBiE,GAkBhD;AACvBC,YAAAA,aAAa,EAAGC,KAAD,IAAmB,CAAG,CADd;AAEvBC,YAAAA,sBAAsB,EAAGC,MAAD,IAAoB,CAAG,CAFxB;AAGvBC,YAAAA,cAAc,EAAE,MAAM,CAAG,CAHF;AAIvBC,YAAAA,kBAAkB,EAAE,CAACC,KAAD,EAAgBC,WAAhB,KAA8C,CAAG;AAJ9C,WAlBgD;AAAA,eAgChEC,QAhCgE,GAgC7C,CAAC,CAhC4C;AAAA,eAiChEC,eAjCgE;AAAA;;AACxEC,QAAAA,KAAK,GAAG,CAAG;;AAwBDC,QAAAA,SAAS,GAAG;AACrB,iBAAO,EAAP;AACA;;AAESC,QAAAA,SAAS,GAAS,CAE3B;;AAGSC,QAAAA,QAAQ,CAACC,GAAD,EAAoBC,KAApB,EAAmD;AACpE,cAAID,GAAG,KAAK,eAAR,IAA2BC,KAAK,CAACC,GAArC,EAA0C;AACzC,iBAAKP,eAAL,GAAuB,KAAKnB,WAAL,CAAiB2B,IAAjB,CAAsBC,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUxB,KAAV,CAAgBM,KAAhB,KAA0B,KAAKN,KAAL,CAAWC,aAAX,CAAyBK,KAAjF,CAAvB;AACA,iBAAKQ,eAAL,CAAqBW,QAArB,CAA8B,KAAKzB,KAAL,CAAWC,aAAzC;AACA;;AACD,cAAIkB,GAAG,KAAK,iBAAZ,EAA+B;AAC9B,iBAAKvB,YAAL,CAAkBG,mBAAlB,CAAsC2B,MAAtC,GAA+C,KAAK1B,KAAL,CAAWE,eAAX,GAA6B,EAA5E;AACA;;AACD,cAAIiB,GAAG,KAAK,OAAZ,EAAqB;AACpB,iBAAKL,eAAL,CAAqBW,QAArB,CAA8B;AAAEtB,cAAAA,KAAK,EAAEiB,KAAK,CAACC;AAAf,aAA9B;AACA;AACD;;AAESM,QAAAA,MAAM,GAAS,CACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIMC,QAAAA,YAAY,GAAG;AACrB,iBAAO,KAAKhC,YAAL,CAAkBE,kBAAzB;AACA;;AAED+B,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AAnFuE,O","sourcesContent":["import { _decorator, Component, instantiate, Label, Node, sys, tween, UIOpacity, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nconst { ccclass, property } = _decorator;\r\nimport { Thor_AwardBox, IState as AIIState, IProps as AIIProps, IEvent as AIEvent } from \"./Thor_AwardBox\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { footerViewModel, gameBoardViewModel, sourceManageSeletor } from \"../index\"\r\nimport { SKT_MAG_TYPE, sktMsgListener } from '../socketConnect';\r\nimport { IProps as Award_IProps } from './Thor_AwardBox';\r\nimport { updateSubGameTimes } from '../store/actions/game';\r\nimport { TaskSchedulerDefault } from '../../../utils/TaskScheduler';\r\nimport { JactpotType } from '../type';\r\nimport BaseViewModel from '../../../common/viewModel/BaseViewModel';\r\n\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\t/**马上要打开的宝箱和数据 */\r\n\topenDoBoxData?: Award_IProps,\r\n\t/**剩余小游戏次数 */\r\n\tremainGameTimes?: number,\r\n\t/**奖励金额 */\r\n\tBONUS?: number\r\n}\r\nexport interface IEvent {\r\n\tonOpenHandler: (boxId: number) => void\r\n\tonFreeGameAmoundChange: (amount: number) => void\r\n\tallDoneHandler: () => void,\r\n\tupdateTimesHandler: (times: number, jactpotType?: JactpotType) => void\r\n}\r\n\r\n@ccclass('Thor_BoxPanel')\r\nexport class Thor_BoxPanel extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() { }\r\n\tpublic awardBoxMap: BaseViewModel<Thor_AwardBox, AIIState, AIIProps, AIEvent>[] = []\r\n\tprotected propertyNode = {\r\n\t\t/**宝箱外包裹 */\r\n\t\tprops_Layout_box_wrap: new Node(),\r\n\t\t/**剩余次数外节点 */\r\n\t\tprops_Layout_times: new Node(),\r\n\t\t/**剩余次数 */\r\n\t\tprops_Label_sgTimes: new Label()\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\t\topenDoBoxData: null,\r\n\t\tremainGameTimes: 0,\r\n\t\tBONUS: 0\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\tonOpenHandler: (boxId: number) => { },\r\n\t\tonFreeGameAmoundChange: (amount: number) => { },\r\n\t\tallDoneHandler: () => { },\r\n\t\tupdateTimesHandler: (times: number, jactpotType?: JactpotType) => { }\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\r\n\t}\r\n\tprivate flyTimer: number = -1\r\n\tprivate targetViewModel: BaseViewModel<Thor_AwardBox, AIIState, AIIProps, AIEvent>\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\t\tif (key === \"openDoBoxData\" && value.cur) {\r\n\t\t\tthis.targetViewModel = this.awardBoxMap.find(item => item.comp.props.boxId === this.props.openDoBoxData.boxId)\r\n\t\t\tthis.targetViewModel.setProps(this.props.openDoBoxData)\r\n\t\t}\r\n\t\tif (key === \"remainGameTimes\") {\r\n\t\t\tthis.propertyNode.props_Label_sgTimes.string = this.props.remainGameTimes + ''\r\n\t\t}\r\n\t\tif (key === \"BONUS\") {\r\n\t\t\tthis.targetViewModel.setProps({ BONUS: value.cur })\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\t\t// for (let i = 0; i < 20; i++) {\r\n\t\t// \tconst awardBox = new BaseViewModel<Thor_AwardBox, AIIState, AIIProps, AIEvent>(\"Thor_AwardBox\").mountView(sourceManageSeletor().getFile(PrefabPathDefine.AWARD_BOX).source)\r\n\t\t// \t\t.appendTo(this.propertyNode.props_Layout_box_wrap).setProps({ boxId: i }).setEvent({\r\n\t\t// \t\t\tonOpenHandler: (boxId) => {\r\n\t\t// \t\t\t\tthis.events.onOpenHandler(boxId)\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\tupdateTimesHandler: (times, jactpotType) => {\r\n\t\t// \t\t\t\tthis.events.updateTimesHandler(times, jactpotType)\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\tcheckFlyEndHandler: () => {\r\n\t\t// \t\t\t\t// console.log(gameBoardViewModel.changeGameTypeTask.isExecute)\r\n\t\t// \t\t\t\tthis.flyTimer && window.clearTimeout(this.flyTimer)\r\n\t\t// \t\t\t\tthis.flyTimer = window.setTimeout(() => {\r\n\t\t// \t\t\t\t\tif (gameBoardViewModel.changeGameTypeTask && !gameBoardViewModel.changeGameTypeTask.isExecute) {\r\n\t\t// \t\t\t\t\t\tTaskSchedulerDefault().joinqQueue(gameBoardViewModel.changeGameTypeTask)\r\n\t\t// \t\t\t\t\t\tthis.events.allDoneHandler()\r\n\t\t// \t\t\t\t\t}\r\n\t\t// \t\t\t\t}, 3500)\r\n\t\t// \t\t\t},\r\n\t\t// \t\t\tonFreeGameAmoundChange: (amount: number) => {\r\n\t\t// \t\t\t\tthis.events.onFreeGameAmoundChange(amount)\r\n\t\t// \t\t\t}\r\n\t\t// \t\t})\r\n\t\t// \tthis.awardBoxMap.push(awardBox)\r\n\t\t// }\r\n\t}\r\n\r\n\r\n\r\n\tpublic getTimesNode() {\r\n\t\treturn this.propertyNode.props_Layout_times\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}
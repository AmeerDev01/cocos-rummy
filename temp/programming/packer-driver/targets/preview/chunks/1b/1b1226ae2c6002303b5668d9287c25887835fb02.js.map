{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/phoenix/Framework/interfaces/IFacade.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA","sourcesContent":["import { IMediator } from \"./IMediator\";\r\nimport { INotification } from \"./INotification\";\r\nimport { IProxy } from \"./IProxy\";\r\n\r\n/**\r\n * PureMVC Facade 接口定义\r\n * \r\n * 在PureMVC中，Facade充当核心MVC参与者（模型，视图，控制器）和应用程序的其余部分。\r\n */\r\nexport interface IFacade {\r\n    /**\r\n     * @description 注册命令\r\n     * @param {string} notificationName 命令名称\r\n     * @param {Function} commandClassRef 命令构造方法\r\n     */\r\n    registerCommand(notificationName: string, commandClassRef: Function): void;\r\n    /**\r\n     * @description 移除命令\r\n     * @param {string} notificationName\r\n     */\r\n    removeCommand(notificationName: string): void;\r\n    /**\r\n     * @description 查找命令是否已注册\r\n     * @param notificationName 命令名称\r\n     * @return {boolean}\r\n     */\r\n    hasCommand(notificationName: string): boolean;\r\n\r\n    /**\r\n     * @description 注册Proxy\r\n     * @param {IProxy} proxy Proxy实例\r\n     */\r\n    registerProxy(proxy: IProxy): void;\r\n    /**\r\n     * @description 查找Proxy\r\n     * @param proxyName Proxy名称\r\n     * @returns {IProxy} Proxy实例\r\n     */\r\n    retrieveProxy(proxyName: string): IProxy;\r\n    /**\r\n     * @description 移除Proxy\r\n     * @param {string} proxyName Proxy名称\r\n     * @return {IProxy} 被移除实例\r\n     */\r\n    removeProxy(proxyName: string): IProxy;\r\n    /**\r\n     * @description 判断Proxy是否已被注册\r\n     * @param proxyName Proxy实例名称\r\n     * @return {boolean}\r\n     */\r\n    hasProxy(proxyName: string): boolean;\r\n\r\n    /**\r\n     * @description 注册IMediator实例\r\n     * @param {IMediator} mediator\r\n     */\r\n    registerMediator(mediator: IMediator): void;\r\n    /**\r\n     * @description 查找IMediator实例\r\n     * @param mediatorName IMediator实例名称\r\n     * @returns {IMediator} IMediator实例\r\n     */\r\n    retrieveMediator(mediatorName: string): IMediator;\r\n    /**\r\n     * @description 移除IMediator实例\r\n     * @param mediatorName IMediator实例名称\r\n     * @returns {IMediator} IMediator实例\r\n     */\r\n    removeMediator(mediatorName: string): IMediator;\r\n    /**\r\n     * @description IMediator实例是否已注册\r\n     * @param mediatorName IMediator实例名称\r\n     * @returns {boolean}\r\n     */\r\n    hasMediator(mediatorName: string): boolean;\r\n\r\n    /**\r\n     * @description 通知IObserver以获得特定的INotification。\r\n     * @param {INotification} notification 通知实例\r\n     */\r\n    notifyObservers(notification: INotification): void;\r\n\r\n    /**\r\n     * @description \r\n     * @param {string} name\r\n     * @param {any} body\r\n     * @param {string} type\r\n     */\r\n    sendNotification(name: string, body: any, type: string): void\r\n}"]}
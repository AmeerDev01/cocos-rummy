{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/thor/viewModel/RollerPanelViewModel.ts"],"names":["ViewModel","StoreInject","getStore","GameModeType","GameType","IconEffectType","config","setStopRollAction","initRollAction","setIconEffect","setRollRoundEnd","setRollSpeed","setSmallBox","SKT_MAG_TYPE","sktMsgListener","dataTransfer","refreshData","DataKeyType","TaskScheduler","Task","PrefabPathDefine","footerViewModel","thor_Audio","gameBoardViewModel","sourceManageSeletor","EffectType","changeGameFreeGametotalMultiplier","changeMinigameCount","changeMultipleTotal","changeProfit","changeRoleAttack","changeViewGame","changeapostille","setWaiting","updateBalance","updateGameModeType","updateSubGameTimes","BaseViewModel","SoundPathDefine","addToastAction","SgBoxViewModel","sendNativeVibrate","RollerPanelViewModel","constructor","lastGameType","currGameType","viewGameType","rollerMap","taskScheduler","autoLaunchType","winnerDialog","apostille","isHasten","gameFreeGametotalMultiplier","balance","begin","initRollerMap","comp","setProps","SUBGAME1","dispatch","scheduleOnce","manualBetHandler","setEvent","setRoleAttacks","bl","allRollStop","console","info","playOneShot","ROLLER_END","flicherArr","ICON_EFFECT_DATA","forEach","item","Object","keys","length","task","done","i","gameWinningVos","v","NORMAIL","winningPosition","joinqQueue","theNumberOfAdditions","GAME_TYPE","INDEXADDFREECOUNT","setokkk","miniGameFlying","log","multiplier","multiplesOfFlight","RATES","samllMultiplier","addFrequency","ITEMTOTALMULTIPLIER","SUBGAME_TIMES","GAMEFREEGAMETOTALMULTIPLIER","addGold","MAIN","PROFIT_AMOUNT","FREE_GAME_AMOUNT","showAwardTask","checkAward","changeGameTypeTask","isExecute","BELL","THOR_FREE_DIALOG_WAIT","BALANCE","caculateDialog1","mountView","getFile","CACULATE","source","appendTo","parentNode","parent","effectType","EFFECT1","isModal","type","total","killSelfHandler","unMount","stop","play","BG_MUSIC_1","NEXTGAME_TYPE","buyToWin","normal","THOR_FREE_SUMMARY","caculateDialog2","BG_MUSIC_MAIN","probabilityDoublingSwitch","e","BUY_RATE_BTN_CLICK","isAccelerate","buyMiniGames","str","BUY_FREE_BTN","SGBOX","miniGameAmount","connect","add","LAUNCHER_BET","data","error","content","rollerItem","index","stopQueue","COINSAFTERBETTING","NONE","stopIndex","ROLLER_STOP_INDEX_ID","indexAddFreeCount","autoLauncherPanel","setLaunchEvent","state","asp","queue","queueIndex","isLargeRollGame","SUBGAME2","gameOption","largeRollOption","normalRollOption","push","iconQueue","map","iconId","uiData","find","id","iconEffect","height","singleRollerHeight","width","singleRollerWidth","intervalHeight","singleIntervalHeight","multiple","LargeIcon","LargeRoller","rolling","speed","rollerSpeed","speedBackUp","rollerWidth","intervalWidth","rollerIntervalWidth","stopIconIndex","direction","profitMultiple","PROFIT_MULTIPLE","winning","minRate","maxRate","BIG_PRIZE","glodAmount","OPEN_PRIZE","unMountCallBack","destoryQueue","rollerViewModelMap","mv","removeById","inject","game","autoLauncherType","roller","iconEffectData","betAmount","bettingInformation","gameMode","remainSubGameTimes","isRollEnd","roundAllEnd","minigameCount"],"mappings":"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","sourcesContent":["import { Node, log } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { Thor_RollerPanel, IProps, IEvent } from \"../components/Thor_RollerPanel\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { getStore } from \"../store\"\r\nimport { AutoLauncherType, DialogType, DirectionType, GameModeType, GameType, IconEffectType, RollerType } from \"../type\"\r\nimport config from \"../config\"\r\nimport { beginRollAction, setStopRollAction, initRollAction, endRollingAction, setIconEffect, setRollRoundEnd, setRollSpeed, setSmallBox } from \"../store/actions/roller\"\r\nimport { SKT_MAG_TYPE, sktMsgListener } from \"../socketConnect\"\r\nimport dataTransfer, { refreshData, DataKeyType, setData } from \"../dataTransfer\"\r\nimport TaskScheduler, { Task, TaskSchedulerDefault } from \"../../../utils/TaskScheduler\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { footerViewModel, thor_Audio, gameBoardViewModel, sourceManageSeletor } from \"../index\"\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\"\r\nimport { changeGame, changeGameFreeGametotalMultiplier, changeMinigameCount, changeMultipleTotal, changeProfit, changeRoleAttack, changeViewGame, changeapostille, setSubGameTimes, setWaiting, updateBalance, updateGameModeType, updateJackpotAmount, updateSubGameTimes } from \"../store/actions/game\"\r\nimport BaseViewModel from \"../../../common/viewModel/BaseViewModel\"\r\nimport { Thor_BigPrize, IState as BPIState, IProps as BPIProps, IEvent as BPIEvent } from \"../components/Thor_BigPrize\"\r\nimport { SoundPathDefine } from \"../sourceDefine/soundDefine\"\r\nimport { addToastAction } from \"../../../hall/store/actions/baseBoard\"\r\nimport SgBoxViewModel from \"./SgBoxViewModel\"\r\nimport { Thor_SmallGame_caculate, IState as CPIState, IProps as CPIProps, IEvent as CPIEvent } from \"../components/Thor_SmallGame_caculate\"\r\nimport { sendNativeVibrate } from \"../../../common/bridge\"\r\n\r\n@StoreInject(getStore())\r\nclass RollerPanelViewModel extends ViewModel<Thor_RollerPanel, IProps, IEvent> {\r\n  constructor() {\r\n    super('Thor_RollerPanel')\r\n  }\r\n  private lastGameType: GameType\r\n  private currGameType: GameType\r\n  private viewGameType: GameType\r\n  public rollerMap: RollerType[] = []\r\n  public taskScheduler: TaskScheduler = new TaskScheduler()\r\n  private autoLaunchType: AutoLauncherType\r\n  private winnerDialog: BaseViewModel<Thor_BigPrize, BPIState, BPIProps, BPIEvent>\r\n  private apostille: boolean\r\n  private isHasten: boolean\r\n  private gameFreeGametotalMultiplier: number\r\n  private balance: number\r\n  protected begin() {\r\n    // const rollerMap: RollerType[] = []\r\n    // this.dispatch(setRollRoundEnd(true))\r\n    this.initRollerMap()\r\n    // 手动切换场景\r\n    this.comp.setProps({ currGameType: this.currGameType })\r\n    if (this.currGameType !== GameType.SUBGAME1) {\r\n      this.dispatch(setRollRoundEnd(true))\r\n    }else{\r\n      this.comp.scheduleOnce(()=>{{\r\n        footerViewModel.manualBetHandler()\r\n      }},2)\r\n    }\r\n    this.setEvent({\r\n      setRoleAttacks: (bl) => {\r\n        this.dispatch(changeRoleAttack(bl))\r\n      },\r\n      allRollStop: () => {\r\n        console.info ('滚动结束');\r\n        thor_Audio.playOneShot(SoundPathDefine.ROLLER_END)\r\n        this.dispatch(changeMultipleTotal(0))\r\n        this.dispatch(changeMinigameCount(0))\r\n        this.dispatch(setSmallBox({}))\r\n        const flicherArr = dataTransfer(DataKeyType.ICON_EFFECT_DATA)\r\n        flicherArr.forEach(item => {\r\n          if (Object.keys(flicherArr).length > 0) {\r\n            for (let i in item.winningPosition) {\r\n              const task = new Task((done) => {\r\n                for (let i = 0; i < item.gameWinningVos.length; i++) {\r\n                  const v = item.gameWinningVos[i];\r\n                  this.dispatch(setSmallBox(v))\r\n                }\r\n                //console.log('消除列表',item.winningPosition[i]);\r\n                this.dispatch(setIconEffect(IconEffectType.NORMAIL, item.winningPosition[i]))\r\n                //闪烁2秒钟就结束\r\n                this.comp.scheduleOnce(()=>{{\r\n                  done()\r\n                }},2)\r\n              })\r\n              this.taskScheduler.joinqQueue(task, false)\r\n            }\r\n          }\r\n        })\r\n        const theNumberOfAdditions = new Task((done) => { // 添加万能特效图标\r\n          if (dataTransfer(DataKeyType.GAME_TYPE) == GameType.SUBGAME1 && dataTransfer(DataKeyType.INDEXADDFREECOUNT) > 2) {\r\n            this.comp.setokkk(done)\r\n          } else {\r\n            done()\r\n          }\r\n        })\r\n        this.taskScheduler.joinqQueue(theNumberOfAdditions, false)\r\n        const miniGameFlying = new Task((done) => { // 倍数飞行特效 \r\n          if(flicherArr.length>1 ){\r\n            console.log(flicherArr);\r\n            this.comp.multiplier(done)\r\n          }else{\r\n            done()\r\n          }\r\n        })\r\n        this.taskScheduler.joinqQueue(miniGameFlying, false)\r\n        const multiplesOfFlight = new Task((done) => { //小游戏飞行特效\r\n          if(flicherArr.length>1 && dataTransfer(DataKeyType.RATES).length > 0 && dataTransfer(DataKeyType.GAME_TYPE) == GameType.SUBGAME1){\r\n            this.comp.samllMultiplier(done)\r\n          }else{\r\n            done()\r\n          }\r\n        })\r\n        this.taskScheduler.joinqQueue(multiplesOfFlight, false)\r\n        const addFrequency = new Task((done) => {\r\n          // 倍数特效\r\n          this.dispatch(changeMultipleTotal(dataTransfer(DataKeyType.ITEMTOTALMULTIPLIER)))\r\n          //检查添加INDEXADDFREECOUNT\r\n          if (dataTransfer(DataKeyType.GAME_TYPE) == GameType.SUBGAME1) {\r\n            // 更新次数\r\n            this.dispatch(changeMinigameCount(dataTransfer(DataKeyType.INDEXADDFREECOUNT)))\r\n            this.dispatch(updateSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n            this.dispatch(changeGameFreeGametotalMultiplier(dataTransfer(DataKeyType.GAMEFREEGAMETOTALMULTIPLIER)))\r\n            this.comp.scheduleOnce(()=>{\r\n              done()\r\n            },1)\r\n          } else {\r\n            done()\r\n          }\r\n        })\r\n        this.taskScheduler.joinqQueue(addFrequency, false)\r\n        const addGold = new Task((done) => {\r\n          //图标效果执行完之后要执行的任务，检查是否有爆奖\r\n          if (dataTransfer(DataKeyType.GAME_TYPE) === GameType.MAIN) {\r\n            this.dispatch(changeProfit(dataTransfer(DataKeyType.PROFIT_AMOUNT)))\r\n          } else {\r\n            this.dispatch(changeProfit(dataTransfer(DataKeyType.FREE_GAME_AMOUNT)))\r\n          }\r\n          this.comp.scheduleOnce(()=>{\r\n            done()\r\n          },1)\r\n        })\r\n        this.taskScheduler.joinqQueue(addGold, false)\r\n        const showAwardTask = new Task((done) => {\r\n          //图标效果执行完之后要执行的任务，检查是否有爆奖\r\n          this.checkAward(done)\r\n        })\r\n        this.taskScheduler.joinqQueue(showAwardTask, false)\r\n        //是不是切换游戏\r\n        if (gameBoardViewModel.changeGameTypeTask && !gameBoardViewModel.changeGameTypeTask.isExecute) {\r\n          if (this.currGameType === GameType.SUBGAME1 && dataTransfer(DataKeyType.SUBGAME_TIMES) !== 0) {\r\n              //isSCATTER显示\r\n              this.taskScheduler.joinqQueue(new Task((done) => {\r\n                thor_Audio.playOneShot(SoundPathDefine.BELL)\r\n                  this.comp.setokkk(done)\r\n              }))\r\n            //马上执行的游戏类型是小游戏1\r\n            this.taskScheduler.joinqQueue(new Task((done) => {\r\n              if (this.apostille) {\r\n                this.initRollerMap(2)\r\n              }\r\n              thor_Audio.playOneShot(SoundPathDefine.THOR_FREE_DIALOG_WAIT)\r\n              //进小游戏游戏最后更新钱\r\n              this.dispatch(updateBalance(dataTransfer(DataKeyType.BALANCE)))\r\n              const caculateDialog1 = new BaseViewModel<Thor_SmallGame_caculate, CPIState, CPIProps, CPIEvent>('Thor_SmallGame_caculate').mountView(sourceManageSeletor()\r\n                .getFile(PrefabPathDefine.CACULATE).source).appendTo(this.parentNode.parent, { effectType: EffectType.EFFECT1, isModal: true })\r\n                .setProps({ type: 1, total: dataTransfer(DataKeyType.SUBGAME_TIMES), autoLaunchType: this.autoLaunchType })\r\n                .setEvent({\r\n                  killSelfHandler: () => {\r\n                    caculateDialog1.unMount(EffectType.EFFECT1)\r\n                    // 手动切换小游戏\r\n                    this.comp.setProps({ currGameType: 1 })\r\n                    this.dispatch(updateSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n                    thor_Audio.stop()\r\n                    thor_Audio.play(SoundPathDefine.BG_MUSIC_1, true)\r\n                    done()\r\n                  }\r\n                })\r\n            }), false)\r\n          }\r\n          // 主游戏\r\n          if (dataTransfer(DataKeyType.NEXTGAME_TYPE) === GameType.MAIN) {\r\n            this.taskScheduler.joinqQueue(new Task((done) => {\r\n              if (this.apostille) {\r\n                this.initRollerMap(1)\r\n                this.dispatch(updateGameModeType(GameModeType.buyToWin))\r\n              } else {\r\n                this.dispatch(updateGameModeType(GameModeType.normal))\r\n              }\r\n              //小游戏出来前更新钱\r\n              this.dispatch(updateBalance(dataTransfer(DataKeyType.BALANCE)))\r\n              if (dataTransfer(DataKeyType.FREE_GAME_AMOUNT) !== 0) {\r\n                thor_Audio.playOneShot(SoundPathDefine.THOR_FREE_SUMMARY)\r\n                const caculateDialog2 = new BaseViewModel<Thor_SmallGame_caculate, CPIState, CPIProps, CPIEvent>('Thor_SmallGame_caculate').mountView(sourceManageSeletor()\r\n                  .getFile(PrefabPathDefine.CACULATE).source).appendTo(this.parentNode.parent, { effectType: EffectType.EFFECT1, isModal: true })\r\n                  .setProps({ type: 2, total: dataTransfer(DataKeyType.FREE_GAME_AMOUNT), autoLaunchType: this.autoLaunchType })\r\n                  .setEvent({\r\n                    killSelfHandler: () => {\r\n                      this.dispatch(setRollRoundEnd(true))\r\n                      this.comp.setProps({ currGameType: 0 })\r\n                      caculateDialog2.unMount(EffectType.EFFECT1)\r\n                      this.dispatch(changeViewGame(0))\r\n                      thor_Audio.stop()\r\n                      thor_Audio.play(SoundPathDefine.BG_MUSIC_MAIN, true)\r\n                      done()\r\n                    }\r\n                  })\r\n              } else {\r\n                this.comp.setProps({ currGameType: 0 })\r\n                done()\r\n              }\r\n            }))\r\n          }\r\n          //禁用掉主下注按钮\r\n          // 切换场景\r\n          this.taskScheduler.joinqQueue(gameBoardViewModel.changeGameTypeTask)\r\n          this.taskScheduler.joinqQueue(new Task((done) => {\r\n            this.dispatch(setRollRoundEnd(true))\r\n            if (dataTransfer(DataKeyType.NEXTGAME_TYPE) == GameType.SUBGAME1) {\r\n              footerViewModel.manualBetHandler()\r\n            } else {\r\n              this.dispatch(setWaiting(true))\r\n            }\r\n            done()\r\n          }), false)\r\n        } else {\r\n          //不切换游戏\r\n          this.taskScheduler.joinqQueue(new Task((done) => {\r\n            this.dispatch(setRollRoundEnd(true))\r\n            this.dispatch(setWaiting(true))\r\n            if (dataTransfer(DataKeyType.NEXTGAME_TYPE) == GameType.SUBGAME1) {\r\n              footerViewModel.manualBetHandler()\r\n            } \r\n            if (dataTransfer(DataKeyType.GAME_TYPE) == GameType.MAIN) {\r\n              this.dispatch(updateBalance(dataTransfer(DataKeyType.BALANCE)))\r\n            }\r\n            done()\r\n          }), false)\r\n        }\r\n      },\r\n      // 道具状态\r\n      probabilityDoublingSwitch: (e) => {\r\n        this.dispatch(changeapostille(e))\r\n        this.initRollerMap()\r\n        thor_Audio.playOneShot(SoundPathDefine.BUY_RATE_BTN_CLICK)\r\n        if (e) {\r\n          this.dispatch(updateGameModeType(GameModeType.buyToWin))\r\n        } else {\r\n          this.dispatch(updateGameModeType(GameModeType.normal))\r\n        }\r\n      },\r\n      // 是否加速\r\n      isAccelerate: (e) => {\r\n        if (!e) {\r\n          this.dispatch(setRollSpeed(2))\r\n        } else {\r\n          this.dispatch(setRollSpeed(1))\r\n        }\r\n      },\r\n      buyMiniGames: (str) => {\r\n        thor_Audio.playOneShot(SoundPathDefine.BUY_FREE_BTN)\r\n        new SgBoxViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.SGBOX).source).appendTo(this.parentNode.parent, {\r\n          effectType: EffectType.EFFECT1, isModal: true,\r\n        }).setProps({ miniGameAmount: str, balance: this.balance }).setEvent({\r\n        }).connect()\r\n      }\r\n    })\r\n    this.dispatch(initRollAction(this.rollerMap))\r\n    sktMsgListener.add(SKT_MAG_TYPE.LAUNCHER_BET, \"roller\", (data, error) => {\r\n      if (error) {\r\n        this.dispatch(addToastAction({ content: error }))\r\n        this.rollerMap.forEach((rollerItem, index) => {\r\n          this.dispatch(setStopRollAction(index, 1))\r\n        })\r\n      } else {\r\n        refreshData(data)\r\n        this.taskScheduler.stopQueue(false)\r\n        if(dataTransfer(DataKeyType.GAME_TYPE) == GameType.MAIN){\r\n          this.dispatch(updateBalance(dataTransfer(DataKeyType.COINSAFTERBETTING)))\r\n        }\r\n        this.dispatch(setIconEffect(IconEffectType.NONE, []))\r\n        this.dispatch(changeViewGame(dataTransfer(DataKeyType.GAME_TYPE)))\r\n        const stopIndex: number[] = dataTransfer(DataKeyType.ROLLER_STOP_INDEX_ID)\r\n        this.rollerMap.forEach((rollerItem, index) => {\r\n          this.dispatch(setStopRollAction(index, stopIndex ? stopIndex[index] : 0))\r\n        })\r\n        let indexAddFreeCount = dataTransfer(DataKeyType.INDEXADDFREECOUNT)\r\n        if (indexAddFreeCount > 2) { // 加次数的时候 先减再加\r\n          this.dispatch(updateSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES) - indexAddFreeCount))\r\n        } else {\r\n          this.dispatch(updateSubGameTimes(dataTransfer(DataKeyType.SUBGAME_TIMES)))\r\n        }\r\n      }\r\n    }, 0)\r\n    this.dispatch(changeProfit(dataTransfer(this.viewGameType === GameType.MAIN ? DataKeyType.PROFIT_AMOUNT : DataKeyType.FREE_GAME_AMOUNT)))\r\n    this.comp.scheduleOnce(()=>{\r\n      this.dispatch(setWaiting(true))\r\n    },1.5)\r\n    footerViewModel.autoLauncherPanel.setLaunchEvent(() => {\r\n      footerViewModel.manualBetHandler()\r\n    })\r\n  }\r\n  public initRollerMap(state?) {\r\n    this.rollerMap = []\r\n    let asp = state\r\n    if (state) {\r\n      asp = state == 1 ? true : false\r\n    } else {\r\n      asp = this.apostille\r\n    }\r\n    config[!asp ? 'iconRollerQueue' : 'rateIconRollerQueue'].forEach((queue, queueIndex) => {\r\n      const isLargeRollGame: boolean = (this.currGameType === GameType.SUBGAME2 && queueIndex === 1)\r\n      const gameOption = isLargeRollGame ? config.largeRollOption : config.normalRollOption\r\n      this.rollerMap.push({\r\n        index: queueIndex,\r\n        iconQueue: queue.map((iconId, index) => {\r\n          const uiData = config[isLargeRollGame ? 'largeIcon' : 'rollerIcon'].find(i => i.id === iconId)\r\n          return {\r\n            iconId,\r\n            queueIndex: index + 1,\r\n            iconEffect: IconEffectType.NONE,\r\n            height: gameOption.singleRollerHeight,\r\n            width: gameOption.singleRollerWidth,\r\n            intervalHeight: gameOption.singleIntervalHeight,\r\n            multiple: [],\r\n            LargeIcon: (this.currGameType === GameType.SUBGAME2 && queueIndex == 1),\r\n            uiData\r\n          }\r\n        }),\r\n        LargeRoller: isLargeRollGame,\r\n        rolling: false,\r\n        speed: gameOption.rollerSpeed,\r\n        speedBackUp: gameOption.rollerSpeed,\r\n        width: gameOption.rollerWidth,\r\n        intervalWidth: gameOption.rollerIntervalWidth,\r\n        stopIconIndex: -1,\r\n        direction: gameOption.direction,\r\n      })\r\n    })\r\n    this.dispatch(initRollAction(this.rollerMap))\r\n  }\r\n  /**检查是否要爆奖，爆什么奖 */\r\n  private checkAward(done: Function) {\r\n    const profitMultiple = dataTransfer(DataKeyType.PROFIT_MULTIPLE)\r\n    const winning = config.winning.find(item => item.minRate <= profitMultiple && profitMultiple < item.maxRate)\r\n    if (winning) {\r\n      sendNativeVibrate(200)\r\n      const winnerDialog = new BaseViewModel<Thor_BigPrize, BPIState, BPIProps, BPIEvent>('Thor_BigPrize').mountView(sourceManageSeletor()\r\n        .getFile(PrefabPathDefine.BIG_PRIZE).source).appendTo(this.parentNode.parent, { effectType: EffectType.EFFECT1, isModal: true })\r\n        .setProps({ winning, glodAmount: dataTransfer(DataKeyType.PROFIT_AMOUNT) })\r\n        .setEvent({\r\n          killSelfHandler: () => {\r\n            winnerDialog.unMount(EffectType.EFFECT1)\r\n            this.comp.scheduleOnce(()=>{\r\n              done()\r\n            },1)\r\n          }\r\n        })\r\n      thor_Audio.playOneShot(SoundPathDefine.OPEN_PRIZE)\r\n    } else {\r\n      done()\r\n    }\r\n  }\r\n\r\n  protected unMountCallBack(): void {\r\n    this.taskScheduler.destoryQueue()\r\n    this.comp.rollerViewModelMap.forEach(mv => mv.unMount())\r\n    // this.comp.rollerViewModelMap = []\r\n    this.dispatch(initRollAction([]))\r\n    sktMsgListener.removeById(\"roller\")\r\n    // this.winnerDialog && this.winnerDialog.unMount()\r\n  }\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      this.lastGameType = state.game.currGameType\r\n      this.currGameType = state.game.currGameType\r\n      this.viewGameType = state.game.viewGameType\r\n      this.autoLaunchType = state.game.autoLauncherType\r\n      this.apostille = state.game.apostille\r\n      this.isHasten = state.game.isHasten\r\n      this.balance = state.game.balance\r\n      this.gameFreeGametotalMultiplier = state.game.gameFreeGametotalMultiplier\r\n      return {\r\n        rollerMap: state.roller.rollerMap,\r\n        iconEffectData: state.roller.iconEffectData,\r\n        // jackpotAmount: state.game.jackpotAmount,\r\n        betAmount: state.game.bettingInformation,\r\n        gameMode: state.game.gameMode,\r\n        remainSubGameTimes: state.game.remainSubGameTimes,\r\n        isHasten: state.game.isHasten,\r\n        isRollEnd: state.roller.roundAllEnd,\r\n        minigameCount: state.game.minigameCount,\r\n        gameFreeGametotalMultiplier: state.game.gameFreeGametotalMultiplier\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default RollerPanelViewModel\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/wheel/assets/script/extend.ts"],"names":["Number","prototype","formatAmountWithCommas","amount","parts","toFixed","split","integerPart","decimalPart","formattedIntegerPart","replace","formattedAmount","formatAmountWithLetter","FixedCount","num","units","unitIndex","length","isInteger","formatAmountWithLetter2","inputString","sp","indexOf","String","format","str","i","re","RegExp"],"mappings":"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","sourcesContent":["Number.prototype.formatAmountWithCommas = function (): string {\r\n\tconst amount = this as number;\r\n\tconst parts = amount.toFixed(2).split(\".\");\r\n\tconst integerPart = parts[0];\r\n\tconst decimalPart = parts[1];\r\n\tconst formattedIntegerPart = integerPart.replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n\tconst formattedAmount = +decimalPart === 0 ? formattedIntegerPart : formattedIntegerPart + \".\" + decimalPart;\r\n\treturn formattedAmount;\r\n}\r\n\r\nNumber.prototype.formatAmountWithLetter = function (FixedCount: number = 2): string {\r\n\tlet num = this as number;\r\n\tif (!num) return \"0\";\r\n\tconst units = ['', 'K', 'M'];\r\n\tlet unitIndex = 0;\r\n\r\n\t// 将数字按照1000为基数迭代缩小\r\n\twhile (num >= 1000 && unitIndex < units.length - 1) {\r\n\t\tnum /= 1000;\r\n\t\tunitIndex++;\r\n\t}\r\n\tif (Number.isInteger(num)) {\r\n\t\treturn num + units[unitIndex];\r\n\t} else {\r\n\t\t// 使用toFixed保留两位小数，并转换成字符串格式\r\n\t\treturn Number(num.toFixed(FixedCount)) + units[unitIndex];\r\n\t}\r\n}\r\n\r\nNumber.prototype.formatAmountWithLetter2 = function (isInteger: boolean): string {\r\n\tconst amount = this as number;\r\n\tconst parts = amount.toFixed(0).split(\".\");\r\n\tlet inputString = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\").replace(/,(?=[^,]*$)/g, 'K').replace(/,(?=[^,]*$)/, \"M\").replace(/,(?=[^,]*$)/, 'B');\r\n\tconst sp = inputString.split('K')\r\n\tif (!isInteger && inputString.indexOf('K') !== -1) {\r\n\t\treturn sp[0] + \"K\"\r\n\t}\r\n\tif (inputString.indexOf('K') !== -1) {\r\n\t\treturn sp[0] + \"K\" + (+sp[1] ? sp[1] : '');\r\n\t}\r\n\treturn inputString\r\n}\r\n\r\nString.prototype.format = function (...value): string {\r\n\tif (value.length == 0)\r\n\t\treturn this;\r\n\tlet str = this;\r\n\tfor (var i = 0; i < value.length; i++) {\r\n\t\tvar re = new RegExp('\\\\{' + i + '\\\\}', 'gm');\r\n\t\tstr = this.replace(re, value[i]);\r\n\t}\r\n\treturn str;\r\n}\r\n\r\nexport { }"]}
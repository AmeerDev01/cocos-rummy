{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/components/Hall_Upgrade.ts"],"names":["_decorator","Button","EditBox","Label","Node","BaseComponent","ApiUrl","fetcher","global","lang","addToastAction","InputValidator","ModalBox","ccclass","property","Hall_Upgrade","propertyNode","props_btn_spr_upgrade_close","props_intput_akun","props_intput_sandi","props_intput_kSandi","props_text_shuzi","props_btn_sure","props_label_uid","props","memberId","events","onClosePanel","doneHandler","start","initState","bindEvent","node","on","EventType","TOUCH_END","memberName","string","trim","password","password_re","begin","isIDAPhoneNumber","isChartLength","done","hallDispatch","content","write","k","HallModule","pwdRepetitionError","placeStr","send","MEMBER_UPGRADES","then","data","Instance","show","withdrawal","withdrawalSuccess","gold","type","BindPhoneModule","BindPhoneChange","catch","e","console","log","useProps","key","value","bindUI","GET_BIND_PHONE_GOLD","rsp","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator, Button, Component, EditBox, Label, Node } from 'cc';\r\nimport { BaseComponent } from '../../base/BaseComponent';\r\nimport { ApiUrl } from '../apiUrl';\r\nimport { fetcher, global, lang } from '../index';\r\nimport { addToastAction } from '../store/actions/baseBoard';\r\nimport InputValidator from '../../utils/InputValidator';\r\nimport ModalBox from '../../common/ModalBox';\r\nimport { registerAppsflyerEvents } from '../../common/bridge';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\tmemberId: string\r\n}\r\nexport interface IEvent {\r\n\tonClosePanel: () => void\r\n\tdoneHandler: () => void\r\n}\r\n\r\n@ccclass('Hall_Upgrade')\r\nexport class Hall_Upgrade extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() { }\r\n\r\n\tprotected propertyNode = {\r\n\t\tprops_btn_spr_upgrade_close: new Button(),\r\n\t\t/**账户名 */\r\n\t\tprops_intput_akun: new EditBox(),\r\n\t\t/**密码 */\r\n\t\tprops_intput_sandi: new EditBox(),\r\n\t\t/**确认密码 */\r\n\t\tprops_intput_kSandi: new EditBox(),\r\n\t\t/**升级会获取到的金币 */\r\n\t\tprops_text_shuzi: new Label(),\r\n\t\t/**确认 */\r\n\t\tprops_btn_sure: new Button(),\r\n\t\tprops_label_uid: new Label()\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\t\tmemberId: \"\"\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\tonClosePanel: () => { },\r\n\t\tdoneHandler: () => { }\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\t\tthis.propertyNode.props_btn_spr_upgrade_close.node.on(Node.EventType.TOUCH_END, () => {\r\n\t\t\tthis.events.onClosePanel()\r\n\t\t})\r\n\t\tthis.propertyNode.props_btn_sure.node.on(Node.EventType.TOUCH_END, () => {\r\n\t\t\tconst memberName = this.propertyNode.props_intput_akun.string.trim()\r\n\t\t\tconst password = this.propertyNode.props_intput_sandi.string.trim()\r\n\t\t\tconst password_re = this.propertyNode.props_intput_kSandi.string.trim()\r\n\t\t\tnew InputValidator().begin().isIDAPhoneNumber(memberName).isChartLength([6, 30], password).isChartLength([6, 30], password_re).done(() => {\r\n\t\t\t\tif (password !== password_re) {\r\n\t\t\t\t\tglobal.hallDispatch(addToastAction({ content: lang.write(k => k.HallModule.pwdRepetitionError, {}, { placeStr: \"两次输入的密码不一致\" }) }))\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfetcher.send(ApiUrl.MEMBER_UPGRADES, {\r\n\t\t\t\t\tmemberId: this.props.memberId, memberName, password\r\n\t\t\t\t}).then((data) => {\r\n\t\t\t\t\t//操作成功\r\n\t\t\t\t\tif (data !== -1 && data !== 0) {\r\n\t\t\t\t\t\t// global.hallDispatch(addToastAction({ content: lang.write(k => k.BindPhoneModule.BindPhoneChange, {}, { placeStr: \"操作成功\" }) }))\r\n\t\t\t\t\t\tModalBox.Instance().show({ content: lang.write(k => k.withdrawal.withdrawalSuccess, { gold: data }, { placeStr: \"升级账号成功获取金币\" }), type: \"Prompt\" }, () => {\r\n\t\t\t\t\t\t\tthis.events.doneHandler()\r\n\t\t\t\t\t\t\t// 绑定手机号码不发送事件\r\n\t\t\t\t\t\t\t// registerAppsflyerEvents(this.props.memberId, password)\r\n\t\t\t\t\t\t\treturn true\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tglobal.hallDispatch(addToastAction({ content: lang.write(k => k.BindPhoneModule.BindPhoneChange, {}, { placeStr: \"操作成功\" }) }))\r\n\t\t\t\t\t\tthis.events.doneHandler()\r\n\t\t\t\t\t}\r\n\t\t\t\t}).catch((e) => {\r\n\t\t\t\t\tconsole.log(e)\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\t\tif (key === \"memberId\") {\r\n\t\t\tthis.propertyNode.props_label_uid.string = this.props.memberId\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\t\tfetcher.send(ApiUrl.GET_BIND_PHONE_GOLD, {}, 'get').then((rsp) => {\r\n\t\t\tthis.propertyNode.props_text_shuzi.string = rsp\r\n\t\t}).catch((e) => {\r\n\r\n\t\t})\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}
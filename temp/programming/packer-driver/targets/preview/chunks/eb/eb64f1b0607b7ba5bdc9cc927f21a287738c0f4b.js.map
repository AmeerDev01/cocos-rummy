{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/Crash/utils/Counter.ts"],"names":["Counter","constructor","duration","interval","total","callback","timeElapsed","currentValue","accumulatedTime","shouldStop","update","dt","intervalInSeconds"],"mappings":";;;iBAAqBA,O;;;;;;;;;;;;;yBAAAA,O,GAAN,MAAMA,OAAN,CAAc;AASzBC,QAAAA,WAAW,CAACC,QAAD,EAAmBC,QAAnB,EAAoCC,KAApC,EAAkDC,QAAlD,EAAqF;AAAA,eARxFH,QAQwF;AAAA,eAPxFC,QAOwF;AAAA,eANxFC,KAMwF;AAAA,eALxFE,WAKwF;AAAA,eAJxFD,QAIwF;AAAA,eAHxFE,YAGwF;AAAA,eAFxFC,eAEwF;AAAA,eADxFC,UACwF,GADpE,KACoE;AAC5F,eAAKP,QAAL,GAAgBA,QAAhB;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACA,eAAKC,KAAL,GAAaA,KAAb;AACA,eAAKC,QAAL,GAAgBA,QAAhB;AACA,eAAKC,WAAL,GAAmB,CAAnB;AACA,eAAKC,YAAL,GAAoB,CAApB;AACA,eAAKC,eAAL,GAAuB,CAAvB;AACA,eAAKH,QAAL,CAAc,KAAKE,YAAnB,EAR4F,CAQ1D;AACrC;;AAEDG,QAAAA,MAAM,CAACC,EAAD,EAAa;AACf,cAAG,KAAKF,UAAR,EAAmB;AACf;AACH;;AACD,eAAKH,WAAL,IAAoBK,EAApB;;AACA,cAAI,KAAKL,WAAL,IAAoB,KAAKJ,QAA7B,EAAuC;AACnC,iBAAKG,QAAL,CAAc,KAAKD,KAAnB,EADmC,CACR;;AAC3B,iBAAKK,UAAL,GAAgB,IAAhB;AACA;AACH;;AAED,eAAKD,eAAL,IAAwBG,EAAxB;AACA,cAAMC,iBAAiB,GAAG,KAAKT,QAAL,GAAgB,IAA1C;;AACA,cAAI,KAAKK,eAAL,IAAwBI,iBAA5B,EAA+C;AAC3C,iBAAKJ,eAAL,IAAwBI,iBAAxB;AACA,iBAAKL,YAAL,GAAoB,KAAKD,WAAL,GAAmB,KAAKJ,QAAxB,GAAmC,KAAKE,KAA5D;AACA,iBAAKC,QAAL,CAAc,KAAKE,YAAnB;AACH;AACJ;;AAtCwB,O","sourcesContent":["export default class Counter {\r\n    private duration: number;\r\n    private interval: number;\r\n    private total: number;\r\n    private timeElapsed: number;\r\n    private callback: (value: number) => void;\r\n    private currentValue: number;\r\n    private accumulatedTime: number;\r\n    private shouldStop: boolean=false;\r\n    constructor(duration: number, interval: number,total:number, callback: (value: number) => void) {\r\n        this.duration = duration;\r\n        this.interval = interval;\r\n        this.total = total;\r\n        this.callback = callback;\r\n        this.timeElapsed = 0;\r\n        this.currentValue = 0;\r\n        this.accumulatedTime = 0;\r\n        this.callback(this.currentValue); // 立即执行回调函数\r\n    }\r\n\r\n    update(dt: number) {\r\n        if(this.shouldStop){\r\n            return;\r\n        }\r\n        this.timeElapsed += dt;\r\n        if (this.timeElapsed >= this.duration) {\r\n            this.callback(this.total); // 确保最后一个值为22.22\r\n            this.shouldStop=true\r\n            return;\r\n        }\r\n\r\n        this.accumulatedTime += dt;\r\n        const intervalInSeconds = this.interval / 1000;\r\n        if (this.accumulatedTime >= intervalInSeconds) {\r\n            this.accumulatedTime -= intervalInSeconds;\r\n            this.currentValue = this.timeElapsed / this.duration * this.total;\r\n            this.callback(this.currentValue);\r\n        }\r\n    }\r\n}\r\n"]}
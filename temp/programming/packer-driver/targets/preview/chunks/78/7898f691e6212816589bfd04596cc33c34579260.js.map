{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/qiuqiu/qiuqiu_tool.ts"],"names":["config","DeskStatus","calCardPoint","value1","value2","sum","upFace","downFace","getPlayer","players","uid","find","v","clearInitStateType","data","playerMap","Array","seatNumber","fill","deskStatus","WAITING","lastActiveSeatIndex","currActiveSeatIndex","gold","betAmount","totalBetAmount","splitChip","paramValue","arr","split","value","i","chips","length","chip","push","getOptimalCardGroup","cardItems","newArr","permutations","map","shift","calNum","cardGroup","cardGroup1","sort","v1","v2","res","len","arrange","tempArr","leftArr","forEach","item","index","temp","concat","splice","getRoomUpper","roomInfo","upper"],"mappings":"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","sourcesContent":["import config from \"./config\";\r\nimport { InitStateType } from \"./store/action/game\";\r\nimport { CardGroup, CardItem, DeskStatus, Player, RoomInfo } from \"./type\";\r\n\r\nexport const calCardPoint = (value1: CardItem, value2: CardItem) => {\r\n  const sum = value1.upFace + value1.downFace + value2.upFace + value2.downFace;\r\n  return sum % 10;\r\n}\r\n\r\nexport const getPlayer = (players: Player[], uid: string) => {\r\n  return players.find(v => v && v.uid === uid);\r\n}\r\n\r\nexport const clearInitStateType = (data: InitStateType) => {\r\n  data.playerMap = new Array(config.seatNumber).fill(null);\r\n  data.deskStatus = DeskStatus.WAITING;\r\n  data.lastActiveSeatIndex = -1;\r\n  data.currActiveSeatIndex = -1;\r\n  data.gold = 0;\r\n  data.betAmount = 0;\r\n  data.totalBetAmount = 0;\r\n}\r\n\r\n/**\r\n * 根据传入金额，拆分多个筹码\r\n * @param paramValue \r\n * @returns \r\n */\r\nexport const splitChip = (paramValue: number) => {\r\n  const arr: number[] = [];\r\n  const split = (value: number) => {\r\n    for (let i = config.chips.length - 1; i >= 0; i--) {\r\n      const chip = config.chips[i];\r\n      if (value >= chip.value) {\r\n        value -= chip.value;\r\n        arr.push(chip.value);\r\n        if (value > 0) {\r\n          split(value);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  split(paramValue);\r\n  return arr;\r\n}\r\n\r\nexport const getOptimalCardGroup = (cardItems: CardItem[]) => {\r\n  // 找出所有组合\r\n  const newArr = permutations(cardItems).map(v => {\r\n    const arr = v as CardItem[]\r\n    const cardItems = [arr.shift(), arr.shift()]\r\n    let sum = calNum(cardItems);\r\n    const cardGroup: CardGroup = {\r\n      cardItems,\r\n      sum: sum,\r\n    }\r\n\r\n    sum = calNum(arr);\r\n    const cardGroup1: CardGroup = {\r\n      cardItems: arr,\r\n      sum: sum,\r\n    }\r\n    return [cardGroup, cardGroup1];\r\n  });\r\n\r\n  // 排序\r\n  newArr.sort((v1, v2) => {\r\n    let res = v2[0].sum - v1[0].sum;\r\n    if (res === 0) {\r\n      res = v2[1].sum - v1[1].sum;\r\n    }\r\n    return res;\r\n  })\r\n\r\n  return newArr[0];\r\n}\r\n\r\nexport const permutations = (arr: CardItem[]) => {\r\n  let len = arr.length\r\n  let res = [] // 所有排列结果\r\n  /**\r\n   * 【全排列算法】\r\n   * 说明：arrange用来对arr中的元素进行排列组合，将排列好的各个结果存在新数组中\r\n   * @param tempArr：排列好的元素\r\n   * @param leftArr：待排列元素\r\n   */\r\n  let arrange = (tempArr, leftArr) => {\r\n    if (tempArr.length === len) { // 这里就是递归结束的地方\r\n      res.push(tempArr) // 得到全排列的每个元素都是数组\r\n    } else {\r\n      leftArr.forEach((item, index) => {\r\n        let temp = [].concat(leftArr)\r\n        temp.splice(index, 1)\r\n        // 此时，第一个参数是当前分离出的元素所在数组；第二个参数temp是传入的leftArr去掉第一个后的结果\r\n        arrange(tempArr.concat(item), temp) // 这里使用了递归\r\n      })\r\n    }\r\n  }\r\n  arrange([], arr)\r\n  return res\r\n}\r\n\r\nexport const calNum = (cardItems: CardItem[]) => {\r\n  let sum = 0;\r\n  cardItems.forEach(v => sum += v.downFace + v.upFace)\r\n  return sum % 10;\r\n}\r\n\r\nexport const getRoomUpper = (roomInfo: RoomInfo)=> {\r\n  return roomInfo.upper > 0 ? roomInfo.upper : 10000000000000000;\r\n}\r\n"]}
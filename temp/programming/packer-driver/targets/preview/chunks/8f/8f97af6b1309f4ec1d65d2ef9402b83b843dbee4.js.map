{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/wheel/assets/script/wheel.ts"],"names":["removeComma","str","newStr","replace","_decorator","Component","Node","Vec3","tween","Label","sp","ccclass","property","PlayChouJiang","itemNum","isSpinning","getUrlParams","name","reg","RegExp","r","window","location","search","substring","match","unescape","getRandom","e","t","Math","floor","random","playGame","that","wheelNode","angle","target","by","easing","call","getJackPot","start","closeJackPot","jackPot","active","num","SkeletonNode","isWild","tipLabel","string","wild","strawberry","banana","apple","grape","watermelon","getComponent","Skeleton","animation","delay","gold","gold_num","TipNum","Number","formatAmountWithCommas","convertToMandK","number","M","toFixed","K","getRootPosition","node","totalX","totalY","parent","x","position","y"],"mappings":";;;;;;;;;;;AAwKO,WAASA,WAAT,CAAqBC,GAArB,EAAyB;AAC/B,QAAMC,MAAM,GAACD,GAAG,CAACE,OAAJ,CAAY,IAAZ,EAAiB,EAAjB,CAAb;AACA,WAAOD,MAAP;AACA;;yBAHeF,W;;;;;;;AAvKZI,MAAAA,U,OAAAA,U;AACAC,MAAAA,S,OAAAA,S;AACAC,MAAAA,I,OAAAA,I;AACAC,MAAAA,I,OAAAA,I;AACAC,MAAAA,K,OAAAA,K;AAIAC,MAAAA,K,OAAAA,K;AAEAC,MAAAA,E,OAAAA,E;;;;;;;;;OAGI;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBR,U;;+BAKnBS,a,WADZF,OAAO,CAAC,OAAD,C,UAGHC,QAAQ,CAACN,IAAD,C,UAGRM,QAAQ,CAACN,IAAD,C,UAERM,QAAQ,CAACN,IAAD,C,UAERM,QAAQ,CAACH,KAAD,C,UAGRG,QAAQ,CAACH,KAAD,C,UAERG,QAAQ,CAACN,IAAD,C,UAERM,QAAQ,CAACN,IAAD,C,UAERM,QAAQ,CAACN,IAAD,C,WAERM,QAAQ,CAACN,IAAD,C,WAERM,QAAQ,CAACN,IAAD,C,WAERM,QAAQ,CAACN,IAAD,C,2BAzBb,MACaO,aADb,SACmCR,SADnC,CAC6C;AAAA;AAAA;;AACzC;AADyC;;AAIzC;AAJyC;;AAAA;;AAAA;;AAWzC;AAXyC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AA0BzC;AA1ByC,eA2BjCS,OA3BiC,GA2Bf,CA3Be;;AA4BzC;AA5ByC,eA6BjCC,UA7BiC,GA6BX,KA7BW;;AAsDzC;AAtDyC,eAuDjCC,YAvDiC,GAuDjBC,IAAD,IAAkB;AACrC,gBAAIC,GAAG,GAAG,IAAIC,MAAJ,CAAW,UAAUF,IAAV,GAAiB,eAA5B,EAA6C,GAA7C,CAAV;AACA,gBAAIG,CAAC,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,SAAvB,CAAiC,CAAjC,EAAoCC,KAApC,CAA0CP,GAA1C,CAAR;;AACA,gBAAIE,CAAC,IAAI,IAAT,EAAe;AACX,qBAAOM,QAAQ,CAACN,CAAC,CAAC,CAAD,CAAF,CAAf;AACH;;AACD,mBAAO,IAAP;AACH,WA9DwC;AAAA;;AA+BzC;AACQO,QAAAA,SAAS,CAACC,CAAD,EAAWC,CAAX,EAA2B;AACxC,iBAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,CAAC,GAAGD,CAArB,CAAX,IAAsCA,CAA7C;AACH;AACD;;;AACAK,QAAAA,QAAQ,GAAQ;AACZ,cAAIC,IAAI,GAAG,IAAX;;AACA,cAAGA,IAAI,CAACnB,UAAR,EAAmB;AAAE;AAAQ;;AAC7BmB,UAAAA,IAAI,CAACC,SAAL,CAAeC,KAAf,GAAuB,EAAvB;AACAF,UAAAA,IAAI,CAACnB,UAAL,GAAkB,IAAlB;AACA,cAAIsB,MAAM,GAAGH,IAAI,CAACP,SAAL,CAAe,CAAf,EAAkB,GAAlB,CAAb,CALY,CAMZ;;AACAnB,UAAAA,KAAK,CAAC0B,IAAI,CAACC,SAAN,CAAL,CACCG,EADD,CACI,CADJ,EACO;AAAEF,YAAAA,KAAK,EAAE,CAAC;AAAV,WADP,EACyB;AAAEG,YAAAA,MAAM,EAAE;AAAV,WADzB,EAECD,EAFD,CAEI,CAFJ,EAEO;AAAEF,YAAAA,KAAK,EAAE,EAAEC,MAAM,GAAG,IAAX;AAAT,WAFP,EAEmC;AAAEE,YAAAA,MAAM,EAAE;AAAV,WAFnC,EAGCC,IAHD,CAGM,MAAM;AAAEN,YAAAA,IAAI,CAACO,UAAL,CAAgBJ,MAAhB;AAAyB,WAHvC,EAICK,KAJD;AAKH;;AAEDC,QAAAA,YAAY,GAAG;AACX,cAAIT,IAAI,GAAG,IAAX;AACAA,UAAAA,IAAI,CAACU,OAAL,CAAaC,MAAb,GAAsB,KAAtB;AACH;;AAUD;AACQJ,QAAAA,UAAU,CAACJ,MAAD,EAAqB;AACnC,cAAIH,IAAI,GAAG,IAAX;AACA,cAAIY,GAAG,GAAGhB,IAAI,CAACC,KAAL,CAAWM,MAAM,IAAI,MAAMH,IAAI,CAACpB,OAAf,CAAjB,CAAV,CAFmC,CAGnC;;AACA,cAAIiC,YAAkB,GAAG,IAAzB;AACA,cAAIC,MAAe,GAAG,KAAtB;;AACA,kBAAQF,GAAR;AACI,iBAAK,CAAL;AACIZ,cAAAA,IAAI,CAACe,QAAL,CAAcC,MAAd,GAAuB,QAAvB;AACAH,cAAAA,YAAY,GAAGb,IAAI,CAACiB,IAApB;AACAH,cAAAA,MAAM,GAAG,IAAT;AACA;;AACJ,iBAAK,CAAL;AACId,cAAAA,IAAI,CAACe,QAAL,CAAcC,MAAd,GAAuB,KAAvB;AACAH,cAAAA,YAAY,GAAGb,IAAI,CAACkB,UAApB;AACA;;AACJ,iBAAK,CAAL;AACIlB,cAAAA,IAAI,CAACe,QAAL,CAAcC,MAAd,GAAuB,KAAvB;AACAH,cAAAA,YAAY,GAAGb,IAAI,CAACmB,MAApB;AACA;;AACJ,iBAAK,CAAL;AACInB,cAAAA,IAAI,CAACe,QAAL,CAAcC,MAAd,GAAuB,KAAvB;AACAH,cAAAA,YAAY,GAAGb,IAAI,CAACoB,KAApB;AACA;;AACJ,iBAAK,CAAL;AACIpB,cAAAA,IAAI,CAACe,QAAL,CAAcC,MAAd,GAAuB,KAAvB;AACAH,cAAAA,YAAY,GAAGb,IAAI,CAACqB,KAApB;AACA;;AACJ,iBAAK,CAAL;AACIrB,cAAAA,IAAI,CAACe,QAAL,CAAcC,MAAd,GAAuB,IAAvB,CADJ,CACgC;;AAC5BH,cAAAA,YAAY,GAAGb,IAAI,CAACsB,UAApB;AACA;AAzBR;;AA2BA,cAAIR,MAAJ,EAAY;AACRd,YAAAA,IAAI,CAACiB,IAAL,CAAUM,YAAV,CAAuB/C,EAAE,CAACgD,QAA1B,EAAoCC,SAApC,GAAgD,WAAhD;AAEH,WAHD,MAGO;AAEHZ,YAAAA,YAAY,CAACU,YAAb,CAA0B/C,EAAE,CAACgD,QAA7B,EAAuCC,SAAvC,GAAmD,YAAnD;AACH;;AACDnD,UAAAA,KAAK,CAAC0B,IAAI,CAACU,OAAN,CAAL,CACCgB,KADD,CACO,CADP,EAECpB,IAFD,CAEM,MAAM;AACRN,YAAAA,IAAI,CAACU,OAAL,CAAaC,MAAb,GAAsB,IAAtB;AACH,WAJD,EAKCH,KALD;AAMA,cAAImB,IAAI,GAAG7D,WAAW,CAACkC,IAAI,CAAC4B,QAAL,CAAcZ,MAAf,CAAtB;AACA,cAAIa,MAAM,GAAG/D,WAAW,CAACkC,IAAI,CAACe,QAAL,CAAcC,MAAf,CAAxB;AACAhB,UAAAA,IAAI,CAAC4B,QAAL,CAAcZ,MAAd,GAAuB,CAACc,MAAM,CAACH,IAAD,CAAN,GAAeG,MAAM,CAACD,MAAD,CAAtB,EAAgCE,sBAAhC,EAAvB;AACAzD,UAAAA,KAAK,CAAC0B,IAAI,CAACU,OAAN,CAAL,CACCgB,KADD,CACO,CADP,EAECpB,IAFD,CAEM,MAAM;AACRN,YAAAA,IAAI,CAACU,OAAL,CAAaC,MAAb,GAAsB,KAAtB;AACAX,YAAAA,IAAI,CAACnB,UAAL,GAAkB,KAAlB;AACAgC,YAAAA,YAAY,CAACU,YAAb,CAA0B/C,EAAE,CAACgD,QAA7B,EAAuCC,SAAvC,GAAmD,EAAnD;AACH,WAND,EAOCjB,KAPD;AAQH;AACD;;;AACQwB,QAAAA,cAAc,CAACC,MAAD,EAAuB;AACzC,cAAIA,MAAM,IAAI,OAAd,EAAuB;AACnB,gBAAIC,CAAC,GAAG,CAACD,MAAM,GAAG,OAAV,EAAmBE,OAAnB,CAA2B,CAA3B,CAAR;AACA,mBAAUD,CAAV;AACH,WAHD,MAGO,IAAID,MAAM,IAAI,IAAd,EAAoB;AACvB,gBAAIG,CAAC,GAAG,CAACH,MAAM,GAAG,IAAV,EAAgBE,OAAhB,CAAwB,CAAxB,CAAR;AACA,mBAAUC,CAAV;AACH,WAHM,MAGA;AACH,wBAAUH,MAAV;AACH;AACJ;;AArIwC,O;;;;;iBAGvB,I;;;;;;;iBAGF,I;;;;;;;iBAEE,I;;;;;;;iBAEA,I;;;;;;;iBAGA,I;;;;;;;iBAEC,I;;;;;;;iBAEJ,I;;;;;;;iBAED,I;;;;;;;iBAEA,I;;;;;;;iBAEK,I;;;;;;;iBAEN,I;;;;iCAkHJI,e,GAAkB,CAACC,IAAD,EAAaC,MAAb,EAA8BC,MAA9B,KAA6D;AACxF,YAAIF,IAAI,CAACG,MAAL,CAAY1D,IAAZ,KAAqB,QAAzB,EAAmC;AAC/B,iBAAO,IAAIV,IAAJ,CAASkE,MAAT,EAAiBC,MAAjB,EAAyB,CAAzB,CAAP;AACH,SAFD,MAEO;AACH,cAAME,CAAC,GAAGJ,IAAI,CAACK,QAAL,CAAcD,CAAd,GAAkBJ,IAAI,CAACG,MAAL,CAAYE,QAAZ,CAAqBD,CAAjD;AACA,cAAME,CAAC,GAAGN,IAAI,CAACK,QAAL,CAAcC,CAAd,GAAkBN,IAAI,CAACG,MAAL,CAAYE,QAAZ,CAAqBC,CAAjD;AACA,iBAAOP,eAAe,CAACC,IAAI,CAACG,MAAN,EAAcC,CAAd,EAAiBE,CAAjB,CAAtB;AACH;AACJ,O","sourcesContent":["import {\r\n    _decorator,\r\n    Component,\r\n    Node,\r\n    Vec3,\r\n    tween,\r\n    Sprite,\r\n    SpriteFrame,\r\n    UITransform,\r\n    Label,\r\n    math,\r\n    sp,\r\n  } from \"cc\";\r\n  import { DEV } from 'cc/env'\r\n  const { ccclass, property } = _decorator;\r\n  \r\n\r\n  \r\n@ccclass(\"wheel\")\r\nexport class PlayChouJiang extends Component { \r\n    /**转盘节点 */\r\n    @property(Node)\r\n    wheelNode: Node = null;\r\n    /**中奖框 */\r\n    @property(Node)\r\n    jackPot: Node = null;\r\n    @property(Node)\r\n    closeJack: Node = null;\r\n    @property(Label)\r\n    gold_num: Label = null;\r\n    /**中奖提示语 */\r\n    @property(Label)\r\n    tipLabel: Label = null;  \r\n    @property(Node)\r\n    strawberry: Node = null;\r\n    @property(Node)\r\n    banana: Node = null;\r\n    @property(Node)\r\n    apple: Node = null;\r\n    @property(Node)\r\n    grape: Node = null;\r\n    @property(Node)\r\n    watermelon: Node = null;\r\n    @property(Node)\r\n    wild: Node = null;\r\n    /**模块数 */\r\n    private itemNum: number = 6;\r\n    /**转盘是否在转动 */\r\n    private isSpinning: boolean = false;\r\n\r\n    /**获取随机角度值 */\r\n    private getRandom(e:number, t:number):number{\r\n        return Math.floor(Math.random() * (t - e)) + e\r\n    }\r\n    /**开始游戏 */\r\n    playGame():void {\r\n        let that = this;\r\n        if(that.isSpinning){ return }\r\n        that.wheelNode.angle = 30;\r\n        that.isSpinning = true;\r\n        let target = that.getRandom(0, 360);\r\n        // console.log('target:' + target)\r\n        tween(that.wheelNode)\r\n        .by(2, { angle: -2160 }, { easing: 'quartIn' }) \r\n        .by(3, { angle: -(target + 1080)}, { easing: 'quartOut' })\r\n        .call(() => { that.getJackPot(target) })\r\n        .start()\r\n    }\r\n\r\n    closeJackPot() {\r\n        let that = this;\r\n        that.jackPot.active = false;\r\n    }\r\n    /**正则 laji*/\r\n    private getUrlParams = (name: string) => {\r\n        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i')\r\n        var r = window.location.search.substring(1).match(reg)\r\n        if (r != null) {\r\n            return unescape(r[2])\r\n        }\r\n        return null\r\n    }\r\n    /**中奖提示语内容切换 控制弹框显隐 */\r\n    private getJackPot(target:number):void {\r\n        let that = this;\r\n        let num = Math.floor(target / (360 / that.itemNum));\r\n        // console.log(\"num\",num);\r\n        let SkeletonNode: Node = null;\r\n        let isWild: boolean = false;\r\n        switch (num) {\r\n            case 0:\r\n                that.tipLabel.string = '1,000 ';\r\n                SkeletonNode = that.wild;\r\n                isWild = true;\r\n                break;\r\n            case 1:\r\n                that.tipLabel.string = '500';\r\n                SkeletonNode = that.strawberry;\r\n                break;\r\n            case 2:\r\n                that.tipLabel.string = '300';\r\n                SkeletonNode = that.banana;\r\n                break;\r\n            case 3:\r\n                that.tipLabel.string = '200';\r\n                SkeletonNode = that.apple;\r\n                break;\r\n            case 4:\r\n                that.tipLabel.string = '100';\r\n                SkeletonNode = that.grape;\r\n                break;\r\n            case 5:\r\n                that.tipLabel.string = '50';//Congratulations on winning 50 points  Selamat telah memenangkan 50 poin\r\n                SkeletonNode = that.watermelon;\r\n                break;\r\n        }\r\n        if (isWild) {\r\n            that.wild.getComponent(sp.Skeleton).animation = \"animation\";\r\n            \r\n        } else {\r\n            \r\n            SkeletonNode.getComponent(sp.Skeleton).animation = \"animation2\";\r\n        }\r\n        tween(that.jackPot)\r\n        .delay(2)\r\n        .call(() => { \r\n            that.jackPot.active = true;\r\n        })\r\n        .start()\r\n        let gold = removeComma(that.gold_num.string);\r\n        let TipNum = removeComma(that.tipLabel.string) ;\r\n        that.gold_num.string = (Number(gold) + Number(TipNum)).formatAmountWithCommas();\r\n        tween(that.jackPot)\r\n        .delay(4)\r\n        .call(() => { \r\n            that.jackPot.active = false;\r\n            that.isSpinning = false;\r\n            SkeletonNode.getComponent(sp.Skeleton).animation = \"\";\r\n        })\r\n        .start()\r\n    }\r\n    /**laji*/\r\n    private convertToMandK(number:number):string {\r\n        if (number >= 1000000) {\r\n            let M = (number / 1000000).toFixed(2);\r\n            return `${M}M`;\r\n        } else if (number >= 1000) {\r\n            let K = (number / 1000).toFixed(2);\r\n            return `${K}k`;\r\n        } else {\r\n            return `${number}`;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const getRootPosition = (node: Node, totalX?: number, totalY?: number): math.Vec3 => {\r\n    if (node.parent.name === 'Canvas') {\r\n        return new Vec3(totalX, totalY, 0)\r\n    } else {\r\n        const x = node.position.x + node.parent.position.x\r\n        const y = node.position.y + node.parent.position.y\r\n        return getRootPosition(node.parent, x, y)\r\n    }\r\n}\r\n\r\nexport function removeComma(str){\r\n\tconst newStr=str.replace(/,/g,\"\")\r\n\treturn newStr\r\n}\r\n\r\n\r\n  \r\n\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/common/WebSocketToDo.ts"],"names":["WebSocketToDo","error","sys","ToastType","addToastAction","setLoadingAction","getStore","global","lang","SKT_MAG_TYPE","constructor","ws","sktCode","websocketUrl","heartBeatTimer","connectTimer","connectCallBackHandlerMap","gameId","onMessage","onDisconnect","onReConnect","onDataFail","onAnthFail","isAutoConnect","dispatch","reConnectTimes","maxReConnectTimes","isConnect","resendTime","heat_beat_norepayTime","timeOut_norepayTime","timeoutArr","init","eventHandler","initSocket","Promise","resolve","reject","WebSocket","OPEN","readyState","close","onopen","event","console","log","forEach","handler","count","window","clearInterval","setInterval","sendSktMessage","HEART_BEAT","undefined","onerror","onmessage","ev","onclose","reconnect","getWsStatus","errFn","subGameInfo","getState","baseBoard","result","AUTH","token","localStorage","getItem","isReconnection","evData","JSON","parse","data","msgArr","code","split","hallDispatch","isShow","success","typeCode","errorStr","write","k","WebSocketModule","WebSocketError","placeStr","content","type","ERROR","setTimeout","msgType","option","_option","Object","assign","isLoading","isReSend","reSendTimeOut","send","stringify","connectCallback","callBack","push"],"mappings":"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","sourcesContent":["import { error, log, sys } from \"cc\";\r\nimport { InitStateType, ToastType, addToastAction, setLoadingAction } from \"../hall/store/actions/baseBoard\";\r\nimport Singleton from \"../utils/Singleton\";\r\nimport { default as redux } from \"redux\"\r\nimport { getStore } from \"../hall/store\";\r\nimport { global, lang } from \"../hall\";\r\nimport { decodeRSA, encodeRSA } from '../utils/RSA';\r\nimport { sendNativeVibrate } from \"./bridge\";\r\n\r\ntype SktMessageType = {\r\n  code: string,\r\n  messageId: string,\r\n  success: boolean,\r\n  data?: any\r\n}\r\n\r\nexport enum SKT_MAG_TYPE {\r\n  /**心跳 */\r\n  HEART_BEAT = \"1\",\r\n  /**认证 */\r\n  AUTH = \"2\",\r\n  /**退出 */\r\n  EXIT = \"3\"\r\n}\r\n\r\n/**webSocket单例，泛型请传入可能获取的消息Code枚举 */\r\nexport default class WebSocketToDo<T> {\r\n  constructor() {\r\n    // this.dispatch = getStore().dispatch\r\n  }\r\n  private ws: WebSocket\r\n  private sktCode: string\r\n  private websocketUrl: string\r\n  private heartBeatTimer: number\r\n  private connectTimer: number\r\n  private connectCallBackHandlerMap: Function[] = []\r\n  private gameId: number\r\n  private onMessage: (code: T, data: any, error?: string) => void\r\n  private onDisconnect: (data: any) => void\r\n  private onReConnect: (times: number) => boolean\r\n  private onDataFail: (code: T, data: any) => void\r\n  private onAnthFail: (reason?: string) => void\r\n  private isAutoConnect: boolean = true\r\n  public dispatch: redux.Dispatch\r\n  public reConnectTimes: number = 0\r\n  public maxReConnectTimes: number = 10\r\n  public isConnect: boolean = false\r\n  private resendTime: number = 0\r\n  /**第几次心跳无反馈 */\r\n  private heat_beat_norepayTime: number = 0\r\n  /**心跳无反馈判断为掉线的最大值 */\r\n  private timeOut_norepayTime: number = 3\r\n  private timeoutArr: { [key: string | number]: number } = {}\r\n  /**初始化websocket */\r\n  public init(sktCode: string, gameId: number, websocketUrl: string,\r\n    eventHandler: {\r\n      onMessage: (code: T, data: any, error?: string) => void,\r\n      onDataFail: (code: T, data: any) => void,\r\n      onAnthFail: (reason?: string) => void,\r\n      onDisconnect: (data: any) => void\r\n      /**return false将会取消重连 */\r\n      onReConnect: (times: number) => boolean\r\n    }) {\r\n    this.sktCode = sktCode\r\n    this.gameId = gameId\r\n    this.websocketUrl = websocketUrl\r\n    this.onMessage = eventHandler.onMessage\r\n    this.onDisconnect = eventHandler.onDisconnect\r\n    this.onDataFail = eventHandler.onDataFail\r\n    this.onAnthFail = eventHandler.onAnthFail\r\n    this.onReConnect = eventHandler.onReConnect\r\n    return this\r\n  }\r\n  public async initSocket() {\r\n    return new Promise(async (resolve, reject) => {\r\n      if (this.ws && WebSocket.OPEN == this.ws.readyState) {\r\n        this.ws.close()\r\n        this.ws = null\r\n      }\r\n      this.ws = new WebSocket(this.websocketUrl)\r\n      /**当连接建立成功后，这个函数就会被调用 */\r\n      this.ws.onopen = (event) => {\r\n        console.log(\"WebSocket has connected\")\r\n        this.isAutoConnect = true\r\n        this.connectCallBackHandlerMap.forEach(handler => handler())\r\n\r\n        let count = 1\r\n        this.connectTimer && window.clearInterval(this.connectTimer)\r\n        this.connectTimer = window.setInterval(() => {\r\n          console.log('readyState', this.ws.readyState)\r\n          if (this.ws.readyState === 1) {\r\n            this.heartBeatTimer && window.clearInterval(this.heartBeatTimer)\r\n            this.isConnect = true\r\n            this.heartBeatTimer = window.setInterval(() => {\r\n              this.sendSktMessage(SKT_MAG_TYPE.HEART_BEAT, undefined)\r\n              this.heat_beat_norepayTime++\r\n              // console.log('this.heat_beat_norepayTime', this.heat_beat_norepayTime)\r\n              this.isConnect = this.heat_beat_norepayTime >= this.timeOut_norepayTime ? false : true\r\n              if (this.heat_beat_norepayTime === this.timeOut_norepayTime) {\r\n                this.onDisconnect('heat beat to time out')\r\n                window.clearInterval(this.heartBeatTimer)\r\n              }\r\n            }, 5000)\r\n            window.clearInterval(this.connectTimer)\r\n            this.reConnectTimes = 0\r\n            resolve(true)\r\n          } else {\r\n            count++\r\n            if (count === 20) {\r\n              reject('time out')\r\n            }\r\n          }\r\n        }, 200)\r\n      }\r\n      this.ws.onerror = (event) => {\r\n        this.onDisconnect(event)\r\n        this.isConnect = false\r\n        reject(event)\r\n      }\r\n      this.ws.onmessage = (ev: MessageEvent<any>) => {\r\n        this.onmessage(ev)\r\n      }\r\n      this.ws.onclose = async () => {\r\n        this.isConnect = false\r\n        await this.reconnect(() => {\r\n          reject('reconnect cancel')\r\n        })\r\n      }\r\n    })\r\n  }\r\n  public getWsStatus() {\r\n    return (this.ws && this.ws.readyState === 1) ? true : false\r\n  }\r\n  public async reconnect(errFn?: () => void) {\r\n    //断线重连\r\n    window.clearInterval(this.heartBeatTimer)\r\n    window.clearInterval(this.connectTimer)\r\n    if (!this.isAutoConnect) return\r\n    // this.ws = new WebSocket(this.websocketUrl)\r\n    const subGameInfo = (getStore().getState().baseBoard as InitStateType).subGameInfo\r\n    this.reConnectTimes++\r\n    if (!this.onReConnect(this.reConnectTimes)) {\r\n      // reject('reconnect cancel')\r\n      errFn && errFn()\r\n    } else {\r\n      console.log(\"exit and reconnect\")\r\n      const result = await this.initSocket()\r\n      // result && this.sendSktMessage(SKT_MAG_TYPE.AUTH, sys.localStorage.getItem(\"token\"))\r\n      result && (this.isConnect = true)\r\n      result && this.sendSktMessage(SKT_MAG_TYPE.AUTH, {\r\n        token: sys.localStorage.getItem(\"token\"),\r\n        gameId: this.gameId,\r\n        isReconnection: 1\r\n      })\r\n    }\r\n  }\r\n  /**接受socket消息 */\r\n  public onmessage(ev: MessageEvent<any> | SktMessageType) {\r\n    // const result = decodeRSA(ev.data)\r\n\r\n    const evData = JSON.parse(ev.data) as SktMessageType\r\n    // evData.code !== `${this.sktCode}:-${SKT_MAG_TYPE.HEART_BEAT}` && evData.code !== `${this.sktCode}:-7` && console.log(evData)\r\n    const msgArr = evData.code.split(\":-\")\r\n    // evData.success = true;\r\n    if (this.timeoutArr[evData.code]) {\r\n      //清理掉超时等待的数据\r\n      // console.log(this.timeoutArr)\r\n      delete this.timeoutArr[evData.code]\r\n      global.hallDispatch(setLoadingAction({ isShow: false }))\r\n    }\r\n    if (evData.success) {\r\n      const typeCode = msgArr[1] as T\r\n      if (msgArr[0] !== this.sktCode) {\r\n        const errorStr = lang.write(k => k.WebSocketModule.WebSocketError, {}, { placeStr: \"错误的游戏代\" })\r\n        global.hallDispatch(addToastAction({ content: errorStr, type: ToastType.ERROR }))\r\n        // console.error('服务错误', '错误的游戏代码')\r\n        this.onDataFail(typeCode, errorStr)\r\n        this.onMessage(typeCode, '', errorStr)\r\n        return\r\n      }\r\n      if (typeCode === SKT_MAG_TYPE.HEART_BEAT) {\r\n        this.heat_beat_norepayTime = 0\r\n      }\r\n      this.onMessage(typeCode, evData.data)\r\n      // sktMsgListener.dispath(typeCode as T, evData.data || undefined)\r\n    } else {\r\n      // this.sendNotification(BgMediatorConst.SHOW_TOAST, { content: evData['reason'] })\r\n      const typeCode = msgArr[1] as T\r\n      global.hallDispatch(addToastAction({ content: evData['reason'], type: ToastType.ERROR }))\r\n      console.error(`服务错误`, evData)\r\n      this.onDataFail(typeCode, evData)\r\n      this.onMessage(typeCode, evData.data, evData['reason'])\r\n      this.isAutoConnect = false\r\n      if (evData.code === `${this.sktCode}:-${SKT_MAG_TYPE.AUTH}`) {\r\n        // global.hallDispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.WebSocketFreeze, {}, { placeStr: \"对不起，您的账户已冻结\" }) }))\r\n        window.setTimeout(() => {\r\n          this.onAnthFail && this.onAnthFail(evData['reason'])\r\n        }, 2000)\r\n      }\r\n    }\r\n  }\r\n  /**\r\n   * 发送socket消息\r\n   * @param msgType 协议头\r\n   * @param data 数据\r\n   * @param option \r\n   *  isLoading: 是否出加载\r\n   * isReSend: 是否超时重发\r\n   * reSendTimeOut: 重发超时时间,下一条同协议出现的时间间隔,isReSend=true,此值才生效\r\n   * @returns \r\n   */\r\n  public sendSktMessage(msgType: T | SKT_MAG_TYPE, data?: string | ArrayBuffer | Blob | ArrayBufferView | any, option?: {\r\n    isLoading?: boolean,\r\n    isReSend?: boolean,\r\n    reSendTimeOut?: number\r\n  }) {\r\n    // (msgType === '501' || msgType === '802') && sendNativeVibrate(50)\r\n    if (this.ws.readyState !== 1) {\r\n      global.hallDispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.WebSocketError, {}, { placeStr: \"network error\" }), type: ToastType.ERROR }))\r\n      return\r\n    }\r\n    const _option = Object.assign({\r\n      isLoading: false,\r\n      isReSend: false,\r\n      reSendTimeOut: 2000\r\n    }, option || {})\r\n    if (_option.isLoading) {\r\n      global.hallDispatch(setLoadingAction({ isShow: true }))\r\n    }\r\n    // if (_option.isReSend) {\r\n    //   this.timeoutArr[`${this.sktCode}:-${msgType}`] = new Date().getTime()\r\n    //   // console.log(this.timeoutArr)\r\n    //   this.resendTime && window.clearTimeout(this.resendTime)\r\n    //   this.resendTime = window.setTimeout(() => {\r\n    //     //如果超时后对应的信息还在，说明没被清理掉，那么就重发\r\n    //     if (this.timeoutArr[`${this.sktCode}:-${msgType}`]) {\r\n    //       global.hallDispatch(setLoadingAction({ isShow: true, isAllowCloseLoading: true }))\r\n    //       this.sendSktMessage(msgType, data, option)\r\n    //     }\r\n    //   }, _option.reSendTimeOut)\r\n    // }\r\n    // console.log('sendmessage ======== ' + JSON.stringify({ code: `${this.sktCode}:${msgType}`, data }))\r\n    this.ws && this.ws.send(JSON.stringify({ code: `${this.sktCode}:${msgType}`, data }))\r\n  }\r\n  /**主动关闭ws，不会默认重连 */\r\n  public close() {\r\n    this.isConnect = false\r\n    this.isAutoConnect = false\r\n    this.ws && this.ws.close()\r\n  }\r\n\r\n\r\n  public connectCallback(callBack: () => void) {\r\n    this.connectCallBackHandlerMap.push(callBack)\r\n  }\r\n}"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/Crash/net/Crash_HttpManager.ts"],"names":["Crash_HttpManager","Crash_GameConfig","Crash_NetMsgDispatcher","baseUrl","HttpUrl","isEncrypt","getInstance","instance","send","protocol","args","timeOut","TimeOut","httpSend","url","xhr","XMLHttpRequest","token","timeout","onreadystatechange","readyState","response","responseText","status","data","JSON","parse","onResponse","rtnCode","msg","method","toString","open","setRequestHeader","console","log","bl","doMsgCallBack","code"],"mappings":"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","sourcesContent":["import { Crash_GameConfig } from \"../config/Crash_GameConfig\";\r\nimport Crash_NetMsgDispatcher from \"./Crash_NetMsgDispatcher\";\r\nimport { HttpProtocol } from \"./protocol/HttpProtocol\";\r\n\r\n\r\nexport default class Crash_HttpManager {\r\n\r\n    private static instance: Crash_HttpManager = null;\r\n\r\n    private baseUrl = Crash_GameConfig.HttpUrl;\r\n\r\n\r\n    private isEncrypt: boolean = false;\r\n\r\n    public static getInstance() {\r\n        if(this.instance == null) {\r\n            this.instance = new Crash_HttpManager();\r\n        }\r\n\r\n        return this.instance;\r\n    }\r\n\r\n    public send( protocol: HttpProtocol,  args ) {\r\n        let timeOut = Crash_GameConfig.TimeOut || 25000;\r\n        this.httpSend(protocol, timeOut, args);\r\n    }\r\n\r\n    private httpSend( protocol: HttpProtocol,  timeOut: number, args ) {\r\n        let url = this.baseUrl + protocol.url;\r\n        let xhr = new XMLHttpRequest();\r\n       // let token: string = DataManager.getInstance().getUserInfo().getToken() || \"\";\r\n        let token=''\r\n        xhr.timeout = timeOut;\r\n        xhr.onreadystatechange =  ()=> {\r\n            if (xhr.readyState === 4) {\r\n                let response = xhr.responseText;\r\n                if (xhr.status == 200) {\r\n                    let data = JSON.parse(response);\r\n\r\n                    if(this.isEncrypt) {\r\n                        // data = decrypt(data);\r\n                    }\r\n                    this.onResponse(protocol, true, data, args);\r\n                }\r\n                else if( xhr.status == 0 ) {\r\n                    this.onResponse(protocol, false, {\r\n                        rtnCode: 500,\r\n                        msg: \"The server cannot connect!\",\r\n                    }, args);\r\n                }\r\n                else {\r\n                    this.onResponse(protocol, false, {\r\n                        rtnCode: 500,\r\n                        msg: '2',\r\n                    }, args);\r\n                }\r\n            }\r\n        };\r\n\r\n        if(protocol.method == \"GET\"){\r\n            url += protocol.toString();\r\n            xhr.open(\"GET\", url, true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n            xhr.setRequestHeader(\"token\", token);\r\n            xhr.send();\r\n            console.log(\"[Http][GET]\" + url)\r\n        }\r\n\r\n        if(protocol.method == \"POST\"){\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n            xhr.setRequestHeader(\"token\", token);\r\n            if(this.isEncrypt) {\r\n                // xhr.send(encrypt(protocol.toString()));\r\n            }else{\r\n                xhr.send(protocol.toString());\r\n            }\r\n            console.log(\"[Http][POST]\" + url + \"  DATA = \" + protocol.toString());\r\n        }\r\n\r\n\r\n        xhr.timeout = timeOut;\r\n    }\r\n\r\n    private onResponse( protocol: HttpProtocol, bl: boolean, data: any, args ) {\r\n        console.log(data);\r\n        Crash_NetMsgDispatcher.getInstance().doMsgCallBack(bl, protocol.code, data, args);\r\n    }\r\n\r\n}\r\n"]}
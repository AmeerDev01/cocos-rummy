{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/domino/socketConnect.ts"],"names":["WebSocketToDo","listenerFactoy","initConfig","subGameList","config","ToastType","addToastAction","setLoadingAction","getStore","lang","SKT_MAG_TYPE","sktMsgListener","sktInstance","dispatch","Promise","resolve","reject","isTest","then","gameIdTmp","gameId","wsUrl","testConfig","websocketUrl","find","i","init","sktCode","onMessage","code","data","dispath","onDataFail","content","write","k","WebSocketModule","socketConnectDateFail","placeStr","isShow","onAnthFail","socketConnectAuthFaild","onDisconnect","socketConnectDisconnect","type","ERROR","onReConnect","initSocket","removeInstance","removeAll","close"],"mappings":"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","sourcesContent":["import WebSocketToDo from \"../../common/WebSocketToDo\"\r\nimport { listenerFactoy } from \"../../common/listenerFactoy\"\r\nimport { initConfig, subGameList } from \"../../hall/config\"\r\nimport config from \"./config\"\r\nimport { ToastType, addToastAction, setLoadingAction } from \"../../hall/store/actions/baseBoard\"\r\nimport store, { getStore } from \"./store\"\r\nimport { lang } from \"../../hall\"\r\n\r\nexport enum SKT_MAG_TYPE {\r\n  /**认证 */\r\n  AUTH = \"2\",\r\n  /**进入房间 */\r\n  JOIN_ROOM = \"4\",\r\n  /**金币变化 */\r\n  GOLD_CHANGE = \"10\",\r\n  /**结算 */\r\n  SETTLEMENT = \"608\",\r\n  /**准备 */\r\n  READY = \"610\",\r\n  /**开始游戏倒计时 */\r\n  BEGIN_GAME_COUNTDOWN = \"602\",\r\n  /**发牌 */\r\n  PUSH_DEAL = \"603\",\r\n  /**游戏状态变化 */\r\n  GAME_STATE_CHANGE = \"605\",\r\n  /**开始出牌 */\r\n  OUT_CARD = \"606\",\r\n  /**推送庄家 */\r\n  PUSH_DEALER = \"612\",\r\n  /**结算 */\r\n  BALANCE = \"608\",\r\n  /**重连 */\r\n  RECONNECT = \"614\",\r\n  /**退出房间 */\r\n  QUIT_ROOM = \"611\",\r\n  /**切换桌子 */\r\n  CHANGE_ROOM = \"613\",\r\n}\r\n\r\nexport const sktMsgListener = listenerFactoy<SKT_MAG_TYPE>()\r\nexport let sktInstance: WebSocketToDo<SKT_MAG_TYPE> = null\r\nexport default () => {\r\n  const dispatch = getStore().dispatch\r\n  return new Promise((resolve, reject) => {\r\n    if (sktInstance) {\r\n      resolve(sktInstance)\r\n    } else {\r\n      sktInstance = new WebSocketToDo<SKT_MAG_TYPE>()\r\n      !config.isTest && initConfig().then(() => {\r\n        let gameIdTmp = config.gameId;\r\n        let wsUrl = config.testConfig.wsUrl;\r\n        if (!config.testConfig.wsUrl) {\r\n          const { gameId, websocketUrl } = subGameList.find(i => i.gameId === config.gameId)\r\n          wsUrl = websocketUrl;\r\n          gameIdTmp = gameId;\r\n        }\r\n        sktInstance.init(config.sktCode, gameIdTmp, wsUrl, {\r\n          onMessage: (code, data) => {\r\n            sktMsgListener.dispath(code, data)\r\n          },\r\n          onDataFail: (data: any) => {\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDateFail, {}, { placeStr: \"连接失败\" }) }))\r\n            dispatch(setLoadingAction({ isShow: false }))\r\n          },\r\n          onAnthFail: () => {\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectAuthFaild, {}, { placeStr: \"Auth Faild\" }) }))\r\n          },\r\n          onDisconnect: (data: any) => {\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDisconnect, {}, { placeStr: \"socket disconnect\" }), type: ToastType.ERROR }))\r\n            dispatch(setLoadingAction({ isShow: false }))\r\n          },\r\n          onReConnect: () => true\r\n        })\r\n        sktInstance.initSocket().then(() => {\r\n          resolve(sktInstance)\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const removeInstance = () => {\r\n  sktMsgListener && sktMsgListener.removeAll()\r\n  sktInstance && sktInstance.close()\r\n  sktInstance = null\r\n}"]}
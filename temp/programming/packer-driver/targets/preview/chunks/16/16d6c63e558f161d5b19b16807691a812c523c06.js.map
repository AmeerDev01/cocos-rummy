{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/components/Hall_Turntable/TurntableViewModel.ts"],"names":["TurntableViewModel","ViewModel","BaseViewModel","EffectType","PrefabPathDefine","sourceManageSeletor","constructor","begin","setEvent","rotaryStarting","type","data","givePanel","mountView","getFile","HELL_ACTIVITY_TURNTABLE_INTRO","source","appendTo","comp","node","effectType","EFFECT1","isModal","onClosePanel","unMount","EFFECT2","HELL_ACTIVITY_TURNTABLE","parentNode","parent","setCount","num","setReadStatus","value","events","setProps","TurntableData","connect","inject","state"],"mappings":";;;2GASMA,kB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AATCC,MAAAA,S;;AAGAC,MAAAA,a;;AAGEC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,gB,iBAAAA,gB;;AACDC,MAAAA,mB,iBAAAA,mB;;;;;;;AACFL,MAAAA,kB,GAAN,MAAMA,kBAAN;AAAA;AAAA,kCAA2E;AACvEM,QAAAA,WAAW,GAAG;AACV,gBAAM,gBAAN;AACH;;AAESC,QAAAA,KAAK,GAAG;AACd,eAAKC,QAAL,CAAc;AACVC,YAAAA,cAAc,EAAE,CAACC,IAAD,EAAMC,IAAN,KAAgB;AAC5B,kBAAGD,IAAI,IAAI,CAAX,EAAa;AACT,oBAAME,SAAS,GAAG;AAAA;AAAA,oDAA4D,eAA5D,EAA6EC,SAA7E,CAAuF;AAAA;AAAA,kEAAsBC,OAAtB,CAA8B;AAAA;AAAA,0DAAiBC,6BAA/C,EAA8EC,MAArK,EACjBC,QADiB,CACR,KAAKC,IAAL,CAAUC,IADF,EACQ;AAAEC,kBAAAA,UAAU,EAAE;AAAA;AAAA,gDAAWC,OAAzB;AAAkCC,kBAAAA,OAAO,EAAE;AAA3C,iBADR,EAC2Dd,QAD3D,CACoE;AAClFe,kBAAAA,YAAY,EAAE,MAAM;AAChBX,oBAAAA,SAAS,CAACY,OAAV,CAAkB;AAAA;AAAA,kDAAWC,OAA7B;AACH;AAHiF,iBADpE,CAAlB;AAMA;AACH;;AACD,kBAAGf,IAAI,IAAI,CAAX,EAAa;AACP,oBAAOE,UAAS,GAAG;AAAA;AAAA,oDAAwD,WAAxD,EAAqEC,SAArE,CAA+E;AAAA;AAAA,kEAAsBC,OAAtB,CAA8B;AAAA;AAAA,0DAAiBY,uBAA/C,EAAwEV,MAAvJ,EACfC,QADe,CACN,KAAKU,UAAL,CAAgBC,MADV,EACkB;AAAER,kBAAAA,UAAU,EAAE;AAAA;AAAA,gDAAWC,OAAzB;AAAkCC,kBAAAA,OAAO,EAAE;AAA3C,iBADlB,EACqEd,QADrE,CAC8E;AAC3Fe,kBAAAA,YAAY,EAAE,MAAM;AAChBX,oBAAAA,UAAS,CAACY,OAAV,CAAkB;AAAA;AAAA,kDAAWC,OAA7B;AACH,mBAH0F;AAI3FI,kBAAAA,QAAQ,EAAEC,GAAD,IAAO;AACZ,yBAAKZ,IAAL,CAAUW,QAAV,CAAmBC,GAAnB;AACH,mBAN0F;AAO3FC,kBAAAA,aAAa,EAAGC,KAAD,IAAmB;AAC9B,yBAAKd,IAAL,CAAUe,MAAV,CAAiBF,aAAjB,CAA+BC,KAA/B;AACH;AAT0F,iBAD9E,EAWdE,QAXc,CAWL;AAACC,kBAAAA,aAAa,EAACxB;AAAf,iBAXK,CAAnB;AAYL;AACJ;AAzBS,WAAd;AA2BH;;AAEMyB,QAAAA,OAAO,GAAG;AACb,eAAKC,MAAL,CAAY,EAAZ,EAAiBC,KAAD,IAAsB;AAClC,mBAAO,EAAP;AAGH,WAJD;AAKA,iBAAO,IAAP;AACH;;AA1CsE,O;;yBA6C5DtC,kB","sourcesContent":["import ViewModel from \"../../../base/ViewModel\"\r\nimport { TurntablePanel, IEvent, IProps } from \"./TurntablePanel\"\r\nimport { StateType } from \"../../store/reducer\"\r\nimport BaseViewModel from \"../../viewModel/BaseViewModel\"\r\nimport { Turntable, IState as CBState, IProps as CBProps, IEvent as CBEvent } from './Turntable';\r\nimport { TurntableHelp, IState as HBState, IProps as HBProps, IEvent as HBEvent } from './TurntableHelp';\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\";\r\nimport { PrefabPathDefine } from \"../../sourceDefine/prefabDefine\";\r\nimport {sourceManageSeletor } from '../../index';\r\nclass TurntableViewModel extends ViewModel<TurntablePanel, IProps, IEvent> {\r\n    constructor() {\r\n        super('TurntablePanel')\r\n    }\r\n\r\n    protected begin() {\r\n        this.setEvent({\r\n            rotaryStarting: (type,data?) => {\r\n                if(type == 1){\r\n                    const givePanel = new BaseViewModel<TurntableHelp, HBState, HBProps, HBEvent>('TurntableHelp').mountView(sourceManageSeletor().getFile(PrefabPathDefine.HELL_ACTIVITY_TURNTABLE_INTRO).source)\r\n                    .appendTo(this.comp.node, { effectType: EffectType.EFFECT1, isModal: true }).setEvent({\r\n                        onClosePanel: () => {\r\n                            givePanel.unMount(EffectType.EFFECT2)\r\n                        }\r\n                    })\r\n                    return\r\n                }\r\n                if(type == 2){\r\n                      const  givePanel = new BaseViewModel<Turntable, CBState, CBProps, CBEvent>('Turntable').mountView(sourceManageSeletor().getFile(PrefabPathDefine.HELL_ACTIVITY_TURNTABLE).source)\r\n                         .appendTo(this.parentNode.parent, { effectType: EffectType.EFFECT1, isModal: true }).setEvent({\r\n                            onClosePanel: () => {\r\n                                givePanel.unMount(EffectType.EFFECT2)\r\n                            },\r\n                            setCount:(num)=>{\r\n                                this.comp.setCount(num)\r\n                            },\r\n                            setReadStatus: (value: string) => {\r\n                                this.comp.events.setReadStatus(value);\r\n                            }\r\n                        }).setProps({TurntableData:data}) \r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public connect() {\r\n        this.inject({}, (state: StateType) => {\r\n            return {\r\n               \r\n            }\r\n        })\r\n        return this\r\n    }\r\n}\r\n\r\nexport default TurntableViewModel"]}
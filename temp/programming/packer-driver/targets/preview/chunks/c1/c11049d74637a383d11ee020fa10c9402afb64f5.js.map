{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/yxx/viewModel/FooterViewModel.ts"],"names":["instantiate","ViewModel","StoreInject","global","getUUID","config","convertToServerBetType","gameCacheData","SKT_MAG_TYPE","sktInstance","getStore","seatBet","selectChip","changeSeatBet","setTipType","FooterViewModel","constructor","begin","setEvent","value","dispatch","repeatLastBet","lastBet","length","time","Date","now","Math","random","type","isTest","forEach","v","gold","comp","props","myHead","betData","chips","splitChip","betAmount","chip","getLockBet","chipBet","meTotalBetAmount","totalBetAmount","isMyBet","betId","preBet","sendBet","roomId","memberId","userId","memberName","name","betType","sendSktMessage","LAUNCHER_BET","openShop","chipTypes","i","element","push","connect","inject","state","game","bet","newBetData","onlineNumber","animationStatus","gameFlow","gameStatus","powers"],"mappings":"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","sourcesContent":["import { instantiate, tween } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { global } from \"../../../hall\"\r\nimport { getUUID } from \"../../../utils/tool\"\r\nimport { IEvent, IProps, Yxx_Footer } from \"../components/Yxx_Footer\"\r\nimport config from \"../config\"\r\nimport { SendBet, convertToServerBetType, gameCacheData } from \"../serverType\"\r\nimport { SKT_MAG_TYPE, sktInstance } from \"../socketConnect\"\r\nimport { getStore } from \"../store\"\r\nimport { seatBet, selectChip } from \"../store/actions/bet\"\r\nimport { changeSeatBet } from \"../store/actions/game\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { BetData } from \"../type\"\r\nimport { setTipType } from \"../store/actions/gameFlow\"\r\n\r\n@StoreInject(getStore())\r\nclass FooterViewModel extends ViewModel<Yxx_Footer, IProps, IEvent> {\r\n  constructor() {\r\n    super('Yxx_Footer')\r\n  }\r\n\r\n  protected begin() {\r\n    this.setEvent({\r\n      selectChip: (value: number) => {\r\n        this.dispatch(selectChip(value));\r\n      },\r\n\r\n      /**重复下注，主要 BetAreaViewModel 也有相同的代码 */\r\n      repeatLastBet: (lastBet: BetData[]) => {\r\n        if (lastBet && lastBet.length === 0) {\r\n          // let remind_repeat= this.comp.getRemindRepeatNode()\r\n          // if (!remind_repeat) { return };\r\n          // remind_repeat.active = true;\r\n          // tween(remind_repeat)\r\n          // .delay(2)\r\n          // .call(() => { \r\n          //   remind_repeat.active  = false;\r\n          // })\r\n          // .start()\r\n          this.dispatch(setTipType({\r\n            time: Date.now() + Math.random(),\r\n            type: 1,\r\n          }))\r\n\r\n          return\r\n        }\r\n        if (config.isTest) {\r\n          lastBet.forEach(v => {\r\n            this.dispatch(seatBet(v));\r\n            this.dispatch(changeSeatBet(v));\r\n          })\r\n        } else {\r\n          let gold = this.comp.props.myHead.gold;\r\n          lastBet.forEach(betData => {\r\n            const chips: number[] = [];\r\n            this.splitChip(betData.betAmount, chips)\r\n\r\n            chips.forEach(chip => {\r\n              if (this.comp.getLockBet(gold)) {\r\n                return;\r\n              }\r\n              const chipBet = instantiate(betData);\r\n              chipBet.meTotalBetAmount = 0;\r\n              chipBet.totalBetAmount = 0;\r\n              chipBet.isMyBet = true;\r\n              chipBet.betAmount = chip;\r\n              chipBet.betId = getUUID();\r\n              chipBet.time = Date.now() + Math.random();\r\n\r\n              gold -= chip;\r\n\r\n              if (config.preBet) {\r\n                this.dispatch(seatBet(chipBet));\r\n                this.dispatch(changeSeatBet(chipBet));\r\n              }\r\n\r\n              const sendBet: SendBet = {\r\n                roomId: gameCacheData.roomId,\r\n                memberId: this.comp.props.myHead.userId,\r\n                memberName: this.comp.props.myHead.name,\r\n                gold: chip,\r\n                betType: convertToServerBetType(betData.betType),\r\n                betId: chipBet.betId,\r\n              }\r\n\r\n              // 下注信息发送给服务器\r\n              sktInstance.sendSktMessage(SKT_MAG_TYPE.LAUNCHER_BET, sendBet);\r\n            })\r\n          })\r\n\r\n        }\r\n      },\r\n      openShop: () => {\r\n        global.openShop();\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * 根据下注拆分筹码\r\n   * @param totalBetAmount \r\n   */\r\n  private splitChip(totalBetAmount: number, chips: number[]) {\r\n    if (totalBetAmount < config.chipTypes[0].value) {\r\n      return;\r\n    }\r\n    for (let i = config.chipTypes.length - 1; i >= 0; i--) {\r\n      const element = config.chipTypes[i];\r\n      if (totalBetAmount >= element.value) {\r\n        chips.push(element.value);\r\n        totalBetAmount -= element.value;\r\n        break;\r\n      }\r\n    }\r\n    this.splitChip(totalBetAmount, chips);\r\n  }\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      return {\r\n        myHead: state.game.myHead,\r\n        lastBet: state.bet.lastBet,\r\n        newBetData: state.bet.newBetData,\r\n        selectChip: state.bet.selectChip,\r\n        onlineNumber: state.game.onlineNumber,\r\n        animationStatus: state.gameFlow.animationStatus,\r\n        gameStatus: state.gameFlow.gameStatus,\r\n        powers: state.game.powers,\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default FooterViewModel"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/fish/socketConnect.ts"],"names":["WebSocketToDo","listenerFactoy","initConfig","subGameList","config","addToastAction","getStore","lang","SKT_MAG_TYPE","sktMsgListener","sktInstance","dispatch","Promise","resolve","reject","isTest","then","gameIdTmp","gameId","wsUrl","testConfig","websocketUrl","find","i","init","sktCode","onMessage","code","data","error","dispath","onDataFail","content","write","k","WebSocketModule","socketConnectDateFail","placeStr","onAnthFail","socketConnectAuthFaild","onDisconnect","socketConnectDisconnect","onReConnect","initSocket","removeInstance","removeAll","close"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACOA,MAAAA,a;;AACEC,MAAAA,c,iBAAAA,c;;AACAC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,W,iBAAAA,W;;AACdC,MAAAA,M;;AACEC,MAAAA,c,iBAAAA,c;;AACOC,MAAAA,Q,iBAAAA,Q;;AACPC,MAAAA,I,iBAAAA,I;;;;;;;8BAEGC,Y,0BAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;AAAAA,QAAAA,Y;eAAAA,Y;;;gCAyCCC,c,GAAiB;AAAA;AAAA,6C;;6BACnBC,W,GAA2C,I;;yBACvC,MAAM;AACnB,YAAMC,QAAQ,GAAG;AAAA;AAAA,oCAAWA,QAA5B;AACA,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,cAAIJ,WAAJ,EAAiB;AACfG,YAAAA,OAAO,CAACH,WAAD,CAAP;AACD,WAFD,MAEO;AACL,mCAAAA,WAAW,GAAG;AAAA;AAAA,iDAAd;;AACA,aAAC;AAAA;AAAA,kCAAOK,MAAR,IAAkB;AAAA;AAAA,4CAAaC,IAAb,CAAkB,MAAM;AACxC,kBAAIC,SAAS,GAAG;AAAA;AAAA,oCAAOC,MAAvB;AACA,kBAAIC,KAAK,GAAG;AAAA;AAAA,oCAAOC,UAAP,CAAkBD,KAA9B;;AACA,kBAAI,CAAC;AAAA;AAAA,oCAAOC,UAAP,CAAkBD,KAAvB,EAA8B;AAC5B,oBAAM;AAAED,kBAAAA,MAAF;AAAUG,kBAAAA;AAAV,oBAA2B;AAAA;AAAA,gDAAYC,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACL,MAAF,KAAa;AAAA;AAAA,sCAAOA,MAA1C,CAAjC;AACAC,gBAAAA,KAAK,GAAGE,YAAR;AACAJ,gBAAAA,SAAS,GAAGC,MAAZ;AACD;;AACDR,cAAAA,WAAW,CAACc,IAAZ,CAAiB;AAAA;AAAA,oCAAOC,OAAxB,EAAiCR,SAAjC,EAA4CE,KAA5C,EAAmD;AACjDO,gBAAAA,SAAS,EAAE,CAACC,IAAD,EAAOC,IAAP,EAAaC,KAAb,KAA+B;AACxCpB,kBAAAA,cAAc,CAACqB,OAAf,CAAuBH,IAAvB,EAA6BC,IAA7B,EAAmCC,KAAnC;AACD,iBAHgD;AAIjDE,gBAAAA,UAAU,EAAGH,IAAD,IAAe;AACzBjB,kBAAAA,QAAQ,CAAC;AAAA;AAAA,wDAAe;AAAEqB,oBAAAA,OAAO,EAAE;AAAA;AAAA,sCAAKC,KAAL,CAAWC,CAAC,IAAIA,CAAC,CAACC,eAAF,CAAkBC,qBAAlC,EAAyD,EAAzD,EAA6D;AAAEC,sBAAAA,QAAQ,EAAE;AAAZ,qBAA7D;AAAX,mBAAf,CAAD,CAAR;AACD,iBANgD;AAOjDC,gBAAAA,UAAU,EAAE,MAAM;AAChB3B,kBAAAA,QAAQ,CAAC;AAAA;AAAA,wDAAe;AAAEqB,oBAAAA,OAAO,EAAE;AAAA;AAAA,sCAAKC,KAAL,CAAWC,CAAC,IAAIA,CAAC,CAACC,eAAF,CAAkBI,sBAAlC,EAA0D,EAA1D,EAA8D;AAAEF,sBAAAA,QAAQ,EAAE;AAAZ,qBAA9D;AAAX,mBAAf,CAAD,CAAR;AACD,iBATgD;AAUjDG,gBAAAA,YAAY,EAAGZ,IAAD,IAAe;AAC3BjB,kBAAAA,QAAQ,CAAC;AAAA;AAAA,wDAAe;AAAEqB,oBAAAA,OAAO,EAAE;AAAA;AAAA,sCAAKC,KAAL,CAAWC,CAAC,IAAIA,CAAC,CAACC,eAAF,CAAkBM,uBAAlC,EAA2D,EAA3D,EAA+D;AAAEJ,sBAAAA,QAAQ,EAAE;AAAZ,qBAA/D;AAAX,mBAAf,CAAD,CAAR;AACD,iBAZgD;AAajDK,gBAAAA,WAAW,EAAE,MAAM;AAb8B,eAAnD;AAeAhC,cAAAA,WAAW,CAACiC,UAAZ,GAAyB3B,IAAzB,CAA8B,MAAM;AAClCH,gBAAAA,OAAO,CAACH,WAAD,CAAP;AACD,eAFD;AAGD,aA1BiB,CAAlB;AA2BD;AACF,SAjCM,CAAP;AAkCD,O;;gCAEYkC,c,GAAiB,MAAM;AAClCnC,QAAAA,cAAc,IAAIA,cAAc,CAACoC,SAAf,EAAlB;AACAnC,QAAAA,WAAW,IAAIA,WAAW,CAACoC,KAAZ,EAAf;;AACA,+BAAApC,WAAW,GAAG,IAAd;AACD,O","sourcesContent":["import { default as redux } from \"redux\"\r\nimport WebSocketToDo from \"../../common/WebSocketToDo\"\r\nimport { listenerFactoy } from \"../../common/listenerFactoy\"\r\nimport { initConfig, subGameList } from \"../../hall/config\"\r\nimport config from \"./config\"\r\nimport { addToastAction, setLoadingAction } from \"../../hall/store/actions/baseBoard\"\r\nimport store, { getStore } from \"./store\"\r\nimport { lang } from \"../../hall\"\r\n\r\nexport enum SKT_MAG_TYPE {\r\n  /**认证 */\r\n  AUTH = \"2\",\r\n  /**退出房间 */\r\n  QUIT_ROOM = \"3\",\r\n  /**进入房间 */\r\n  JOIN_ROOM = \"520102\",\r\n  /**准备 */\r\n  READY = \"520111\",\r\n  /**退出牌桌 */\r\n  EXIT_TABLE = \"520112\",\r\n  /**请求场景数据 */\r\n  REQ_SCENCE = \"520120\",\r\n  /**筹码变化的消息 */\r\n  CHIPS_CHANGE = \"520202\",\r\n  /**生产鱼 */\r\n  GENERATE_FISH = \"520236\",\r\n  /**发送子弹 */\r\n  SEND_BULLET = \"520106\",\r\n  /**打中鱼 */\r\n  HIT_FISH = \"520108\",\r\n  /**请求锁定 */\r\n  LOCK = \"520121\",\r\n  /**取消锁定 */\r\n  CANCEL_LOCK = \"520122\",\r\n  /**切换炮台 */\r\n  CHANGE_BATTERY = \"520107\",\r\n  /**切换炮台皮肤 */\r\n  CHANGE_BATTERY_SKIN = \"520116\",\r\n  /**其他玩家进入房间 */\r\n  OTHER_JOIN_ROOM = \"520221\",\r\n  /**离开房间 */\r\n  LEAVE_ROOM = \"520216\",\r\n  /**切换场景 */\r\n  CHANGE_SCENCE = \"520234\",\r\n  /**结算消息 */\r\n  BILL = \"520243\",\r\n  /**错误消息通知 */\r\n  ERROR_MSG = \"105201\",\r\n}\r\n\r\nexport const sktMsgListener = listenerFactoy<SKT_MAG_TYPE>()\r\nexport let sktInstance: WebSocketToDo<SKT_MAG_TYPE> = null\r\nexport default () => {\r\n  const dispatch = getStore().dispatch\r\n  return new Promise((resolve, reject) => {\r\n    if (sktInstance) {\r\n      resolve(sktInstance)\r\n    } else {\r\n      sktInstance = new WebSocketToDo<SKT_MAG_TYPE>()\r\n      !config.isTest && initConfig().then(() => {\r\n        let gameIdTmp = config.gameId;\r\n        let wsUrl = config.testConfig.wsUrl;\r\n        if (!config.testConfig.wsUrl) {\r\n          const { gameId, websocketUrl } = subGameList.find(i => i.gameId === config.gameId)\r\n          wsUrl = websocketUrl;\r\n          gameIdTmp = gameId;\r\n        }\r\n        sktInstance.init(config.sktCode, gameIdTmp, wsUrl, {\r\n          onMessage: (code, data, error: string) => {\r\n            sktMsgListener.dispath(code, data, error)\r\n          },\r\n          onDataFail: (data: any) => {\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDateFail, {}, { placeStr: \"连接失败\" }) }))\r\n          },\r\n          onAnthFail: () => {\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectAuthFaild, {}, { placeStr: \"Auth Faild\" }) }))\r\n          },\r\n          onDisconnect: (data: any) => {\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDisconnect, {}, { placeStr: \"socket disconnect\" }) }))\r\n          },\r\n          onReConnect: () => true\r\n        })\r\n        sktInstance.initSocket().then(() => {\r\n          resolve(sktInstance)\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const removeInstance = () => {\r\n  sktMsgListener && sktMsgListener.removeAll()\r\n  sktInstance && sktInstance.close()\r\n  sktInstance = null\r\n}"]}
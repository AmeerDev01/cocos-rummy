{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/dfdc/viewModel/GameBoardViewModel.ts"],"names":["instantiate","sys","ViewModel","StoreInject","SKT_MAG_TYPE","sktInstance","sktMsgListener","config","GameType","NORMAL_MAG_TYPE","msgListener","sourceManageSeletor","PrefabPathDefine","changeGame","changeProfit","changeViewGame","setJackPotUserArr","updateBalance","updateJackpotAmount","updateSubGameTimes","getStore","dataTransfer","DataKeyType","setData","Task","TaskSchedulerDefault","EffectType","setRollRoundEnd","bundlePkgName","RollerPanelViewModel","PopupViewModel","GameBoardViewModel","constructor","currentGameViewModel","changeGameTypeTask","flyBgNode","currGameType","NONE","viewGameType","begin","addOnce","AUTH","data","dispatch","gameType","bl","freeGameCount","freeGameCoins","BALANCE","dispath","CHANGE_GAME","MAIN","FREE_GAME_AMOUNT","localStorage","setItem","JSON","stringify","sendSktMessage","token","getItem","gameId","add","JACKPOT","BALANCE_UPDATE","JACKPOT_USER","LAUNCHER_BET","error","console","log","GAME_TYPE","setEvent","changeGameHandler","lastGameType","done","getFile","FLY_BG","source","viewNode","addChild","window","setTimeout","unMount","EFFECT1","then","subscribeDone","createRollerView","joinqQueue","rollerPanelViewModel","mountView","MAIN_GAME","appendTo","comp","getGameNode","effectType","EFFECT_FADE","effectDone","connect","SUBGAME1","destroy","createFlyBg","createSgChooseSmallGame","chooseSmall","unMountCallBack","removeById","openPopup","nodeWrap","baseBoardView","POPUP","isModal","closeHandler","inject","state","game"],"mappings":"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","sourcesContent":["import { Game, Node, instantiate, sys, tween } from \"cc\"\r\nimport ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { BlessedWealthy_gameBoard, IProps, IEvent } from \"../components/BlessedWealthy_gameBoard\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { SKT_MAG_TYPE, sktInstance, sktMsgListener } from \"../socketConnect\"\r\nimport config from \"../config\"\r\nimport { GameType, SMALLGAME } from \"../type\"\r\nimport { NORMAL_MAG_TYPE, blessedWealthy_Audio, msgListener, sourceManageSeletor, gameBoardViewModel } from \"../index\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { changeGame, changeProfit, changeViewGame, setFreeGameId, setJackPotUserArr, setSubGameTimes, updateBalance, updateJackpotAmount, updateSubGameTimes } from \"../store/actions/game\"\r\nimport { getStore } from \"../store\"\r\nimport dataTransfer, { DataKeyType, setData } from \"../dataTransfer\"\r\nimport TaskScheduler, { Task, TaskSchedulerDefault } from \"../../../utils/TaskScheduler\"\r\nimport { EffectType } from \"../../../utils/NodeIOEffect\"\r\nimport { setRollRoundEnd } from \"../store/actions/roller\"\r\nimport { bundlePkgName } from '../sourceDefine';\r\nimport { SoundPathDefine } from \"../sourceDefine/soundDefine\"\r\nimport RollerPanelViewModel from \"./RollerPanelViewModel\"\r\n// import SgChooseViewModel from \"./SgChooseViewModel\"\r\n// import { phoenix_small_result,IState as BPIState, IProps as BPIProps,IEvent as BPIEvent } from \"../components/phoenix_small_result\"\r\nimport BaseViewModel from \"../../../common/viewModel/BaseViewModel\"\r\nimport PopupViewModel from \"./PopupViewModel\"\r\n\r\ntype anthInfoType = {\r\n  bl: number\r\n  freeGameCount: number\r\n  freeGameCoins: number,\r\n  gameType: GameType\r\n  iconStay: number\r\n  lv: number\r\n  memberId: string\r\n  tableId: string,\r\n  // totalFreeGameCount:number,\r\n}\r\n\r\nexport type ChooseSmallGame = {\r\n  done?: Function,\r\n  gameType?:GameType,\r\n}\r\n\r\nexport let rollerPanelViewModel: RollerPanelViewModel;\r\n// export let chooseSmallGame: SgChooseViewModel;\r\nexport let smallResultViewModel\r\n@StoreInject(getStore())\r\nclass GameBoardViewModel extends ViewModel<BlessedWealthy_gameBoard, IProps, IEvent> {\r\n  constructor() {\r\n    super('BlessedWealthy_gameBoard')\r\n  }\r\n  public currentGameViewModel: ViewModel<any, any, any> = null\r\n  public changeGameTypeTask: Task\r\n  public flyBgNode: Node\r\n  private currGameType: GameType = GameType.NONE;\r\n  private viewGameType: GameType;\r\n  protected begin() {\r\n   \r\n    sktMsgListener.addOnce(SKT_MAG_TYPE.AUTH, bundlePkgName, (data: anthInfoType) => {\r\n      // if(data.gameType !== GameType.MAIN &&  data.freeGameCount === 0) {//还未选择小游戏id\r\n      //   const chooseSmall :ChooseSmallGame= {\r\n      //     gameType:data.gameType\r\n      //   }\r\n      //   this.createSgChooseSmallGame(chooseSmall);\r\n      // } else {\r\n      //   this.dispatch(changeGame(data.gameType))\r\n      //   this.dispatch(changeViewGame(data.gameType))\r\n      // }\r\n      this.dispatch(changeGame(data.gameType))\r\n\r\n      /**刚刚初始化游戏，需要带入必要的游戏状态 */\r\n      setData(\"bl\", data.bl)\r\n      setData(\"gameType\", data.gameType)\r\n      setData(\"freeCount\", data.freeGameCount)\r\n      setData(\"freeGameAmount\", data.freeGameCoins)\r\n      // this.dispatch(setFreeGameId(data.phoenixFreeGameLine))\r\n      this.dispatch(updateBalance(dataTransfer(DataKeyType.BALANCE)))\r\n      // this.dispatch(setSubGameTimes(data.totalFreeGameCount))\r\n      this.dispatch(changeViewGame(data.gameType))\r\n      this.dispatch(updateSubGameTimes(data.freeGameCount))\r\n      msgListener.dispath(NORMAL_MAG_TYPE.CHANGE_GAME, { currGameType: data.gameType })\r\n      if (data.gameType !== GameType.MAIN) {\r\n       \r\n        //小游戏需要读取盈利状态\r\n        this.dispatch(changeProfit(dataTransfer(DataKeyType.FREE_GAME_AMOUNT)))\r\n      }\r\n      sys.localStorage.setItem(\"dfdc\", JSON.stringify(data))\r\n      // this.dispatch(changeGame(GameType.MAIN))\r\n    })\r\n    sktInstance.sendSktMessage(SKT_MAG_TYPE.AUTH, {\r\n      token: sys.localStorage.getItem(\"token\"),\r\n      gameId: config.gameId\r\n    })\r\n    sktMsgListener.add(SKT_MAG_TYPE.JACKPOT, bundlePkgName, (data) => {\r\n      this.dispatch(updateJackpotAmount(data))\r\n    })\r\n    sktMsgListener.add(SKT_MAG_TYPE.BALANCE_UPDATE, bundlePkgName, (data) => {\r\n      this.dispatch(updateBalance(data))\r\n    })\r\n    sktMsgListener.add(SKT_MAG_TYPE.JACKPOT_USER, bundlePkgName, (data) => {\r\n      this.dispatch(setJackPotUserArr(data))\r\n    })\r\n\r\n    sktMsgListener.add(SKT_MAG_TYPE.LAUNCHER_BET, bundlePkgName, (data, error) => {\r\n      console.log('curGame------------',this.currGameType, dataTransfer(DataKeyType.GAME_TYPE))\r\n      //小游戏转主游戏时判定 切换gameType值\r\n      if (this.currGameType !== dataTransfer(DataKeyType.GAME_TYPE)) {\r\n        this.currGameType = dataTransfer(DataKeyType.GAME_TYPE)\r\n        this.dispatch(changeGame(dataTransfer(DataKeyType.GAME_TYPE)))\r\n        // if(dataTransfer(DataKeyType.GAME_TYPE)===GameType.MAIN){\r\n        //   this.dispatch(changeProfit(0))\r\n        // }\r\n      }\r\n    }, 100)\r\n\r\n    this.setEvent({\r\n      /**切换游戏时执行 */\r\n      changeGameHandler: (lastGameType, currGameType) => {\r\n        console.log(\"lastGameType, currGameType\",lastGameType, currGameType)\r\n        this.changeGameTypeTask = new Task((done) => {\r\n          if (this.currentGameViewModel) {\r\n            // phoenix_Audio.playOneShot(SoundPathDefine.TRANSFER)\r\n            this.flyBgNode = instantiate(sourceManageSeletor().getFile(PrefabPathDefine.FLY_BG).source)//转场动画 飞云的背景\r\n            this.viewNode.addChild(this.flyBgNode)\r\n            window.setTimeout(() => {\r\n              //卸载当前的roller面板\r\n              this.currentGameViewModel.unMount(EffectType.EFFECT1).then(() => {\r\n                done()\r\n              })\r\n            }, 1000)\r\n          } else {\r\n            done()\r\n          }\r\n        }).subscribeDone('change', () => {\r\n          console.log(\"2222222222\");\r\n          \r\n          this.createRollerView(currGameType)\r\n\r\n        })\r\n        // this.changeGameTypeTask.name = \"changeGameTypeTask\"\r\n        if (!this.currentGameViewModel) {\r\n          //初始化的时候才直接执行\r\n          TaskSchedulerDefault().joinqQueue(this.changeGameTypeTask, true)\r\n          // console.log('changeGameTypeTask init')\r\n        }\r\n      }\r\n    })\r\n  }\r\n  /**roller面板 */\r\n  public createRollerView(currGameType) {\r\n    this.dispatch(changeViewGame(currGameType))\r\n\r\n    // 判断主游戏0和小游戏1时加载的roller面板 \r\n    if (currGameType === GameType.MAIN) {\r\n      rollerPanelViewModel = new RollerPanelViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.MAIN_GAME).source).appendTo(this.comp.getGameNode(), {\r\n        effectType: EffectType.EFFECT_FADE, effectDone: () => {\r\n          this.dispatch(setRollRoundEnd(true))\r\n        }\r\n      }).connect()\r\n\r\n      this.currentGameViewModel = rollerPanelViewModel;\r\n    } else if (currGameType === GameType.SUBGAME1) {\r\n      rollerPanelViewModel = new RollerPanelViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.MAIN_GAME).source).appendTo(this.comp.getGameNode(), {\r\n        effectType: EffectType.EFFECT_FADE, effectDone: () => {\r\n          this.dispatch(setRollRoundEnd(true))\r\n        }\r\n      }).connect()\r\n      this.currentGameViewModel = rollerPanelViewModel;\r\n    } \r\n    msgListener.dispath(NORMAL_MAG_TYPE.CHANGE_GAME, { currGameType })\r\n    window.setTimeout(() => {\r\n      this.flyBgNode && this.flyBgNode.destroy()\r\n    }, 1500)\r\n  }\r\n  /**转场动画 */\r\n  public createFlyBg(gameType) {\r\n      //转场\r\n      this.flyBgNode = instantiate(sourceManageSeletor().getFile(PrefabPathDefine.FLY_BG).source)//动画 飞云的背景\r\n      this.viewNode.addChild(this.flyBgNode)\r\n      window.setTimeout(() => {\r\n        this.flyBgNode && this.flyBgNode.destroy()\r\n        this.dispatch(changeGame(gameType))//切换小游戏gameType===1\r\n        this.dispatch(changeViewGame(gameType))\r\n      }, 1500)\r\n  }\r\n  /**选择小游戏的板 */\r\n  public createSgChooseSmallGame(chooseSmall:ChooseSmallGame) {\r\n    //禁用掉主下注按钮\r\n    this.dispatch(setRollRoundEnd(false))\r\n\r\n  }\r\n  protected unMountCallBack(): void {\r\n    sktMsgListener.removeById(bundlePkgName)\r\n  }\r\n\r\n  public openPopup(nodeWrap?: Node) {\r\n    const baseBoardView = new PopupViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.POPUP).source)\r\n    .appendTo(this.comp.getGameNode(), { effectType: EffectType.EFFECT1, isModal: true }).setEvent({\r\n      closeHandler: () => {\r\n        baseBoardView.unMount(EffectType.EFFECT1)\r\n      }\r\n      }).connect()\r\n  }\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      this.viewGameType = state.game.viewGameType;\r\n      return {\r\n        gameType: state.game.currGameType\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default GameBoardViewModel\r\n"]}
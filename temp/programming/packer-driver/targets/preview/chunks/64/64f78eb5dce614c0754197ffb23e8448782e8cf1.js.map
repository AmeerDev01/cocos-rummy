{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/yxx/socketConnect.ts"],"names":["WebSocketToDo","sktListenerFactoy","initConfig","subGameList","config","getStore","addToastAction","setLoadingAction","global","lang","SKT_MAG_TYPE","sktMsgListener","sktInstance","dispatch","Promise","resolve","reject","then","gameIdTmp","gameId","wsUrl","testConfig","websocketUrl","find","i","init","sktCode","onMessage","code","data","error","dispath","onDataFail","content","write","k","WebSocketModule","socketConnectDateFail","placeStr","isShow","onAnthFail","socketConnectAuthFaild","closeSubGame","confirmContent","onDisconnect","socketConnectDisconnect","onReConnect","initSocket","removeInstance","close","removeById"],"mappings":"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","sourcesContent":["import { default as redux } from \"redux\"\r\nimport WebSocketToDo from \"../../common/WebSocketToDo\"\r\nimport { sktListenerFactoy } from \"../../common/sktListenerFactoy\"\r\nimport { initConfig, subGameList } from \"../../hall/config\"\r\nimport config from \"./config\"\r\nimport { getStore } from \"../../hall/store\"\r\nimport { ToastType, addToastAction, setLoadingAction } from \"../../hall/store/actions/baseBoard\"\r\nimport { global, lang } from \"../../hall\"\r\n\r\nexport enum SKT_MAG_TYPE {\r\n  /**心跳 */\r\n  HEART_BEAT = \"1\",\r\n  /**认证 */\r\n  AUTH = \"2\",\r\n  /**进入游戏 */\r\n  JOIN_GAME = \"4\",\r\n  /**金额变化 */\r\n  GOLD_CHANGE = \"10\",\r\n  /**权限验证 */\r\n  POWER_VERIFY = \"11\",\r\n  /**启动下注 */\r\n  LAUNCHER_BET = \"802\",\r\n  /**推送下注 */\r\n  PUSH_BET = \"8102\",\r\n  /**游戏状态 */\r\n  GAME_STATUE = \"8101\",\r\n  /**推送结果 */\r\n  PUSH_RESULT = \"805\",\r\n  /**在线人数变化 */\r\n  ONLINE_NUMBER_CHANGE = \"807\",\r\n  /**自己的结算数据推送 */\r\n  MY_BALANCE_PUSH = \"804\",\r\n  /**其他数据 */\r\n  BALANCE_PUSH = \"808\",\r\n  /**退出游戏 */\r\n  QUIT_GAME = \"506\",\r\n  /**游戏唤醒消息 */\r\n  GAME_SHOW = \"810\",\r\n  /**赠送礼物 */\r\n  GIVE_GIFT = \"812\",\r\n}\r\n\r\nexport const sktMsgListener = sktListenerFactoy<SKT_MAG_TYPE>()\r\n\r\nexport let sktInstance: WebSocketToDo<SKT_MAG_TYPE> = null\r\nexport default () => {\r\n  const dispatch = getStore().dispatch\r\n  return new Promise((resolve, reject) => {\r\n    if (sktInstance) {\r\n      resolve(sktInstance)\r\n    } else {\r\n      sktInstance = new WebSocketToDo<SKT_MAG_TYPE>()\r\n      initConfig().then(() => {\r\n        let gameIdTmp = config.gameId;\r\n        let wsUrl = config.testConfig.wsUrl;\r\n        if (!config.testConfig.wsUrl) {\r\n          const { gameId, websocketUrl } = subGameList.find(i => i.gameId === config.gameId)\r\n          wsUrl = websocketUrl;\r\n          gameIdTmp = gameId;\r\n        }\r\n        sktInstance.init(config.sktCode, gameIdTmp, wsUrl, {\r\n          onMessage: (code, data, error?: string) => {\r\n            sktMsgListener.dispath(code, data, error)\r\n          },\r\n          onDataFail: (data: any) => {\r\n\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDateFail, {}, { placeStr: \"连接失败\" }) }))\r\n            dispatch(setLoadingAction({ isShow: false }))\r\n          },\r\n          onAnthFail: () => {\r\n            dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectAuthFaild, {}, { placeStr: \"Auth Faild\" }) }))\r\n            global.closeSubGame({\r\n              confirmContent: lang.write(k => k.WebSocketModule.socketConnectAuthFaild)\r\n            });\r\n          },\r\n          onDisconnect: (data: any) => {\r\n            // dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDisconnect, {}, { placeStr: \"socket disconnect\" }), type: ToastType.ERROR }))\r\n            // dispatch(setLoadingAction({ isShow: false }))\r\n            global.closeSubGame({ confirmContent: lang.write(k => k.WebSocketModule.socketConnectDisconnect) })\r\n          },\r\n          onReConnect: () => true\r\n        })\r\n        sktInstance.initSocket().then(() => {\r\n          resolve(sktInstance)\r\n        })\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const removeInstance = () => {\r\n  sktInstance && sktInstance.close();\r\n  sktInstance = null\r\n  sktMsgListener && sktMsgListener.removeById(\"yxx\");\r\n}"]}
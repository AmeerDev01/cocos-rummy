{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/utils/fastEqual/utils.ts"],"names":["combineComparators","comparatorA","comparatorB","isEqual","a","b","state","createIsCircular","areItemsEqual","isCircular","cache","cachedA","get","cachedB","set","result","delete","getStrictProperties","object","getOwnPropertyNames","concat","getOwnPropertySymbols","sameValueZeroEqual","Object","hasOwnProperty","prototype","hasOwn","property","call"],"mappings":";;;;;AAYA;AACA;AACA;AACO,WAASA,kBAAT,CACLC,WADK,EAELC,WAFK,EAGL;AACA,WAAO,SAASC,OAAT,CAAuBC,CAAvB,EAA6BC,CAA7B,EAAmCC,KAAnC,EAAuD;AAC5D,aAAOL,WAAW,CAACG,CAAD,EAAIC,CAAJ,EAAOC,KAAP,CAAX,IAA4BJ,WAAW,CAACE,CAAD,EAAIC,CAAJ,EAAOC,KAAP,CAA9C;AACD,KAFD;AAGD;AAED;AACA;AACA;AACA;AACA;;;AACO,WAASC,gBAAT,CAELC,aAFK,EAEwC;AAC7C,WAAO,SAASC,UAAT,CACLL,CADK,EAELC,CAFK,EAGLC,KAHK,EAIL;AACA,UAAI,CAACF,CAAD,IAAM,CAACC,CAAP,IAAY,OAAOD,CAAP,KAAa,QAAzB,IAAqC,OAAOC,CAAP,KAAa,QAAtD,EAAgE;AAC9D,eAAOG,aAAa,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,KAAP,CAApB;AACD;;AAED,UAAM;AAAEI,QAAAA;AAAF,UAAYJ,KAAlB;AAEA,UAAMK,OAAO,GAAGD,KAAK,CAACE,GAAN,CAAUR,CAAV,CAAhB;AACA,UAAMS,OAAO,GAAGH,KAAK,CAACE,GAAN,CAAUP,CAAV,CAAhB;;AAEA,UAAIM,OAAO,IAAIE,OAAf,EAAwB;AACtB,eAAOF,OAAO,KAAKN,CAAZ,IAAiBQ,OAAO,KAAKT,CAApC;AACD;;AAEDM,MAAAA,KAAK,CAACI,GAAN,CAAUV,CAAV,EAAaC,CAAb;AACAK,MAAAA,KAAK,CAACI,GAAN,CAAUT,CAAV,EAAaD,CAAb;AAEA,UAAMW,MAAM,GAAGP,aAAa,CAACJ,CAAD,EAAIC,CAAJ,EAAOC,KAAP,CAA5B;AAEAI,MAAAA,KAAK,CAACM,MAAN,CAAaZ,CAAb;AACAM,MAAAA,KAAK,CAACM,MAAN,CAAaX,CAAb;AAEA,aAAOU,MAAP;AACD,KA3BD;AA4BD;AAED;AACA;AACA;AACA;;;AACO,WAASE,mBAAT,CACLC,MADK,EAEmB;AACxB,WAAQC,mBAAmB,CAACD,MAAD,CAApB,CAAwDE,MAAxD,CACLC,qBAAqB,CAACH,MAAD,CADhB,CAAP;AAGD;AAED;AACA;AACA;;;AAMA;AACA;AACA;AACO,WAASI,kBAAT,CAA4BlB,CAA5B,EAAoCC,CAApC,EAAqD;AAC1D,WAAOD,CAAC,IAAIC,CAAL,GAASD,CAAC,KAAKC,CAAf,GAAmBD,CAAC,KAAKC,CAAN,IAAYD,CAAC,KAAKA,CAAN,IAAWC,CAAC,KAAKA,CAAvD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAxEeL,kB;sBAcAO,gB;yBAqCAU,mB;wBAmBAK;;;;;;;;;;;;;;OA5EV;AAAEH,QAAAA,mBAAF;AAAuBE,QAAAA;AAAvB,O,GAAiDE,M;OACjD;AAAEC,QAAAA;AAAF,O,GAAqBD,MAAM,CAACE,S;;wBAmErBC,M,GACXH,MAAM,CAACG,MAAP,KACC,CAACR,MAAD,EAAqBS,QAArB,KACCH,cAAc,CAACI,IAAf,CAAoBV,MAApB,EAA4BS,QAA5B,CAFF,C","sourcesContent":["import {\r\n  AnyEqualityComparator,\r\n  Cache,\r\n  CircularState,\r\n  Dictionary,\r\n  State,\r\n  TypeEqualityComparator,\r\n} from './internalTypes';\r\n\r\nconst { getOwnPropertyNames, getOwnPropertySymbols } = Object;\r\nconst { hasOwnProperty } = Object.prototype;\r\n\r\n/**\r\n * Combine two comparators into a single comparators.\r\n */\r\nexport function combineComparators<Meta>(\r\n  comparatorA: AnyEqualityComparator<Meta>,\r\n  comparatorB: AnyEqualityComparator<Meta>,\r\n) {\r\n  return function isEqual<A, B>(a: A, b: B, state: State<Meta>) {\r\n    return comparatorA(a, b, state) && comparatorB(a, b, state);\r\n  };\r\n}\r\n\r\n/**\r\n * Wrap the provided `areItemsEqual` method to manage the circular state, allowing\r\n * for circular references to be safely included in the comparison without creating\r\n * stack overflows.\r\n */\r\nexport function createIsCircular<\r\n  AreItemsEqual extends TypeEqualityComparator<any, any>,\r\n>(areItemsEqual: AreItemsEqual): AreItemsEqual {\r\n  return function isCircular(\r\n    a: any,\r\n    b: any,\r\n    state: CircularState<Cache<any, any>>,\r\n  ) {\r\n    if (!a || !b || typeof a !== 'object' || typeof b !== 'object') {\r\n      return areItemsEqual(a, b, state);\r\n    }\r\n\r\n    const { cache } = state;\r\n\r\n    const cachedA = cache.get(a);\r\n    const cachedB = cache.get(b);\r\n\r\n    if (cachedA && cachedB) {\r\n      return cachedA === b && cachedB === a;\r\n    }\r\n\r\n    cache.set(a, b);\r\n    cache.set(b, a);\r\n\r\n    const result = areItemsEqual(a, b, state);\r\n\r\n    cache.delete(a);\r\n    cache.delete(b);\r\n\r\n    return result;\r\n  } as AreItemsEqual;\r\n}\r\n\r\n/**\r\n * Get the properties to strictly examine, which include both own properties that are\r\n * not enumerable and symbol properties.\r\n */\r\nexport function getStrictProperties(\r\n  object: Dictionary,\r\n): Array<string | symbol> {\r\n  return (getOwnPropertyNames(object) as Array<string | symbol>).concat(\r\n    getOwnPropertySymbols(object),\r\n  );\r\n}\r\n\r\n/**\r\n * Whether the object contains the property passed as an own property.\r\n */\r\nexport const hasOwn =\r\n  Object.hasOwn ||\r\n  ((object: Dictionary, property: number | string | symbol) =>\r\n    hasOwnProperty.call(object, property));\r\n\r\n/**\r\n * Whether the values passed are strictly equal or both NaN.\r\n */\r\nexport function sameValueZeroEqual(a: any, b: any): boolean {\r\n  return a || b ? a === b : a === b || (a !== a && b !== b);\r\n}\r\n"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/starlight/socketConnect.ts"],"names":["WebSocketToDo","listenerFactoy","initConfig","subGameList","config","addToastAction","setLoadingAction","getStore","global","lang","changeAutoLauncherType","AutoLauncherType","headerViewModel","SKT_MAG_TYPE","sktMsgListener","sktInstance","dispatch","Promise","resolve","reject","then","gameId","websocketUrl","find","i","init","sktCode","onMessage","code","data","error","dispath","onDataFail","LAUNCHER_BET","comp","closeGame","closeSubGame","confirmContent","write","k","WebSocketModule","socketConnectDateFail","content","placeStr","isShow","onAnthFail","onDisconnect","socketConnectDisconnect","onReConnect","times","NONE","initSocket","d","catch","e","hallDispatch","InitGameModule","GameBoardInit","removeInstance","window","setTimeout","isPre","ConfigGameFaild","removeAll","close"],"mappings":"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","sourcesContent":["import { default as redux } from \"redux\"\r\nimport WebSocketToDo from \"../../common/WebSocketToDo\"\r\nimport { listenerFactoy } from \"../../common/listenerFactoy\"\r\nimport { initConfig, subGameList } from \"../../hall/config\"\r\nimport config from \"./config\"\r\nimport { ToastType, addToastAction, setLoadingAction } from \"../../hall/store/actions/baseBoard\"\r\nimport store, { getStore } from \"./store\"\r\nimport { global, lang } from \"../../hall\"\r\nimport { changeAutoLauncherType } from \"./store/actions/game\"\r\nimport { AutoLauncherType } from \"./type\"\r\nimport {headerViewModel } from \"./index\"\r\n\r\nexport enum SKT_MAG_TYPE {\r\n  /**心跳 */\r\n  HEART_BEAT = \"1\",\r\n  /**认证 */\r\n  AUTH = \"2\",\r\n  /**启动下注 */\r\n  LAUNCHER_BET = \"501\",\r\n  /**JACKPOT */\r\n  JACKPOT = \"7\",\r\n  /**更新金币 */\r\n  BALANCE_UPDATE = \"10\",\r\n   /**清退房间 */\r\n   VACATETHEROOM = \"3\"\r\n}\r\n\r\nexport const sktMsgListener = listenerFactoy<SKT_MAG_TYPE>()\r\n\r\nexport let sktInstance: WebSocketToDo<SKT_MAG_TYPE> = null\r\nexport default () => {\r\n  const dispatch = getStore().dispatch\r\n  return new Promise((resolve, reject) => {\r\n    if (sktInstance) {\r\n      resolve(sktInstance)\r\n    } else {\r\n      sktInstance = new WebSocketToDo<SKT_MAG_TYPE>()\r\n      initConfig().then(() => {\r\n        const { gameId, websocketUrl } = subGameList.find(i => i.gameId === config.gameId)\r\n        sktInstance.init(config.sktCode, gameId, websocketUrl, {\r\n          onMessage: (code, data, error) => {\r\n            sktMsgListener.dispath(code, data, error)\r\n          },\r\n          onDataFail: (code: any) => {\r\n            if(code === SKT_MAG_TYPE.LAUNCHER_BET){\r\n              headerViewModel.comp.closeGame()\r\n              global.closeSubGame({\r\n                confirmContent:(lang.write(k => k.WebSocketModule.socketConnectDateFail) + ' (-' + code +')')\r\n              });\r\n            }else{\r\n              dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDateFail, {}, { placeStr: \"连接失败\" }) + ' (-' + code+ ')'}))\r\n              dispatch(setLoadingAction({ isShow: false }))\r\n            }\r\n          },\r\n          onAnthFail: (error) => {\r\n            global.closeSubGame({\r\n              confirmContent: error || lang.write(k => k.WebSocketModule.socketConnectDateFail)\r\n            });\r\n          },\r\n          onDisconnect: (data: any) => {\r\n            // dispatch(addToastAction({ content: lang.write(k => k.WebSocketModule.socketConnectDisconnect, {}, { placeStr: \"socket disconnect\" }),type: ToastType.ERROR }))\r\n            // dispatch(setLoadingAction({ isShow: false }))\r\n            global.closeSubGame({ confirmContent: lang.write(k => k.WebSocketModule.socketConnectDisconnect) })\r\n          },\r\n          onReConnect: (times) => {\r\n            if (times >= 1) {\r\n              dispatch(changeAutoLauncherType(AutoLauncherType.NONE))\r\n              global.closeSubGame({\r\n                confirmContent: lang.write(k => k.WebSocketModule.socketConnectDisconnect),\r\n              });\r\n              // removeInstance()\r\n              return false;\r\n            } else {\r\n              return true;\r\n            }\r\n          }\r\n        })\r\n        sktInstance.initSocket().then((d) => {\r\n          resolve(sktInstance)\r\n        }).catch(e => {\r\n          global.hallDispatch(addToastAction({ content: lang.write(k => k.InitGameModule.GameBoardInit, {}, { placeStr: \"游戏初始化失败\" }) }))\r\n          removeInstance()\r\n          window.setTimeout(() => {\r\n            global.closeSubGame({ isPre: true })\r\n          }, 1500)\r\n        })\r\n      }).catch(e => {\r\n        global.hallDispatch(addToastAction({ content: lang.write(k => k.InitGameModule.GameBoardInit, {}, { placeStr: \"游戏初始化失败\" }) }))\r\n        global.closeSubGame({\r\n          confirmContent: lang.write(k => k.WebSocketModule.ConfigGameFaild)\r\n        } );\r\n      })\r\n    }\r\n  })\r\n}\r\n\r\nexport const removeInstance = () => {\r\n  if(sktMsgListener){\r\n    sktMsgListener.removeAll()\r\n    sktInstance.close()\r\n    sktInstance = null\r\n  }\r\n}"]}
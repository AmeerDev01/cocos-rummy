{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/utils/Throttler.ts"],"names":["Throttler","getInstance","throttler","isDebouncerAsync","key","time","debounce","inform","Promise","reslove","debouncerMap","waiting","done","endHeadler","window","setTimeout"],"mappings":";;;iBACqBA,S;;;;;;;;;;;;;;;;;AADrB;yBACqBA,S,GAAN,MAAMA,SAAN,CAAgB;AAEX,eAAXC,WAAW,GAAc;AAC9B,cAAI,CAAC,KAAKC,SAAV,EAAqB,KAAKA,SAAL,GAAiB,IAAIF,SAAJ,EAAjB;AACrB,iBAAO,KAAKE,SAAZ;AACD;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AAC+B,eAAhBC,gBAAgB,CAACC,GAAD,EAAcC,IAAd,EAA4BC,QAA5B,EAA8CC,MAA9C,EAAqF;AAAA;;AAAA;AAAA,gBAAzDD,QAAyD;AAAzDA,cAAAA,QAAyD,GAA9C,KAA8C;AAAA;;AAChH,mBAAO,IAAIE,OAAJ,CAAaC,OAAD,IAAa;AAC9B,kBAAI,KAAI,CAACC,YAAL,CAAkBN,GAAlB,KAA0B,KAAI,CAACM,YAAL,CAAkBN,GAAlB,EAAuBO,OAArD,EAA8D;AAC5DJ,gBAAAA,MAAM,IAAIA,MAAM,EAAhB;;AACA,oBAAID,QAAQ,IAAI,KAAI,CAACI,YAAL,CAAkBN,GAAlB,EAAuBQ,IAAvC,EAA6C;AAC3C;AACD;;AACD,gBAAA,KAAI,CAACF,YAAL,CAAkBN,GAAlB,EAAuBQ,IAAvB,GAA8B,IAA9B;AACA,gBAAA,KAAI,CAACF,YAAL,CAAkBN,GAAlB,EAAuBS,UAAvB,GAAoCJ,OAApC;AACD,eAPD,MAOO;AACL,gBAAA,KAAI,CAACC,YAAL,CAAkBN,GAAlB,IAAyB;AAAEO,kBAAAA,OAAO,EAAE,IAAX;AAAiBC,kBAAAA,IAAI,EAAE;AAAvB,iBAAzB;AACAE,gBAAAA,MAAM,CAACC,UAAP,CAAkB,MAAM;AACtB,sBAAI,KAAI,CAACL,YAAL,CAAkBN,GAAlB,EAAuBQ,IAAvB,IAA+B,KAAI,CAACF,YAAL,CAAkBN,GAAlB,EAAuBS,UAA1D,EAAsE;AACpE,oBAAA,KAAI,CAACH,YAAL,CAAkBN,GAAlB,EAAuBS,UAAvB,CAAmC,IAAnC;AACD;;AACD,yBAAO,KAAI,CAACH,YAAL,CAAkBN,GAAlB,CAAP;AACD,iBALD,EAKGC,IALH;AAMAI,gBAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,aAlBM,CAAP;AADgH;AAoBjH;;AAlC4B,O;;AAAVT,MAAAA,S,CACJE,S;AADIF,MAAAA,S,CAMJU,Y,GAA8G,E","sourcesContent":["/**节流/防抖辅助类 */\r\nexport default class Throttler {\r\n  private static throttler: Throttler\r\n  static getInstance(): Throttler {\r\n    if (!this.throttler) this.throttler = new Throttler()\r\n    return this.throttler\r\n  }\r\n  private static debouncerMap: { [key: string]: { waiting: boolean, done: boolean, endHeadler?: (value: boolean) => void } } = {}\r\n  /**\r\n   * 节流：使用示例：if (!await Throttler.isDebouncerAsync(soleKey, 200, true)) return; trip：非async函数使用then\r\n   * @param key 输入唯一的字符串，一般可以是url、path、id等\r\n   * @param time 节流等待时间\r\n   * @param debounce 防抖，设为true，time时间内的事件都会被取消的同时，禁用期内发生的调用，在倒计时完成亦不会发生调用，直到再次发起，值为false：倒计时结束自动发起一次\r\n   * @returns reslove：正常执行\r\n   */\r\n  static async isDebouncerAsync(key: string, time: number, debounce = false, inform?: () => void): Promise<boolean> {\r\n    return new Promise((reslove) => {\r\n      if (this.debouncerMap[key] && this.debouncerMap[key].waiting) {\r\n        inform && inform()\r\n        if (debounce || this.debouncerMap[key].done) {\r\n          return\r\n        }\r\n        this.debouncerMap[key].done = true\r\n        this.debouncerMap[key].endHeadler = reslove\r\n      } else {\r\n        this.debouncerMap[key] = { waiting: true, done: false }\r\n        window.setTimeout(() => {\r\n          if (this.debouncerMap[key].done && this.debouncerMap[key].endHeadler) {\r\n            this.debouncerMap[key].endHeadler!(true)\r\n          }\r\n          delete this.debouncerMap[key]\r\n        }, time)\r\n        reslove(true)\r\n      }\r\n    })\r\n  }\r\n}"]}
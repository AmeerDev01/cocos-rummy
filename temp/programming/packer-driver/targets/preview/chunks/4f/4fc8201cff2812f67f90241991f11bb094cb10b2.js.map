{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/dragonTiger/components/DragonTiger_win.ts"],"names":["formatNumber","num","units","unitIndex","length","Number","isInteger","formatAmountWithCommas","toFixed","paddingNum","logo","result","toString","split","position","indexOf","splice","join","removeComma","str","newStr","replace","_decorator","Label","Node","BaseComponent","updateWinUsers","ccclass","property","DragonTiger_win","propertyNode","props_spr_win_bg","props_label_win_num","props_spr_user_bg1","props_spr_user_bg2","props_spr_user_bg3","props_spr_user_bg4","props","winGold","roomWinInfo","events","onClosePanel","start","initState","bindEvent","useProps","key","value","cur","getComponent","string","node","toggleCallback","event","customEventData","bindUI","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator,Label,Node, Sprite, SpriteFrame } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nimport { initToggle, omitStr } from '../../../utils/tool';\r\nimport { bundleCommon, bundleDragonTiger } from '../index';\r\nimport { WinInfo } from '../store/actions/history';\r\nimport { playBtnClick } from '../index';\r\nimport { updateWinUsers } from './DragonTiger_lose';\r\nconst { ccclass, property } = _decorator;\r\n\r\nexport \tfunction formatNumber(num: number): string {\r\n\tif(!num) return \"0\";\r\n\tconst units = ['', 'K', 'M'];\r\n\tlet unitIndex = 0;\r\n  \r\n\t// 将数字按照1000为基数迭代缩小\r\n\twhile (num >= 1000 && unitIndex < units.length - 1) {\r\n\t  num /= 1000;\r\n\t  unitIndex++;\r\n\t}\r\n\tif(Number.isInteger(num)){\r\n\t\treturn num.formatAmountWithCommas() + units[unitIndex];\r\n\t}else{\r\n\t\t// 使用toFixed保留一位小数，并转换成字符串格式\r\n\t\treturn Number(num.toFixed(2)).formatAmountWithCommas() + units[unitIndex];\r\n\t}\r\n  \r\n\t\r\n  }\r\nexport function paddingNum(num){\r\n\tlet logo=\"\";//用于记录是正值还是负值\r\n\tif(num<0){\r\n\t\tlogo=\"-\";\r\n\t\tnum=-num;//将负数转正,如果不转正，则下面获取它的length时，会由于有个负号，使得长度+1，最终加逗号位置出错\r\n\t}\r\n\t\r\n\tlet result=num.toString().split(\"\");//将数字转化为了数组，便于使用数组中的splice方法插入逗号\r\n\tlet position = result.indexOf(\".\");//获取小数点的位置，根据有无小数点确定position最终值进入添加逗号环节\r\n\tposition = position !==-1 ? position-=1 : result.length;//因为只需考虑整数部分插入逗号，所以需要考虑有没有逗号。有逗号则不等于-1，减去逗号位置，则是下标0~position就是整数部分；若不是小数，则num原本就是整数，直接取其length即可\r\n\twhile(position>2){//只要下标值大于2，说明前面还可以插入“,”，则继续循环\r\n\t\tposition-=3;//下标前移3位，然后在这个下标对应的元素后面插入逗号\r\n\t\tresult.splice(position+1,0,\",\");\r\n\t }\r\n\t\treturn logo + result.join(\"\");//数组转换为字符串,前面+logo，若为负数则拼接个符号，否则拼接空字符\r\n}\r\n\r\nexport function removeComma(str){\r\n\tconst newStr=str.replace(/,/g,\"\")\r\n\treturn newStr\r\n}\r\n\r\n\r\nexport interface IState {\r\n\r\n}\r\n\r\nexport interface IProps {\r\n\twinGold:number,\r\n\troomWinInfo:WinInfo[]\r\n}\r\nexport interface IEvent {\r\n\tonClosePanel:()=>void\r\n}\r\n\r\n\r\n@ccclass('DragonTiger_win')\r\nexport class DragonTiger_win extends BaseComponent<IState, IProps, IEvent> {\r\n\tstart() {\r\n\r\n\t }\r\n\r\n\tprotected propertyNode = {\r\n\t\tprops_spr_win_bg:new Node(),\r\n        props_label_win_num:new Node(),\r\n\t\tprops_spr_user_bg1:new Node(),\r\n\t\tprops_spr_user_bg2:new Node(),\r\n\t\tprops_spr_user_bg3:new Node(),\r\n\t\tprops_spr_user_bg4:new Node(),\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n\t    winGold:0,\r\n\t\troomWinInfo:[]\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\tonClosePanel:()=>{}\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\t//    this.propertyNode.props_spr_win_bg.on(Node.EventType.TOUCH_END,()=>{\r\n\t// \tthis.events.onClosePanel()\r\n\t// \tplayBtnClick();\r\n\t//    })\r\n\t}\r\n\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n\r\n\t\tif (key === \"winGold\") {\r\n\t\t\t\r\n\t\t\tif(value.cur===0){\r\n\t\t\t\tthis.propertyNode.props_label_win_num.getComponent(Label).string = value.cur + \"\";\r\n\t\t\t}else{\r\n\t\t\t\tthis.propertyNode.props_label_win_num.getComponent(Label).string = \"+\" + value.cur.formatAmountWithCommas();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\tif (key === \"roomWinInfo\") {\r\n\t\t\tupdateWinUsers(this.node)\r\n\t\t\t\r\n\t\t\t// let headNode:Node[]=[this.propertyNode.props_spr_user_bg1,this.propertyNode.props_spr_user_bg2,this.propertyNode.props_spr_user_bg3,this.propertyNode.props_spr_user_bg4]\r\n\t\t\t// for(let i=0;i<headNode.length;i++){\r\n\t\t\t// \theadNode[i].active=false;\r\n\t\t\t// \theadNode[i].getChildByName(\"Label_user_name\").getComponent(Label).string=\"\";\r\n\t\t\t// \theadNode[i].getChildByName(\"Label_user_gold\").getComponent(Label).string=\"\"\r\n\t\t\t// \tbundleDragonTiger.load(`img/head1/spriteFrame`, SpriteFrame, (err, sp) => {\r\n\t\t\t// \t\tif (!err) {\r\n\t\t\t// \t\t\theadNode[i].getChildByName(`spr_user_head`).getComponent(Sprite).spriteFrame = sp\r\n\t\t\t// \t\t}\r\n\t\t\t// \t})\r\n\t\t\t\t\r\n\t\t\t// }\r\n\r\n\t\t\t// for(let i=0;i<value.cur.length;i++){\r\n\t\t\t// \tfor(let j=0;j<headNode.length;j++){\r\n\t\t\t// \t\tif(i===j){\r\n\t\t\t// \t\t\tlet goldNum:string=formatNumber(value.cur[i].gold)\r\n\t\t\t// \t\t\theadNode[j].active=true;\r\n\t\t\t// \t\t\theadNode[j].getChildByName(\"Label_user_name\").getComponent(Label).string=omitStr(value.cur[i].memberName,20);\r\n\t\t\t// \t\t\theadNode[j].getChildByName(\"Label_user_gold\").getComponent(Label).string=\"+\"+goldNum;\r\n\t\t\t// \t\t\tbundleCommon.load(`resource/head/head_circle_${value.cur[i].icon}/spriteFrame`, SpriteFrame, (err, sp) => {\r\n\t\t\t// \t\t\t\tif (!err) {\r\n\t\t\t// \t\t\t\t\theadNode[i].getChildByName(`spr_user_head`).getComponent(Sprite).spriteFrame = sp\r\n\t\t\t// \t\t\t\t}\r\n\t\t\t// \t\t\t})\r\n\t\t\t// \t\t}\r\n\t\t\t//     }\r\n\t\t\t// }\r\n\r\n\t\t}\t\r\n\t\t\t\r\n\t}\r\n\r\n\r\n\ttoggleCallback(event: Event, customEventData: string) {\r\n\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}
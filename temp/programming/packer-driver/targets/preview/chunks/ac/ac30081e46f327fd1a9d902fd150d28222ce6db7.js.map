{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/hall/viewModel/LoginPageViewModel.ts"],"names":["LoginPageViewModel","sys","ViewModel","LoginDialogViewModel","fetcher","sourceManageSeletor","PrefabPathDefine","EffectType","addToastAction","ApiUrl","lang","getPackageName","sendNativeVibrate","BaseViewModel","config","deviceInfo","ActivityViewModel","constructor","loginDialogViewModel","begin","isFastLogin","checkFastLogin","dispatch","content","write","k","loginModule","LoginRemind","placeStr","setEvent","onOpenLoginDialog","mountView","getFile","LOGIN_DIALOG","source","appendTo","viewNode","effectType","EFFECT1","isModal","closeHandler","unMount","EFFECT2","then","loginDoneHandler","comp","events","onLoginSuccess","errorHandler","errorInfo","openService","serviceVm","HELL_SERVICE_WEBVIEW","onClosePanel","setProps","openUrl","customerUrl","openHomePage","openURL","shareUrl","openActivity","activityViewModel","HELL_ACTIVITY","Promise","reslove","reject","localStorage","getItem","send","LOGIN_FAST","pkgCode","macCode","getUniqueId","token","data","values","split","length","setItem","catch","e","connect","initProps","inject","state"],"mappings":"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","sourcesContent":["import { Node, sys } from \"cc\"\r\nimport ViewModel from \"../../base/ViewModel\"\r\nimport { Hall_LoginPage, IProps, IEvent } from \"../components/Hall_LoginPage\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport LoginDialogViewModel from \"./LoginViewDialogModel\"\r\nimport { fetcher, sourceManageSeletor } from \"../index\"\r\nimport { PrefabPathDefine } from \"../sourceDefine/prefabDefine\"\r\nimport { EffectType } from \"../../utils/NodeIOEffect\"\r\nimport { addToastAction, ToastType } from \"../store/actions/baseBoard\"\r\nimport Fetcher from \"../../utils/Fetcher\"\r\nimport { ApiUrl } from \"../apiUrl\"\r\nimport { LoginType } from \"../components/Hall_LoginDialog\"\r\nimport { lang } from \"../index\"\r\nimport { getPackageName, sendNativeVibrate } from \"../../common/bridge\"\r\nimport BaseViewModel from \"./BaseViewModel\";\r\nimport { Hall_Service, IState as SIState, IProps as SIProps, IEvent as SIEvent } from '../components/Hall_Service';\r\nimport { config, deviceInfo } from \"../config\"\r\nimport ActivityViewModel from \"./ActivityViewModel\"\r\n\r\nclass LoginPageViewModel extends ViewModel<Hall_LoginPage, IProps, IEvent> {\r\n  constructor() {\r\n    super('Hall_LoginPage')\r\n  }\r\n  private loginDialogViewModel: LoginDialogViewModel\r\n  protected async begin() {\r\n    const isFastLogin = await this.checkFastLogin()\r\n    if (!isFastLogin) {\r\n      this.dispatch(addToastAction({ content: lang.write(k => k.loginModule.LoginRemind, {}, { placeStr: \"请登录\" }) }))\r\n      this.setEvent({\r\n        onOpenLoginDialog: () => {\r\n          if (this.loginDialogViewModel) return\r\n          this.loginDialogViewModel = new LoginDialogViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.LOGIN_DIALOG).source).appendTo(this.viewNode, {\r\n            effectType: EffectType.EFFECT1,\r\n            isModal: true\r\n          }).setEvent({\r\n            closeHandler: () => {\r\n              this.loginDialogViewModel.unMount(EffectType.EFFECT2).then(() => {\r\n                this.loginDialogViewModel = null\r\n              })\r\n            },\r\n            loginDoneHandler: () => {\r\n              this.comp.events.onLoginSuccess()\r\n            },\r\n            errorHandler: (errorInfo) => {\r\n              this.dispatch(addToastAction({ content: errorInfo }))\r\n            }\r\n          })\r\n        },\r\n        openService: () => {\r\n          const serviceVm = new BaseViewModel<Hall_Service, SIState, SIProps, SIEvent>('Hall_Service').mountView(sourceManageSeletor().getFile(PrefabPathDefine.HELL_SERVICE_WEBVIEW).source)\r\n            .appendTo(this.viewNode, { effectType: EffectType.EFFECT1, isModal: true }).setEvent({\r\n              onClosePanel: () => {\r\n                serviceVm.unMount(EffectType.EFFECT2)\r\n              }\r\n            }).setProps({\r\n              openUrl: `${config.customerUrl}`\r\n            })\r\n        },\r\n        openHomePage: () => {\r\n          sys.openURL(config.shareUrl)\r\n        },\r\n        openActivity: () => {\r\n          const activityViewModel = new ActivityViewModel().mountView(sourceManageSeletor().getFile(PrefabPathDefine.HELL_ACTIVITY).source)\r\n            .appendTo(this.viewNode, { effectType: EffectType.EFFECT1, isModal: true }).setEvent({\r\n              onClosePanel: () => {\r\n                activityViewModel.unMount(EffectType.EFFECT2)\r\n              }\r\n            })\r\n        }\r\n      })\r\n    } else {\r\n      // this.dispatch(addToastAction({ content: lang.write(k => k.HallModule.LoginMark, {}, { placeStr: \"已自动登录\" }) }))\r\n      //登录操作完成之后\r\n      sendNativeVibrate(200)\r\n      // this.dispatch(addToastAction({ content: \"已自动登录\" }))\r\n      this.comp.events.onLoginSuccess()\r\n    }\r\n  }\r\n\r\n  /**是否可以快读登录 */\r\n  private checkFastLogin(): Promise<boolean> {\r\n    return new Promise((reslove, reject) => {\r\n      if (sys.localStorage.getItem(\"token\")) {\r\n        fetcher.send(ApiUrl.LOGIN_FAST, {\r\n          pkgCode: getPackageName(),\r\n          macCode: deviceInfo.getUniqueId(),\r\n          token: sys.localStorage.getItem(\"token\")\r\n        }, \"post\", {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        }).then((data) => {\r\n          const values = data.split(\",\")\r\n          let token = values.length === 1 ? data : values[0];\r\n          sys.localStorage.setItem('token', token)\r\n          reslove(token ? true : false)\r\n        }).catch((e) => {\r\n          this.dispatch(addToastAction({ content: e }))\r\n          reslove(false)\r\n        })\r\n      } else {\r\n        reslove(false)\r\n      }\r\n    })\r\n  }\r\n  public connect(initProps: Partial<IProps> = {}) {\r\n    this.inject(initProps, (state: StateType) => {\r\n      return {}\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default LoginPageViewModel\r\n"]}
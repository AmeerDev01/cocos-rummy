{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/dragon/Slot/Mediator/BaseMediator.ts"],"names":["BaseMediator","instantiate","Mediator","constructor","mediatorName","viewComponent","wrapView","getSource","path","isInst","sourceMap","find","i","source","init","addChild","listenerEvent","listNotificationInterests","listNotificationConst","map","name","handleNotification","notification","interest","getName","handler","bind"],"mappings":";;;sGAoB8BA,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBgCC,MAAAA,W,OAAAA,W;;AADvDC,MAAAA,Q;;;;;;;;;AAKP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;yBAE8BF,Y,GAAf,MAAeA,YAAf;AAAA;AAAA,gCAA6C;AAG3D;;AAEA;AACA;AAEOG,QAAAA,WAAW,CAACC,YAAD,EAA8BC,aAA9B,EAA0D;AAAA,cAAzDD,YAAyD;AAAzDA,YAAAA,YAAyD,GAAlC,IAAkC;AAAA;;AAAA,cAA5BC,aAA4B;AAA5BA,YAAAA,aAA4B,GAAN,IAAM;AAAA;;AAC3E,gBAAMD,YAAN,EAAoBC,aAApB;;AARD;AAO4E,eANrEC,QAMqE;AAE3E;AACD;AACD;AACA;;AAEC;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACD;AACA;AACA;AACA;AACA;AACCC,QAAAA,SAAS,CAACC,IAAD,EAAeC,MAAf,EAAuC;AAAA,cAAxBA,MAAwB;AAAxBA,YAAAA,MAAwB,GAAN,IAAM;AAAA;;AAC/C,cAAIA,MAAJ,EAAY;AACX,mBAAOR,WAAW,CAAC,KAAKS,SAAL,CAAeC,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAWA,IAApC,EAA0CK,MAA3C,CAAlB;AACA,WAFD,MAEO;AACN,mBAAO,KAAKH,SAAL,CAAeC,IAAf,CAAoBC,CAAC,IAAIA,CAAC,CAACJ,IAAF,KAAWA,IAApC,CAAP;AACA;AACD;;AACSM,QAAAA,IAAI,GAAG;AAChB,eAAKR,QAAL,GAAgB,KAAKC,SAAL,CAAe,KAAKG,SAAL,CAAe,CAAf,EAAkBF,IAAjC,CAAhB;AACA,eAAKH,aAAL,CAAmBU,QAAnB,CAA4B,KAAKT,QAAjC;AACA,eAAKU,aAAL;AACA;AAED;;;AAGOC,QAAAA,yBAAyB,GAAa;AAC5C,iBAAO,KAAKC,qBAAL,CAA2BC,GAA3B,CAA+BP,CAAC,IAAIA,CAAC,CAACQ,IAAtC,CAAP;AACA;;AACMC,QAAAA,kBAAkB,CAACC,YAAD,EAA8B;AACtD,cAAMC,QAAQ,GAAG,KAAKL,qBAAL,CAA2BP,IAA3B,CAAgCC,CAAC,IAAIA,CAAC,CAACQ,IAAF,KAAWE,YAAY,CAACE,OAAb,EAAhD,CAAjB;AACAD,UAAAA,QAAQ,CAACE,OAAT,CAAiBC,IAAjB,CAAsB,IAAtB,EAA4BJ,YAA5B;AACA;;AA5E0D,O","sourcesContent":["import { INotification } from \"../../Framework/interfaces/INotification\"\r\nimport Mediator from \"../../Framework/patterns/mediator/Mediator\"\r\nimport { Asset, Prefab, SpriteFrame, __private, assetManager, instantiate, resources, Node } from \"cc\"\r\nimport { IlistTypeHander } from \"../types/IlistTypeHander\"\r\nimport { ISourceFile } from \"../types/ISourceFile\"\r\n\r\n// export interface IlistNotificationer<O> {\r\n// \tname: string\r\n// \tisListen?: boolean\r\n// \t/**返回是否继续执行 */\r\n// \thandler(this: O, notification: INotification): void\r\n// }\r\n\r\n// export type SourceFileType = {\r\n// \tkey: string,\r\n// \tpath: string,\r\n// \tsourceType: __private._types_globals__Constructor<Asset>,\r\n// \tsource: any\r\n// }\r\n\r\nexport default abstract class BaseMediator extends Mediator {\r\n\t/**最外层的预制组件节点 */\r\n\tpublic wrapView: Node\r\n\t// public isLoadAfterShowPrefavSource: boolean = true\r\n\r\n\t/**预制组件资源，需要子类实现 */\r\n\t// protected mainPrefabSource: SourceFileType\r\n\r\n\tpublic constructor(mediatorName: string = null, viewComponent: Node = null) {\r\n\t\tsuper(mediatorName, viewComponent)\r\n\t}\r\n\t/**\r\n\t * 需要预先加载的文件\r\n\t */\r\n\tpublic abstract sourceMap: Array<ISourceFile>\r\n\t/**这是Mediator需要监听的通知 */\r\n\tprotected abstract listNotificationConst: Array<IlistTypeHander<any>>\r\n\t// public loadSource() {\r\n\t//     return new Promise((reslove, reject) => {\r\n\t//         this.inAdvanceLoadFiles.forEach(async ({ path, sourceType }) => {\r\n\t//             resources.load(path, sourceType)\r\n\t//         })\r\n\t//         if (!this.mainPrefabSource) {\r\n\t//             reject(\"mainPrefabSource为空\")\r\n\t//         } else {\r\n\t//             resources.load(this.mainPrefabSource.path, this.mainPrefabSource.sourceType, (err, prefab) => {\r\n\t//                 this.mainPrefabSource.source = prefab\r\n\t//                 reslove(prefab)\r\n\t//             })\r\n\t//         }\r\n\t//     })\r\n\t//     // 需要提前加载的预制组件，之后就可以通过resources.get获取\r\n\t//     // this.inAdvanceLoadFiles.forEach(({ path, sourceType }) => resources.load(path, sourceType))\r\n\r\n\t//     // resources.load(this.prefabSource.path, Prefab, (err, prefab) => {\r\n\t//     //     this.prefabSource.source = prefab\r\n\t//     //     this.viewComponent.addChild(instantiate(prefab))\r\n\t//     // })\r\n\r\n\r\n\t//     // if (this.isLoadAfterShowPrefavSource) {\r\n\r\n\t//     // } else {\r\n\t//     //     resources.preload(this.prefabSource.path, Prefab, (err, prefab) => {\r\n\t//     //         this.prefabSource.source = prefab\r\n\t//     //     })\r\n\t//     // }\r\n\t// }\r\n\t/**\r\n\t * 获取实例化的资源\r\n\t * @param path 资源路径\r\n\t * @param isInst 是否要实例化(不填写就要实例化,返回node)\r\n\t * @returns isInst = true,返回ISourceFile\r\n\t */\r\n\tgetSource(path: string, isInst: boolean = true) {\r\n\t\tif (isInst) {\r\n\t\t\treturn instantiate(this.sourceMap.find(i => i.path === path).source)\r\n\t\t} else {\r\n\t\t\treturn this.sourceMap.find(i => i.path === path)\r\n\t\t}\r\n\t}\r\n\tprotected init() {\r\n\t\tthis.wrapView = this.getSource(this.sourceMap[0].path)\r\n\t\tthis.viewComponent.addChild(this.wrapView)\r\n\t\tthis.listenerEvent()\r\n\t}\r\n\r\n\t/**绑定时间的数据处理逻辑 */\r\n\tprotected abstract listenerEvent(): void\r\n\r\n\tpublic listNotificationInterests(): string[] {\r\n\t\treturn this.listNotificationConst.map(i => i.name)\r\n\t}\r\n\tpublic handleNotification(notification: INotification) {\r\n\t\tconst interest = this.listNotificationConst.find(i => i.name === notification.getName())\r\n\t\tinterest.handler.bind(this)(notification)\r\n\t}\r\n}"]}
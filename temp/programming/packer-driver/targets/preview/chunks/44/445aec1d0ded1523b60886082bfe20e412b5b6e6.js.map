{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/utils/CaptchaGenerator.ts"],"names":["CaptchaGenerator","Color","Graphics","Label","Node","UITransform","constructor","node","chartLength","displayNode","displayNoiseNode","captcha","generate","generateCaptcha","displayCaptcha","addNoise","length","charset","i","randomIndex","Math","floor","random","charAt","destroy","labelComponent","addComponent","string","color","fontSize","parseInt","fontFamily","horizontalAlign","HorizontalAlign","CENTER","addChild","ui","getComponent","transform","width","height","ctx","noiseAmount","x","y","fillColor","fillRect"],"mappings":"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","sourcesContent":["import Singleton from \"./Singleton\";\r\nimport { Color, Graphics, Label, Node, UITransform } from \"cc\"\r\n\r\nexport default class CaptchaGenerator {\r\n  constructor(node: Node, chartLength: number) {\r\n    this.node = node\r\n    this.chartLength = chartLength\r\n    this.generate()\r\n  }\r\n  private node: Node\r\n  private chartLength: number\r\n  private displayNode: Node\r\n  private displayNoiseNode: Node\r\n  public captcha: string\r\n  public generate() {\r\n    this.generateCaptcha(this.chartLength)\r\n    this.displayCaptcha()\r\n    this.addNoise()\r\n  }\r\n  /**生成指定长度的随机字符验证码 */\r\n  private generateCaptcha(length) {\r\n    const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    let captcha = \"\";\r\n    for (let i = 0; i < length; i++) {\r\n      const randomIndex = Math.floor(Math.random() * charset.length);\r\n      captcha += charset.charAt(randomIndex);\r\n    }\r\n    this.captcha = captcha\r\n  }\r\n  /**将验证码显示在精灵节点上 */\r\n  private displayCaptcha() {\r\n    // 此处假设你有一个字体文件来渲染文本，你可以在精灵上创建一个Label组件\r\n    this.displayNode && (this.displayNode.destroy())\r\n    this.displayNoiseNode && (this.displayNoiseNode.destroy())\r\n    this.displayNode = new Node();\r\n    const labelComponent = this.displayNode.addComponent(Label);\r\n    labelComponent.string = this.captcha;\r\n    labelComponent.color = new Color(0, 0, 0, 255)\r\n    labelComponent.fontSize = 26 + (parseInt(Math.random() * 6 + '')); // 设置字体大小\r\n    labelComponent.fontFamily = \"Arial\"; // 设置字体类型\r\n    labelComponent.horizontalAlign = Label.HorizontalAlign.CENTER; // 设置文本水平对齐方式\r\n\r\n    // 将Label节点作为子节点添加到验证码精灵节点上\r\n    this.node.addChild(this.displayNode);\r\n  }\r\n  /**添加噪点到验证码图片 */\r\n  private addNoise() {\r\n    // 获取精灵的宽度和高度\r\n    this.displayNoiseNode = new Node()\r\n    const ui = this.node.getComponent(UITransform)\r\n    const transform = this.displayNoiseNode.addComponent(UITransform);\r\n    transform.width = ui.width\r\n    transform.height = ui.height\r\n    const ctx = this.displayNoiseNode.addComponent(Graphics)\r\n    // 添加噪点\r\n    const noiseAmount = 70; // 调整噪点数量\r\n    for (let i = 0; i < noiseAmount; i++) {\r\n      // 随机生成噪点的坐标和颜色\r\n      const x = Math.floor(Math.random() * ui.width / 2 * (Math.random() > 0.5 ? 1 : -1));\r\n      const y = Math.floor(Math.random() * ui.height / 2 * (Math.random() > 0.5 ? 1 : -1));\r\n      const color = new Color(\r\n        Math.random() * 255,\r\n        Math.random() * 255,\r\n        Math.random() * 255,\r\n        255\r\n      );\r\n      // 绘制一个小的随机颜色点\r\n      ctx.fillColor = color//Color.fromHEX(color, '')//hexToColor(color);\r\n      ctx.fillRect(x, y, Math.random() > 0.5 ? 2 : 1, Math.random() > 0.5 ? 2 : 1);\r\n    }\r\n    this.node.addChild(this.displayNoiseNode)\r\n  }\r\n}\r\n\r\n"]}
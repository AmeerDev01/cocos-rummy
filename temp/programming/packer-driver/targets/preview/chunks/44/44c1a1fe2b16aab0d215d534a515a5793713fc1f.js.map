{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/domino/viewModel/MineViewModel.ts"],"names":["ViewModel","StoreInject","config","roomChooseViewModel","getStore","showOutCard","PlayerSatus","genCardItem","MineViewModel","constructor","handCardViewModelList","begin","setEvent","onOutCard","value","azimuth","cardItem","seatIndex","isTest","dispatch","mainBoardViewModel","sendOutCard","connect","inject","state","selfPlayer","deskData","playerMap","deskStatus","statue","outCardItem","leftOutCardItem","rightOutCardItem","newCardItem","currActiveSeatIndex","outCountdown","uid","head","nickName","glodAmount","gameData","WAITING","isMaster","remainCardCount","cardIList","noWayCardNumber","isActive","winloss"],"mappings":"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","sourcesContent":["; import ViewModel, { StoreInject } from \"../../../base/ViewModel\"\r\nimport { Domino_Mine, IEvent, IProps } from \"../components/Domino_Mine\"\r\nimport config from \"../config\"\r\nimport { roomChooseViewModel } from \"../index\"\r\nimport { getStore } from \"../store\"\r\nimport { showOutCard } from \"../store/action/game\"\r\nimport { StateType } from \"../store/reducer\"\r\nimport { PlayerSatus, genCardItem } from \"../type\"\r\nimport CardViewModel from \"./CardViewModel\"\r\n\r\n@StoreInject(getStore())\r\nclass MineViewModel extends ViewModel<Domino_Mine, IProps, IEvent> {\r\n  constructor() {\r\n    super('Domino_Mine')\r\n  }\r\n  public handCardViewModelList: CardViewModel[]\r\n  protected begin() {\r\n    this.setEvent({\r\n      onOutCard: (value: number, azimuth: 0 | 1) => {\r\n        const cardItem = genCardItem(value);\r\n        cardItem.azimuth = azimuth;\r\n        cardItem.seatIndex = 0;\r\n        if (config.isTest) {\r\n          this.dispatch(showOutCard(cardItem));\r\n        } else {\r\n          roomChooseViewModel.mainBoardViewModel.sendOutCard(cardItem);\r\n        }\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n  public connect() {\r\n    this.inject({}, (state: StateType) => {\r\n      const selfPlayer = state.deskData.playerMap[0]\r\n      return {\r\n        deskStatus: state.deskData.statue,\r\n        outCardItem: state.deskData.outCardItem,\r\n        leftOutCardItem: state.deskData.leftOutCardItem,\r\n        rightOutCardItem: state.deskData.rightOutCardItem,\r\n        newCardItem: state.deskData.newCardItem,\r\n        currActiveSeatIndex: state.deskData.currActiveSeatIndex,\r\n        outCountdown: state.deskData.outCountdown,\r\n        uid: selfPlayer ? selfPlayer.uid : '',\r\n        /**头像序号 */\r\n        head: selfPlayer ? selfPlayer.head : 0,\r\n        nickName: selfPlayer ? selfPlayer.nickName : '',\r\n        glodAmount: selfPlayer ? selfPlayer.glodAmount : 0,\r\n        /**状态 */\r\n        state: selfPlayer ? selfPlayer.gameData.state : PlayerSatus.WAITING,\r\n        /**是否是庄家 */\r\n        isMaster: selfPlayer ? selfPlayer.gameData.isMaster : false,\r\n        /**剩余牌数量 */\r\n        remainCardCount: selfPlayer ? selfPlayer.gameData.remainCardCount : 0,\r\n        /**手牌组，正常情况下，只有玩家自身才有 */\r\n        cardIList: selfPlayer ? selfPlayer.gameData.cardIList : [],\r\n        /**跟不上的牌点数 */\r\n        noWayCardNumber: selfPlayer ? selfPlayer.gameData.noWayCardNumber : [],\r\n        isActive: false,\r\n        winloss: selfPlayer ? selfPlayer.winloss : 0,\r\n      }\r\n    })\r\n    return this\r\n  }\r\n}\r\n\r\nexport default MineViewModel"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/common/listenerFactoy.ts"],"names":["listenerFactoy","dataMap","sktMsgListener","addOnce","key","id","handler","sortId","listenerItem","add","isAutoRemove","item","find","i","handlerList","push","dispath","data","error","sort","a","b","forEach","filter","removeAll","remove","removeById"],"mappings":"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","sourcesContent":["\r\n\r\n/**自定义的监听器 */\r\n// export const sktMsgListener = {\r\n//   addOnce: (key: SKT_MAG_TYPE, id: string, handler: (data: any) => void, sortId: number = 0) => {\r\n//     const listenerItem = sktMsgListener.add(key, id, handler, sortId)\r\n//     listenerItem.isAutoRemove = true\r\n//   },\r\n//   add: (key: SKT_MAG_TYPE, id: string, handler: (data: any) => void, sortId: number = 0) => {\r\n//     let item = dataMap.find(i => i.key === key)\r\n//     if (!item) {\r\n//       item = {\r\n//         key,\r\n//         isAutoRemove: false,\r\n//         handlerList: [{ id, sortId, handler }]\r\n//       }\r\n//       dataMap.push(item)\r\n//     } else {\r\n//       item.handlerList.push({ id, sortId, handler })\r\n//     }\r\n//     return item\r\n//   },\r\n//   dispath: (key: SKT_MAG_TYPE, data: any) => {\r\n//     const item = dataMap.find(i => i.key === key)\r\n//     if (item) {\r\n//       item.handlerList.sort((a, b) => a.sortId - b.sortId).forEach(item => item.handler(data))\r\n//       item.isAutoRemove && (dataMap = dataMap.filter(i => i.key !== key))\r\n//     }\r\n//   },\r\n//   remove: (key: SKT_MAG_TYPE, id?: string) => {\r\n//     if (id) {\r\n//       let item = dataMap.find(item => item.key === key)\r\n//       item.handlerList = item.handlerList.filter(item => item.id !== id)\r\n//     } else {\r\n//       dataMap = dataMap.filter(item => item.key !== key)\r\n//     }\r\n//   },\r\n//   removeById: (id: string) => {\r\n//     dataMap.forEach(item => {\r\n//       item.handlerList = item.handlerList.filter(item => item.id !== id)\r\n//     })\r\n//   }\r\n// }\r\n\r\n\r\nexport function listenerFactoy<MAG_TYPE>() {\r\n  let dataMap: Array<{\r\n    key: MAG_TYPE,\r\n    isAutoRemove: boolean\r\n    handlerList: Array<{\r\n      id: string,\r\n      sortId: number,\r\n      handler: (data: any, error?: string) => void\r\n    }>\r\n  }> = []\r\n  const sktMsgListener = {\r\n    /**添加一次性的监听函数，执行一次就自动失效 */\r\n    addOnce: (key: MAG_TYPE, id: string, handler: (data: any, error?: string) => void, sortId: number = 0) => {\r\n      const listenerItem = sktMsgListener.add(key, id, handler, sortId)\r\n      listenerItem.isAutoRemove = true\r\n    },\r\n    add: (key: MAG_TYPE, id: string, handler: (data: any, error?: string) => void, sortId: number = 0) => {\r\n      let item = dataMap.find(i => i.key === key)\r\n      if (!item) {\r\n        item = {\r\n          key,\r\n          isAutoRemove: false,\r\n          handlerList: [{ id, sortId, handler }]\r\n        }\r\n        dataMap.push(item)\r\n      } else {\r\n        item.handlerList.push({ id, sortId, handler })\r\n      }\r\n      return item\r\n    },\r\n    dispath: (key: MAG_TYPE, data: any, error?: string) => {\r\n      const item = dataMap.find(i => i.key === key)\r\n      if (item) {\r\n        item.handlerList.sort((a, b) => a.sortId - b.sortId).forEach(item => item.handler(data, error))\r\n        item.isAutoRemove && (dataMap = dataMap.filter(i => i.key !== key))\r\n      }\r\n    },\r\n    removeAll: () => { dataMap = [] },\r\n    remove: (key: MAG_TYPE, id?: string) => {\r\n      if (id) {\r\n        let item = dataMap.find(item => item.key === key)\r\n        item && (item.handlerList = item.handlerList.filter(item => item.id !== id))\r\n      } else {\r\n        dataMap = dataMap.filter(item => item.key !== key)\r\n      }\r\n    },\r\n    removeById: (id: string) => {\r\n      dataMap.forEach(item => {\r\n        item.handlerList = item.handlerList.filter(item => item.id !== id)\r\n      })\r\n    }\r\n  }\r\n  return sktMsgListener\r\n}"]}
{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/base/Injector.ts"],"names":["Injector","instantiate","getStore","constructor","prefabSource","ComppStr","unsubscribe","prefabFile","compStr","view","comp","props","dispatch","mountTo","wrapNode","addChild","setProps","unMount","removeAllChildren","destroy","connect","initProps","mapStateToProps","Object","assign","getComponent","subscribe","getState"],"mappings":";;;sGAKqBA,Q;;;;;;;;;;;;;;;;;;;AAL2BC,MAAAA,W,OAAAA,W;;AACvCC,MAAAA,Q,iBAAAA,Q;;;;;;;;;AAGT;yBACqBF,Q,GAAN,MAAMA,QAAN,CAAwD;AACrEG,QAAAA,WAAW,CAACC,YAAD,EAAuBC,QAAvB,EAAyC;AAAA,eAI5CC,WAJ4C;;AAKpD;AALoD,eAM7CC,UAN6C;AAAA,eAO7CC,OAP6C;;AAQpD;AARoD,eAS7CC,IAT6C;AAAA,eAU7CC,IAV6C;AAAA,eAW7CC,KAX6C;AAAA,eAY7CC,QAZ6C;AAClD,eAAKL,UAAL,GAAkBH,YAAlB,CADkD,CACpB;;AAC9B,eAAKI,OAAL,GAAeH,QAAf;AACD;;AAWD;AACOQ,QAAAA,OAAO,CAACC,QAAD,EAAiB;AAC7BA,UAAAA,QAAQ,CAACC,QAAT,CAAkB,KAAKN,IAAvB;AACA,eAAKC,IAAL,CAAUM,QAAV,CAAmB,KAAKL,KAAxB,EAA+B,IAA/B;AACA,iBAAO,IAAP;AACD;AACD;;;AACOM,QAAAA,OAAO,GAAG;AACf,eAAKX,WAAL;;AACA,cAAI,KAAKG,IAAT,EAAe;AACb,iBAAKA,IAAL,CAAUS,iBAAV;AACA,iBAAKT,IAAL,CAAUU,OAAV;AACD;AACF;;AACMC,QAAAA,OAAO,CAACC,SAAD,EAAwBC,eAAxB,EAA6F;AACzG;AACA;AACA;AACA,eAAKX,KAAL,GAAaY,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKb,KAAvB,EAA8BU,SAA9B,CAAb;AACA,eAAKZ,IAAL,GAAYR,WAAW,CAAC,KAAKM,UAAN,CAAvB;AACA,eAAKG,IAAL,GAAY,KAAKD,IAAL,CAAUgB,YAAV,CAAuB,KAAKjB,OAA5B,CAAZ;AACA,eAAKI,QAAL,GAAgB;AAAA;AAAA,sCAAWA,QAA3B;AACA,eAAKN,WAAL,GAAmB;AAAA;AAAA,sCAAWoB,SAAX,CAAqB,MAAM;AAC5CJ,YAAAA,eAAe,CAAC;AAAA;AAAA,wCAAWK,QAAX,EAAD,CAAf,CAD4C,CAE5C;AACD,WAHkB,CAAnB;AAIA,iBAAO,IAAP;AACD;;AA1CoE,O","sourcesContent":["import { Node, Prefab, Component, assetManager, instantiate } from \"cc\"\r\nimport { getStore } from \"../hall/store\"\r\nimport { BaseComponent } from \"./BaseComponent\";\r\n\r\n/**注入器，负责实例化节点和装载，并注入store数据、订阅事件 */\r\nexport default class Injector<T extends BaseComponent<any, P, any>, P> {\r\n  constructor(prefabSource: Prefab, ComppStr: string) {\r\n    this.prefabFile = prefabSource//PrefabFiles.find(item => item.path === prefabFile).source\r\n    this.compStr = ComppStr\r\n  }\r\n  private unsubscribe: () => void\r\n  /**注入器绑定的 */\r\n  public prefabFile: Prefab\r\n  public compStr: string\r\n  /**主节点（绑定脚本的节点） */\r\n  public view: Node\r\n  public comp: BaseComponent<any, any, any>\r\n  public props: P\r\n  public dispatch: (action: any) => void\r\n\r\n  /**装载进入视图并注入props */\r\n  public mountTo(wrapNode: Node) {\r\n    wrapNode.addChild(this.view)\r\n    this.comp.setProps(this.props, true)\r\n    return this\r\n  }\r\n  /**卸载 */\r\n  public unMount() {\r\n    this.unsubscribe()\r\n    if (this.view) {\r\n      this.view.removeAllChildren()\r\n      this.view.destroy()\r\n    }\r\n  }\r\n  public connect(initProps: Partial<P>, mapStateToProps: (state: any) => { [key in keyof P]: Partial<any> }) {\r\n    // const mapStateToProps = (state) => ({\r\n    //   count: state.count,\r\n    // })\r\n    this.props = Object.assign({}, this.props, initProps)\r\n    this.view = instantiate(this.prefabFile)\r\n    this.comp = this.view.getComponent(this.compStr) as T\r\n    this.dispatch = getStore().dispatch\r\n    this.unsubscribe = getStore().subscribe(() => {\r\n      mapStateToProps(getStore().getState())\r\n      // const state = store.getState().count\r\n    })\r\n    return this\r\n  }\r\n}"]}
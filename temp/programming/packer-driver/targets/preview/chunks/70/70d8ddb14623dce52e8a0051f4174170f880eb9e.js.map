{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/egypt/Framework/care/view.ts"],"names":["View","Observer","constructor","mediatorMap","observerMap","_instance","Error","initializeView","Instance","registerObserver","notificationName","observer","observers","push","removeObserver","notifyContext","i","length","compareNotifyContext","splice","notifyObservers","notification","getName","observersRef","slice","len","notifyObserver","registerMediator","mediator","name","getMediatorName","interests","listNotificationInterests","handleNotification","onRegister","retrieveMediator","mediatorName","removeMediator","onRemove","hasMediator"],"mappings":"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","sourcesContent":["import { IMediator } from \"../interfaces/IMediator\";\r\nimport { INotification } from \"../interfaces/INotification\";\r\nimport { IObserver } from \"../interfaces/IObserver\";\r\nimport { IView } from \"../interfaces/IView\";\r\nimport Mediator from \"../patterns/mediator/Mediator\";\r\nimport Observer from \"../patterns/observer/Observer\";\r\n\r\nexport default class View implements IView {\r\n\r\n    private static _instance: IView;\r\n    protected mediatorMap: { [propName: string]: IMediator } = null;\r\n    protected observerMap: { [propName: string]: IObserver[] } = null;\r\n\r\n    constructor() {\r\n        if (View._instance) throw Error(\"View singleton already constructed!\");\r\n\r\n        View._instance = this;\r\n        this.mediatorMap = {};\r\n        this.observerMap = {};\r\n        this.initializeView();\r\n    }\r\n\r\n    public static get Instance(): IView {\r\n        if (!View._instance)\r\n            View._instance = new View();\r\n        return View._instance;\r\n    }\r\n\r\n    protected initializeView() {\r\n\r\n    }\r\n\r\n    public registerObserver(notificationName: string, observer: IObserver): void {\r\n        let observers: IObserver[] = this.observerMap[notificationName];\r\n        if (observers) {\r\n            observers.push(observer);\r\n        } else {\r\n            this.observerMap[notificationName] = [observer];\r\n        }\r\n    }\r\n\r\n    public removeObserver(notificationName: string, notifyContext: any): void {\r\n        let observers: IObserver[] = this.observerMap[notificationName];\r\n        let i: number = observers.length;\r\n        while (i--) {\r\n            let observer: IObserver = observers[i];\r\n            if (observer.compareNotifyContext(notifyContext)) {\r\n                observers.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (observers.length == 0) {\r\n            delete this.observerMap[notificationName];\r\n        }\r\n    }\r\n\r\n    public notifyObservers(notification: INotification): void {\r\n        let notificationName: string = notification.getName();\r\n\r\n        let observersRef: IObserver[] = this.observerMap[notificationName];\r\n        if (observersRef) {\r\n            let observers = observersRef.slice(0);\r\n            let len: number = observers.length;\r\n            for (let i = 0; i < len; i++) {\r\n                let observer: IObserver = observers[i];\r\n                observer.notifyObserver(notification);\r\n            }\r\n        }\r\n    }\r\n\r\n    public registerMediator(mediator: IMediator): void {\r\n        let name: string = mediator.getMediatorName();\r\n\r\n        if (this.mediatorMap[name]) return;\r\n\r\n        this.mediatorMap[name] = mediator;\r\n\r\n        let interests: string[] = mediator.listNotificationInterests();\r\n        let len: Number = interests.length;\r\n\r\n        if (len > 0) {\r\n            let observer: IObserver = new Observer(mediator.handleNotification, mediator);\r\n            for (let i: number = 0; i < len; i++)\r\n                this.registerObserver(interests[i], observer);\r\n        }\r\n        mediator.onRegister();\r\n    }\r\n\r\n    public retrieveMediator(mediatorName: string): IMediator {\r\n        return this.mediatorMap[mediatorName] || null;\r\n    }\r\n\r\n    public removeMediator(mediatorName: string): IMediator {\r\n        let mediator: IMediator = this.mediatorMap[mediatorName];\r\n        if (!mediator) return null;\r\n\r\n        let interests: string[] = mediator.listNotificationInterests();\r\n        let i: number = interests.length;\r\n        while (i--) {\r\n            this.removeObserver(interests[i], mediator);\r\n        }\r\n\r\n        delete this.mediatorMap[mediatorName];\r\n\r\n        mediator.onRemove();\r\n        return mediator;\r\n    }\r\n\r\n    public hasMediator(mediatorName: string): boolean {\r\n        return this.mediatorMap[mediatorName] != null;\r\n    }\r\n\r\n}"]}
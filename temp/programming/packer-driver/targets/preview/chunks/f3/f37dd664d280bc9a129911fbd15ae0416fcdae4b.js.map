{"version":3,"sources":["file:///Users/geliang/web/dibai/hall/assets/script/subGame/bandar/components/Bandar_sendCard.ts"],"names":["_decorator","instantiate","Node","tween","Vec3","BaseComponent","config","TaskScheduler","Task","GameStatus","mainGameViewModel","playDealCard","ccclass","property","Bandar_sendCard","taskScheduler","propertyNode","props_all_card","props_spr_card","props","countDown","seconds","gameStatus","events","start","initState","bindEvent","useProps","key","value","setState","cur","active","BET","joinqQueue","done","state","createCard","window","setTimeout","isUnMount","removeCard","cardPosition","forEach","endP","index","card","scaling","task","addChild","to","position","x","y","scale","removeAllChildren","destroyCallBack","destoryQueue","bindUI","update","deltaTime"],"mappings":"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","sourcesContent":["import { _decorator,instantiate,Node, Quat, tween, UIOpacity, UITransform, Vec3 } from 'cc';\r\nimport { BaseComponent } from '../../../base/BaseComponent';\r\nimport { getNodeByNameDeep, initToggle } from '../../../utils/tool';\r\nimport config from '../config';\r\nimport TaskScheduler, { Task } from '../../../utils/TaskScheduler';\r\nimport { GameStatus } from '../type';\r\nimport { mainGameViewModel, playDealCard } from '../index';\r\n\r\nconst { ccclass, property } = _decorator;\r\n\r\n\r\nexport interface IState {\r\n    seconds: number,\r\n}\r\n\r\nexport interface IProps {\r\n\tcountDown: number,\r\n    gameStatus: GameStatus,\r\n    seconds: number,\r\n    \r\n}\r\n\r\nexport interface IEvent {\r\n\t\r\n}\r\n\r\n\r\n@ccclass('Bandar_sendCard')\r\nexport class Bandar_sendCard extends BaseComponent<IState, IProps, IEvent> {\r\n    private taskScheduler=new TaskScheduler();\r\n\r\n\tstart() {\r\n       \r\n\t }\r\n\r\n\tprotected propertyNode = {\r\n        props_all_card:new Node(),\r\n        props_spr_card:new Node()\r\n\t}\r\n\r\n\tpublic props: IProps = {\r\n        countDown: 0,\r\n        seconds:0,\r\n        gameStatus:null,\r\n\t}\r\n\r\n\tpublic events: IEvent = {\r\n\t\t\r\n\t}\r\n\r\n\tprotected initState() {\r\n\t\treturn {\r\n\t\t\tseconds: 0,\r\n\t\t}\r\n\t}\r\n\r\n\tprotected bindEvent(): void {\r\n\t\r\n\r\n\t}\r\n\r\n\tprotected useProps(key: keyof IProps, value: { pre: any, cur: any }) {\r\n        if (key === \"seconds\") {\r\n            // console.log(\"this.state.seconds\",value.cur);\r\n            this.setState({\r\n                seconds:value.cur\r\n            })\r\n        }\r\n        if (key === \"gameStatus\") {\r\n            this.propertyNode.props_spr_card.active = value.cur===GameStatus.BET\r\n            if(value.cur===GameStatus.BET){\r\n                this.taskScheduler.joinqQueue(new Task((done) => {\r\n                    //  console.log(this.state.seconds);\r\n                    //  console.log(this.props.seconds);\r\n                     \r\n                    if (this.state.seconds > 3) {\r\n                        this.createCard();\r\n                    }\r\n                    done()\r\n                }),false).joinqQueue(new Task((done)=>{\r\n                    this.propertyNode.props_spr_card.active=false;\r\n                    done()\r\n                }),false)\r\n            }else {\r\n                window.setTimeout(() => {\r\n                    if(mainGameViewModel.isUnMount){ return }\r\n                    if(!mainGameViewModel.isUnMount){\r\n                        this.removeCard();//移除所有发牌时添加的牌节点\r\n                    }\r\n                },500)\r\n              \r\n            }\r\n        }\r\n\t}\r\n\r\n    /**发牌 */\r\n    private createCard(){\r\n\r\n        config.cardPosition.forEach((endP,index)=>{\r\n            // playDealCard()\r\n            this.propertyNode.props_spr_card.active=true;\r\n            let card=instantiate(this.propertyNode.props_spr_card)\r\n            let scaling;\r\n            if(index % 5 === 0){\r\n                scaling = new Vec3(1, 1);\r\n            }else{\r\n                scaling = new Vec3(0.77, 0.77);\r\n            }\r\n            let task=new Task((done)=>{\r\n                playDealCard()\r\n                this.propertyNode.props_all_card.addChild(card)\r\n                tween(card).to(0.15,{position:new Vec3(endP.x,endP.y),\r\n                 scale:scaling\r\n                }).start();\r\n                window.setTimeout(()=>done(),100)\r\n            })\r\n               \r\n            this.taskScheduler.joinqQueue(task, false);\r\n        })\r\n\r\n    }\r\n\r\n    /**移除发牌的节点及添加的牌 */\r\n    private removeCard(){\r\n        let task=new Task((done)=>{         \r\n            this.propertyNode.props_all_card.removeAllChildren();\r\n            window.setTimeout(()=>done(),1000)\r\n        })\r\n        this.taskScheduler.joinqQueue(task,false)\r\n    }\r\n\r\n    protected destroyCallBack(): void {\r\n        this.taskScheduler.destoryQueue();\r\n\t}\r\n\r\n\tprotected bindUI(): void {\r\n        this.propertyNode.props_spr_card.active = this.props.gameStatus===GameStatus.BET\r\n\t}\r\n\r\n\tupdate(deltaTime: number) {\r\n\r\n\t}\r\n}\r\n\r\n"]}